#line 2 "repl_scanner.cpp"

#line 4 "repl_scanner.cpp"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer replication_yy_create_buffer
#define yy_delete_buffer replication_yy_delete_buffer
#define yy_flex_debug replication_yy_flex_debug
#define yy_init_buffer replication_yy_init_buffer
#define yy_flush_buffer replication_yy_flush_buffer
#define yy_load_buffer_state replication_yy_load_buffer_state
#define yy_switch_to_buffer replication_yy_switch_to_buffer
#define yyin replication_yyin
#define yyleng replication_yyleng
#define yylex replication_yylex
#define yylineno replication_yylineno
#define yyout replication_yyout
#define yyrestart replication_yyrestart
#define yytext replication_yytext
#define yywrap replication_yywrap
#define yyalloc replication_yyalloc
#define yyrealloc replication_yyrealloc
#define yyfree replication_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class___-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined(__STDC__)

#define YY_USE_CONST

#endif /* defined (__STDC__) */
#endif /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start)-1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new___ file". */
#define YY_NEW_FILE replication_yyrestart(replication_yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the
 * main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int replication_yyleng;

extern FILE *replication_yyin, *replication_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                              \
  do {                                                         \
    /* Undo effects of setting up replication_yytext. */       \
    int yyless_macro_arg = (n);                                \
    YY_LESS_LINENO(yyless_macro_arg);                          \
    *yy_cp = (yy_hold_char);                                   \
    YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp =            \
        yy_bp + yyless_macro_arg - YY_MORE_ADJ;                \
    YY_DO_BEFORE_ACTION; /* set up replication_yytext again */ \
  } while (0)

#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
  FILE *yy_input_file;

  char *yy_ch_buf;  /* input buffer */
  char *yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via replication_yyrestart()), so that the user can continue scanning by
 * just pointing replication_yyin at a new___ input file.
 */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0;       /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0;       /**< capacity of stack. */
static YY_BUFFER_STATE *yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER \
  ((yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when replication_yytext is formed. */
static char yy_hold_char;
static int yy_n_chars; /* number of characters read into yy_ch_buf */
int replication_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *)0;
static int yy_init = 0;  /* whether we need to initialize */
static int yy_start = 0; /* start state number */

/* Flag which is used to allow replication_yywrap()'s to do buffer switches
 * instead of setting up a fresh replication_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void replication_yyrestart(FILE *input_file);
void replication_yy_switch_to_buffer(YY_BUFFER_STATE new_buffer);
YY_BUFFER_STATE replication_yy_create_buffer(FILE *file, int size);
void replication_yy_delete_buffer(YY_BUFFER_STATE b);
void replication_yy_flush_buffer(YY_BUFFER_STATE b);
void replication_yypush_buffer_state(YY_BUFFER_STATE new_buffer);
void replication_yypop_buffer_state(void);

static void replication_yyensure_buffer_stack(void);
static void replication_yy_load_buffer_state(void);
static void replication_yy_init_buffer(YY_BUFFER_STATE b, FILE *file);

#define YY_FLUSH_BUFFER replication_yy_flush_buffer(YY_CURRENT_BUFFER)

YY_BUFFER_STATE replication_yy_scan_buffer(char *base, yy_size_t size);
YY_BUFFER_STATE replication_yy_scan_string(yyconst char *yy_str);
YY_BUFFER_STATE replication_yy_scan_bytes(yyconst char *bytes, int len);

void *replication_yyalloc(yy_size_t);
void *replication_yyrealloc(void *, yy_size_t);
void replication_yyfree(void *);

#define yy_new_buffer replication_yy_create_buffer

#define yy_set_interactive(is_interactive)                             \
  {                                                                    \
    if (!YY_CURRENT_BUFFER) {                                          \
      replication_yyensure_buffer_stack();                             \
      YY_CURRENT_BUFFER_LVALUE =                                       \
          replication_yy_create_buffer(replication_yyin, YY_BUF_SIZE); \
    }                                                                  \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;      \
  }

#define yy_set_bol(at_bol)                                             \
  {                                                                    \
    if (!YY_CURRENT_BUFFER) {                                          \
      replication_yyensure_buffer_stack();                             \
      YY_CURRENT_BUFFER_LVALUE =                                       \
          replication_yy_create_buffer(replication_yyin, YY_BUF_SIZE); \
    }                                                                  \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                      \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define replication_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *replication_yyin = (FILE *)0, *replication_yyout = (FILE *)0;

typedef int yy_state_type;

extern int replication_yylineno;

int replication_yylineno = 1;

extern char *replication_yytext;
#define yytext_ptr replication_yytext

static yy_state_type yy_get_previous_state(void);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state);
static int yy_get_next_buffer(void);
static void yy_fatal_error(yyconst char msg[]);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up replication_yytext.
 */
#define YY_DO_BEFORE_ACTION                     \
  (yytext_ptr) = yy_bp;                         \
  replication_yyleng = (size_t)(yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp;                      \
  *yy_cp = '\0';                                \
  (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 36
#define YY_END_OF_BUFFER 37
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[201] = {
    0,  0,  0,  0,  0,  0,  0,  37, 35, 23, 22, 24, 31, 27, 20, 21, 18,
    25, 19, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 30,
    28, 33, 32, 0,  25, 0,  34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
    34, 34, 34, 34, 34, 34, 34, 30, 29, 33, 26, 34, 34, 34, 34, 34, 34,
    34, 34, 34, 34, 34, 34, 34, 34, 34, 8,  34, 34, 34, 2,  34, 34, 34,
    34, 34, 34, 34, 17, 34, 34, 34, 34, 34, 34, 34, 4,  34, 34, 34,

    34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 5,  34, 34, 34, 34, 34,
    34, 34, 34, 34, 16, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 7,  15,
    6,  34, 34, 10, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
    34, 1,  34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
    34, 34, 34, 34, 34, 34, 34, 9,  34, 34, 34, 3,  34, 34, 34, 34, 34,
    14, 34, 34, 11, 34, 34, 34, 34, 34, 34, 34, 13, 34, 12, 0

};

static yyconst flex_int32_t yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  4,  1,  5,  1,  6,  1,
    1,  7,  8,  9,  1,  1,  10, 1,  1,  11, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 1,  13, 1,  1,  1,  1,  1,  14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
    25, 26, 27, 28, 29, 23, 30, 31, 32, 33, 23, 34, 35, 36, 23, 1,  1,  1,  1,
    37, 1,  23, 23, 23, 23,

    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
    23, 23, 23, 1,  1,  1,  1,  1,  38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
    38, 38, 38, 38, 38,

    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38};

static yyconst flex_int32_t
    yy_meta[39] = {0, 1, 1, 1, 1, 2, 3, 4, 1, 1, 1, 5, 6, 1, 6, 6, 6, 6, 6, 6,
                   6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3};

static yyconst flex_int16_t yy_base[209] = {
    0,   0,   0,   409, 408, 409, 408, 412, 417, 417, 417, 417, 417, 417, 417,
    417, 417, 28,  417, 35,  37,  39,  41,  43,  47,  80,  28,  54,  69,  73,
    74,  75,  0,   0,   404, 0,   417, 0,   48,  399, 0,   78,  79,  86,  81,
    97,  98,  105, 101, 99,  108, 109, 110, 116, 118, 125, 121, 127, 0,   417,
    0,   0,   136, 129, 134, 137, 144, 142, 145, 147, 152, 154, 163, 160, 165,
    162, 180, 172, 175, 182, 183, 185, 187, 193, 188, 379, 195, 208, 210, 211,
    213, 214, 219, 393, 232, 377, 215, 220, 221, 392, 237,

    238, 239, 242, 244, 249, 391, 245, 386, 262, 260, 371, 250, 266, 269, 372,
    270, 275, 385, 370, 370, 273, 277, 380, 279, 282, 379, 278, 294, 372, 377,
    369, 297, 0,   300, 301, 364, 302, 303, 359, 362, 368, 358, 363, 305, 366,
    357, 360, 368, 347, 360, 307, 359, 0,   358, 365, 343, 354, 339, 333, 344,
    311, 310, 327, 325, 306, 323, 314, 314, 295, 297, 296, 288, 267, 260, 246,
    0,   232, 239, 228, 0,   203, 190, 178, 168, 154, 0,   151, 100, 0,   33,
    42,  35,  37,  38,  30,  33,  0,   23,  0,   417,

    344, 350, 352, 356, 360, 366, 372, 38};

static yyconst flex_int16_t yy_def[209] = {
    0,   200, 1,   201, 201, 202, 202, 200, 200, 200, 200, 200, 200, 200, 200,
    200, 200, 203, 200, 204, 204, 204, 204, 204, 204, 204, 25,  25,  25,  25,
    25,  25,  205, 206, 200, 207, 200, 208, 203, 203, 205, 25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  206, 200,
    207, 208, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  205, 25,  25,  25,  25,
    25,  25,  25,  205, 25,  205, 25,  25,  25,  205, 25,

    25,  25,  25,  25,  25,  205, 25,  205, 25,  25,  205, 25,  25,  25,  205,
    25,  25,  205, 205, 205, 25,  25,  205, 25,  25,  205, 25,  25,  205, 205,
    205, 25,  205, 25,  25,  205, 25,  25,  205, 205, 205, 205, 205, 25,  205,
    205, 205, 205, 205, 205, 25,  205, 205, 205, 205, 205, 205, 205, 205, 205,
    205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
    205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
    205, 205, 205, 205, 205, 205, 205, 205, 205, 0,

    200, 200, 200, 200, 200, 200, 200, 200};

static yyconst flex_int16_t yy_nxt[456] = {
    0,   8,   9,   10,  11,  12,  8,   13,  14,  15,  16,  8,   17,  18,  19,
    20,  21,  22,  19,  23,  19,  19,  24,  19,  19,  25,  26,  27,  19,  28,
    19,  29,  30,  19,  31,  19,  19,  32,  32,  37,  38,  40,  49,  40,  61,
    40,  37,  40,  37,  40,  37,  42,  37,  40,  37,  199, 41,  45,  37,  37,
    38,  198, 197, 196, 46,  195, 194, 193, 41,  43,  192, 44,  40,  40,  40,
    40,  40,  40,  40,  40,  40,  40,  50,  41,  40,  40,  40,  41,  55,  57,
    51,  37,  41,  41,  47,  41,  56,  41,  53,  52,  41,

    41,  41,  41,  63,  54,  41,  41,  48,  64,  62,  41,  41,  41,  41,  41,
    66,  40,  40,  41,  67,  68,  41,  41,  41,  41,  41,  41,  65,  41,  41,
    191, 74,  41,  69,  41,  41,  41,  72,  41,  75,  41,  70,  79,  73,  71,
    41,  76,  41,  41,  41,  41,  77,  41,  78,  41,  41,  41,  41,  41,  83,
    41,  41,  80,  41,  41,  86,  84,  41,  81,  41,  82,  41,  41,  41,  41,
    41,  41,  190, 41,  41,  189, 41,  88,  85,  87,  41,  91,  41,  41,  41,
    41,  89,  41,  41,  90,  41,  41,  92,  41,  41,

    41,  41,  41,  98,  188, 187, 41,  41,  41,  41,  41,  93,  41,  94,  41,
    41,  100, 97,  96,  95,  41,  41,  41,  41,  41,  186, 41,  41,  41,  101,
    185, 104, 41,  41,  110, 41,  109, 41,  41,  102, 41,  41,  41,  105, 103,
    41,  41,  41,  41,  107, 41,  41,  41,  113, 184, 41,  114, 41,  41,  41,
    183, 182, 41,  41,  41,  41,  41,  181, 112, 41,  117, 41,  41,  41,  116,
    41,  41,  41,  115, 124, 121, 119, 41,  41,  122, 180, 41,  41,  41,  41,
    41,  137, 41,  41,  179, 41,  41,  41,  127, 125,

    41,  128, 41,  134, 41,  41,  41,  41,  132, 41,  41,  138, 135, 41,  41,
    41,  41,  144, 41,  178, 41,  41,  151, 177, 41,  176, 175, 41,  41,  41,
    41,  174, 41,  142, 41,  173, 172, 171, 170, 145, 169, 168, 167, 158, 33,
    33,  33,  33,  33,  33,  35,  35,  35,  35,  35,  35,  39,  39,  41,  166,
    41,  41,  40,  165, 164, 40,  58,  58,  58,  163, 58,  58,  60,  162, 60,
    60,  60,  60,  161, 160, 159, 157, 156, 155, 154, 153, 152, 150, 149, 148,
    147, 146, 143, 141, 140, 139, 136, 133, 131, 130,

    129, 126, 123, 120, 118, 111, 108, 106, 99,  37,  59,  200, 36,  36,  34,
    34,  7,   200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
    200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
    200, 200, 200, 200, 200, 200, 200, 200, 200, 200};

static yyconst flex_int16_t yy_chk[456] = {
    0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   17,  17,  19,  26,  20,  208,
    21,  19,  22,  20,  23,  21,  20,  22,  24,  23,  198, 26,  23,  24,  38,
    38,  196, 195, 194, 24,  193, 192, 191, 27,  21,  190, 22,  19,  19,  20,
    20,  21,  21,  22,  22,  23,  23,  27,  28,  24,  24,  25,  29,  30,  31,
    28,  25,  41,  42,  25,  44,  30,  28,  29,  28,  43,

    29,  30,  31,  43,  29,  41,  42,  25,  44,  42,  45,  46,  49,  43,  48,
    46,  25,  25,  47,  47,  48,  50,  51,  52,  45,  46,  49,  45,  48,  53,
    188, 54,  47,  49,  56,  50,  51,  52,  55,  55,  57,  50,  63,  53,  51,
    54,  56,  64,  56,  62,  65,  57,  55,  62,  57,  67,  63,  66,  68,  67,
    69,  64,  64,  62,  65,  70,  68,  71,  65,  67,  66,  66,  68,  73,  69,
    75,  72,  187, 74,  70,  185, 71,  72,  69,  71,  77,  75,  73,  78,  75,
    72,  73,  74,  76,  74,  79,  80,  76,  81,  77,

    82,  84,  78,  84,  184, 183, 83,  76,  86,  79,  80,  78,  81,  79,  82,
    84,  86,  83,  82,  80,  83,  87,  86,  88,  89,  182, 90,  91,  96,  87,
    181, 91,  92,  97,  98,  87,  96,  88,  89,  88,  90,  91,  96,  92,  90,
    94,  92,  97,  98,  94,  100, 101, 102, 101, 179, 103, 102, 104, 107, 94,
    178, 177, 105, 112, 100, 101, 102, 175, 100, 103, 105, 104, 107, 110, 104,
    109, 105, 112, 103, 113, 109, 107, 114, 116, 110, 174, 121, 110, 117, 109,
    122, 127, 124, 113, 173, 125, 114, 116, 116, 114,

    121, 117, 117, 124, 122, 127, 124, 128, 121, 125, 132, 128, 125, 134, 135,
    137, 138, 137, 144, 172, 151, 128, 144, 171, 132, 170, 169, 134, 135, 137,
    138, 168, 144, 132, 151, 167, 166, 165, 164, 138, 163, 162, 161, 151, 201,
    201, 201, 201, 201, 201, 202, 202, 202, 202, 202, 202, 203, 203, 204, 160,
    204, 204, 205, 159, 158, 205, 206, 206, 206, 157, 206, 206, 207, 156, 207,
    207, 207, 207, 155, 154, 152, 150, 149, 148, 147, 146, 145, 143, 142, 141,
    140, 139, 136, 131, 130, 129, 126, 123, 120, 119,

    118, 115, 111, 108, 106, 99,  95,  93,  85,  39,  34,  7,   6,   5,   4,
    3,   200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
    200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
    200, 200, 200, 200, 200, 200, 200, 200, 200, 200};

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int replication_yy_flex_debug;
int replication_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *replication_yytext;
#line 1 "repl_scanner.l"
#line 2 "repl_scanner.l"
/*-------------------------------------------------------------------------
 *
 * repl_scanner.l
 *	  a lexical scanner for the replication commands
 *
 * Portions Copyright (c) 1996-2015, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/replication/repl_scanner.l
 *
 *-------------------------------------------------------------------------
 */
#include "postgres.h"

#include "utils/builtins.h"
#include "parser/scansup.h"

/* Avoid exit() on fatal scanner errors (a bit ugly -- see yy_fatal_error) */
#undef fprintf
#define fprintf(file, fmt, msg) fprintf_to_ereport(fmt, msg)

static void fprintf_to_ereport(const char *fmt, const char *msg) {
  ereport(ERROR, (errmsg_internal("%s", msg)));
}

/* Handle to the buffer that the lexer uses internally */
static YY_BUFFER_STATE scanbufhandle;

static StringInfoData litbuf;

static void startlit(void);
static char *litbufdup(void);
static void addlit(char *ytext, int yleng);
static void addlitchar(unsigned char ychar);

#define YY_NO_INPUT 1

/* Extended quote
 * xqdouble implements embedded quote, ''''
 */
/* Double quote
 * Allows embedded spaces and other special characters into identifiers.
 */
#line 695 "repl_scanner.cpp"

#define INITIAL 0
#define xq 1
#define xd 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals(void);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int replication_yylex_destroy(void);

int replication_yyget_debug(void);

void replication_yyset_debug(int debug_flag);

YY_EXTRA_TYPE replication_yyget_extra(void);

void replication_yyset_extra(YY_EXTRA_TYPE user_defined);

FILE *replication_yyget_in(void);

void replication_yyset_in(FILE *in_str);

FILE *replication_yyget_out(void);

void replication_yyset_out(FILE *out_str);

int replication_yyget_leng(void);

char *replication_yyget_text(void);

int replication_yyget_lineno(void);

void replication_yyset_lineno(int line_number);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int replication_yywrap(void);
#else
extern int replication_yywrap(void);
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput(void);
#else
static int input(void);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO                                              \
  do {                                                    \
    if (fwrite(replication_yytext, replication_yyleng, 1, \
               replication_yyout)) {                      \
    }                                                     \
  } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                    \
  if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) {                       \
    int c = '*';                                                           \
    size_t n;                                                              \
    for (n = 0;                                                            \
         n < max_size && (c = getc(replication_yyin)) != EOF && c != '\n'; \
         ++n)                                                              \
      buf[n] = (char)c;                                                    \
    if (c == '\n') buf[n++] = (char)c;                                     \
    if (c == EOF && ferror(replication_yyin))                              \
      YY_FATAL_ERROR("input in flex scanner failed");                      \
    result = n;                                                            \
  } else {                                                                 \
    errno = 0;                                                             \
    while ((result = fread(buf, 1, max_size, replication_yyin)) == 0 &&    \
           ferror(replication_yyin)) {                                     \
      if (errno != EINTR) {                                                \
        YY_FATAL_ERROR("input in flex scanner failed");                    \
        break;                                                             \
      }                                                                    \
      errno = 0;                                                           \
      clearerr(replication_yyin);                                          \
    }                                                                      \
  }

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int replication_yylex(void);

#define YY_DECL int replication_yylex(void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after replication_yytext and
 * replication_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 81 "repl_scanner.l"

#line 885 "repl_scanner.cpp"

  if (!(yy_init)) {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!(yy_start)) (yy_start) = 1; /* first start state */

    if (!replication_yyin) replication_yyin = stdin;

    if (!replication_yyout) replication_yyout = stdout;

    if (!YY_CURRENT_BUFFER) {
      replication_yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE =
          replication_yy_create_buffer(replication_yyin, YY_BUF_SIZE);
    }

    replication_yy_load_buffer_state();
  }

  while (1) /* loops until end-of-file is reached */
  {
    yy_cp = (yy_c_buf_p);

    /* Support of replication_yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
  yy_match:
    do {
      register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
      if (yy_accept[yy_current_state]) {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
      }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = (int)yy_def[yy_current_state];
        if (yy_current_state >= 201) yy_c = yy_meta[(unsigned int)yy_c];
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
      ++yy_cp;
    } while (yy_current_state != 200);
    yy_cp = (yy_last_accepting_cpos);
    yy_current_state = (yy_last_accepting_state);

  yy_find_action:
    yy_act = yy_accept[yy_current_state];

    YY_DO_BEFORE_ACTION;

  do_action: /* This label is used only to access EOF actions. */

    switch (yy_act) { /* beginning of action switch */
      case 0:         /* must back up */
        /* undo the effects of YY_DO_BEFORE_ACTION */
        *yy_cp = (yy_hold_char);
        yy_cp = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        goto yy_find_action;

      case 1:
        YY_RULE_SETUP
#line 83 "repl_scanner.l"
        {
          return K_BASE_BACKUP;
        }
        YY_BREAK
      case 2:
        YY_RULE_SETUP
#line 84 "repl_scanner.l"
        {
          return K_FAST;
        }
        YY_BREAK
      case 3:
        YY_RULE_SETUP
#line 85 "repl_scanner.l"
        {
          return K_IDENTIFY_SYSTEM;
        }
        YY_BREAK
      case 4:
        YY_RULE_SETUP
#line 86 "repl_scanner.l"
        {
          return K_LABEL;
        }
        YY_BREAK
      case 5:
        YY_RULE_SETUP
#line 87 "repl_scanner.l"
        {
          return K_NOWAIT;
        }
        YY_BREAK
      case 6:
        YY_RULE_SETUP
#line 88 "repl_scanner.l"
        {
          return K_PROGRESS;
        }
        YY_BREAK
      case 7:
        YY_RULE_SETUP
#line 89 "repl_scanner.l"
        {
          return K_MAX_RATE;
        }
        YY_BREAK
      case 8:
        YY_RULE_SETUP
#line 90 "repl_scanner.l"
        {
          return K_WAL;
        }
        YY_BREAK
      case 9:
        YY_RULE_SETUP
#line 91 "repl_scanner.l"
        {
          return K_TABLESPACE_MAP;
        }
        YY_BREAK
      case 10:
        YY_RULE_SETUP
#line 92 "repl_scanner.l"
        {
          return K_TIMELINE;
        }
        YY_BREAK
      case 11:
        YY_RULE_SETUP
#line 93 "repl_scanner.l"
        {
          return K_START_REPLICATION;
        }
        YY_BREAK
      case 12:
        YY_RULE_SETUP
#line 94 "repl_scanner.l"
        {
          return K_CREATE_REPLICATION_SLOT;
        }
        YY_BREAK
      case 13:
        YY_RULE_SETUP
#line 95 "repl_scanner.l"
        {
          return K_DROP_REPLICATION_SLOT;
        }
        YY_BREAK
      case 14:
        YY_RULE_SETUP
#line 96 "repl_scanner.l"
        {
          return K_TIMELINE_HISTORY;
        }
        YY_BREAK
      case 15:
        YY_RULE_SETUP
#line 97 "repl_scanner.l"
        {
          return K_PHYSICAL;
        }
        YY_BREAK
      case 16:
        YY_RULE_SETUP
#line 98 "repl_scanner.l"
        {
          return K_LOGICAL;
        }
        YY_BREAK
      case 17:
        YY_RULE_SETUP
#line 99 "repl_scanner.l"
        {
          return K_SLOT;
        }
        YY_BREAK
      case 18:
        YY_RULE_SETUP
#line 101 "repl_scanner.l"
        {
          return ',';
        }
        YY_BREAK
      case 19:
        YY_RULE_SETUP
#line 102 "repl_scanner.l"
        {
          return ';';
        }
        YY_BREAK
      case 20:
        YY_RULE_SETUP
#line 103 "repl_scanner.l"
        {
          return '(';
        }
        YY_BREAK
      case 21:
        YY_RULE_SETUP
#line 104 "repl_scanner.l"
        {
          return ')';
        }
        YY_BREAK
      case 22:
        /* rule 22 can match eol */
        YY_RULE_SETUP
#line 106 "repl_scanner.l"
            ;
        YY_BREAK
      case 23:
        YY_RULE_SETUP
#line 107 "repl_scanner.l"
            ;
        YY_BREAK
      case 24:
        YY_RULE_SETUP
#line 108 "repl_scanner.l"
            ;
        YY_BREAK
      case 25:
        YY_RULE_SETUP
#line 110 "repl_scanner.l"
        {
          yylval.uintval = strtoul(replication_yytext, NULL, 10);
          return UCONST;
        }
        YY_BREAK
      case 26:
        YY_RULE_SETUP
#line 115 "repl_scanner.l"
        {
          uint32 hi, lo;
          if (sscanf(replication_yytext, "%X/%X", &hi, &lo) != 2)
            yyerror("invalid streaming start location");
          yylval.recptr = ((uint64)hi) << 32 | lo;
          return RECPTR;
        }
        YY_BREAK
      case 27:
        YY_RULE_SETUP
#line 124 "repl_scanner.l"
        {
          BEGIN(xq);
          startlit();
        }
        YY_BREAK
      case 28:
        YY_RULE_SETUP
#line 129 "repl_scanner.l"
        {
          yyless(1);
          BEGIN(INITIAL);
          yylval.str = litbufdup();
          return SCONST;
        }
        YY_BREAK
      case 29:
        YY_RULE_SETUP
#line 136 "repl_scanner.l"
        {
          addlitchar('\'');
        }
        YY_BREAK
      case 30:
        /* rule 30 can match eol */
        YY_RULE_SETUP
#line 140 "repl_scanner.l"
        {
          addlit(replication_yytext, replication_yyleng);
        }
        YY_BREAK
      case 31:
        YY_RULE_SETUP
#line 144 "repl_scanner.l"
        {
          BEGIN(xd);
          startlit();
        }
        YY_BREAK
      case 32:
        YY_RULE_SETUP
#line 149 "repl_scanner.l"
        {
          int len;
          yyless(1);
          BEGIN(INITIAL);
          yylval.str = litbufdup();
          len = strlen(yylval.str);
          truncate_identifier(yylval.str, len, true);
          return IDENT;
        }
        YY_BREAK
      case 33:
        /* rule 33 can match eol */
        YY_RULE_SETUP
#line 159 "repl_scanner.l"
        {
          addlit(replication_yytext, replication_yyleng);
        }
        YY_BREAK
      case 34:
        YY_RULE_SETUP
#line 163 "repl_scanner.l"
        {
          int len = strlen(replication_yytext);

          yylval.str =
              downcase_truncate_identifier(replication_yytext, len, true);
          return IDENT;
        }
        YY_BREAK
      case YY_STATE_EOF(xq):
      case YY_STATE_EOF(xd):
#line 170 "repl_scanner.l"
      {
        yyerror("unterminated quoted string");
      }
        YY_BREAK
      case YY_STATE_EOF(INITIAL):
#line 173 "repl_scanner.l"
      {
        yyterminate();
      }
        YY_BREAK
      case 35:
        YY_RULE_SETUP
#line 177 "repl_scanner.l"
        {
          ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                          errmsg("syntax error: unexpected character \"%s\"",
                                 replication_yytext)));
        }
        YY_BREAK
      case 36:
        YY_RULE_SETUP
#line 182 "repl_scanner.l"
        YY_FATAL_ERROR("flex scanner jammed");
        YY_BREAK
#line 1202 "repl_scanner.cpp"

      case YY_END_OF_BUFFER: {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = (yy_hold_char);
        YY_RESTORE_YY_MORE_OFFSET

        if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
          /* We're scanning a new___ file or input source.  It's
           * possible that this happened because the user
           * just pointed replication_yyin at a new___ source and called
           * replication_yylex().  If so, then we have to assure
           * consistency between YY_CURRENT_BUFFER and our
           * globals.  Here is the right place to do so, because
           * this is the first action (other than possibly a
           * back-up) that will match for the new___ input source.
           */
          (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
          YY_CURRENT_BUFFER_LVALUE->yy_input_file = replication_yyin;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ((yy_c_buf_p) <=
            &YY_CURRENT_BUFFER_LVALUE
                 ->yy_ch_buf[(yy_n_chars)]) { /* This was really a NUL. */
          yy_state_type yy_next_state;

          (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

          yy_current_state = yy_get_previous_state();

          /* Okay, we're now positioned to make the NUL
           * transition.  We couldn't have
           * yy_get_previous_state() go ahead and do it
           * for us because it doesn't know how to deal
           * with the possibility of jamming (and we don't
           * want to build jamming into it because then it
           * will run more slowly).
           */

          yy_next_state = yy_try_NUL_trans(yy_current_state);

          yy_bp = (yytext_ptr) + YY_MORE_ADJ;

          if (yy_next_state) {
            /* Consume the NUL. */
            yy_cp = ++(yy_c_buf_p);
            yy_current_state = yy_next_state;
            goto yy_match;
          }

          else {
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            goto yy_find_action;
          }
        }

        else
          switch (yy_get_next_buffer()) {
            case EOB_ACT_END_OF_FILE: {
              (yy_did_buffer_switch_on_eof) = 0;

              if (replication_yywrap()) {
                /* Note: because we've taken care in
                 * yy_get_next_buffer() to have set up
                 * replication_yytext, we can now set up
                 * yy_c_buf_p so that if some total
                 * hoser (like flex itself) wants to
                 * call the scanner after we return the
                 * YY_NULL, it'll still work - another
                 * YY_NULL will get returned.
                 */
                (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                yy_act = YY_STATE_EOF(YY_START);
                goto do_action;
              }

              else {
                if (!(yy_did_buffer_switch_on_eof)) YY_NEW_FILE;
              }
              break;
            }

            case EOB_ACT_CONTINUE_SCAN:
              (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

              yy_current_state = yy_get_previous_state();

              yy_cp = (yy_c_buf_p);
              yy_bp = (yytext_ptr) + YY_MORE_ADJ;
              goto yy_match;

            case EOB_ACT_LAST_MATCH:
              (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

              yy_current_state = yy_get_previous_state();

              yy_cp = (yy_c_buf_p);
              yy_bp = (yytext_ptr) + YY_MORE_ADJ;
              goto yy_find_action;
          }
        break;
      }

      default:
        YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
    } /* end of action switch */
  }   /* end of scanning one token */
} /* end of replication_yylex */

/* yy_get_next_buffer - try to read in a new___ buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(void) {
  register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  register char *source = (yytext_ptr);
  register int number_to_move, i;
  int ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer ==
      0) { /* Don't try to fill the buffer, so this is an EOF. */
    if ((yy_c_buf_p) - (yytext_ptr)-YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

  for (i = 0; i < number_to_move; ++i) *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else {
    int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

      int yy_c_buf_p_offset = (int)((yy_c_buf_p)-b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        int new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
            /* Include room in for 2 EOB chars. */
            replication_yyrealloc((void *)b->yy_ch_buf, b->yy_buf_size + 2);
      } else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if (!b->yy_ch_buf)
        YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE) num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
             (yy_n_chars), (size_t)num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  if ((yy_n_chars) == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      replication_yyrestart(replication_yyin);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yy_size_t)((yy_n_chars) + number_to_move) >
      YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *)replication_yyrealloc(
        (void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
  }

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(void) {
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp) {
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos) = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 201) yy_c = yy_meta[(unsigned int)yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state) {
  register int yy_is_jam;
  register char *yy_cp = (yy_c_buf_p);

  register YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos) = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 201) yy_c = yy_meta[(unsigned int)yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  yy_is_jam = (yy_current_state == 200);

  return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(void)
#else
static int input(void)
#endif

{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
      /* This was really a NUL. */
      *(yy_c_buf_p) = '\0';

    else { /* need more input */
      int offset = (yy_c_buf_p) - (yytext_ptr);
      ++(yy_c_buf_p);

      switch (yy_get_next_buffer()) {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          replication_yyrestart(replication_yyin);

        /*FALLTHROUGH*/

        case EOB_ACT_END_OF_FILE: {
          if (replication_yywrap()) return EOF;

          if (!(yy_did_buffer_switch_on_eof)) YY_NEW_FILE;
#ifdef __cplusplus
          return yyinput();
#else
          return input();
#endif
        }

        case EOB_ACT_CONTINUE_SCAN:
          (yy_c_buf_p) = (yytext_ptr) + offset;
          break;
      }
    }
  }

  c = *(unsigned char *)(yy_c_buf_p); /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0';               /* preserve replication_yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void replication_yyrestart(FILE *input_file) {
  if (!YY_CURRENT_BUFFER) {
    replication_yyensure_buffer_stack();
    YY_CURRENT_BUFFER_LVALUE =
        replication_yy_create_buffer(replication_yyin, YY_BUF_SIZE);
  }

  replication_yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  replication_yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new___ input buffer.
 *
 */
void replication_yy_switch_to_buffer(YY_BUFFER_STATE new_buffer) {
  /* TODO. We should be able to replace this entire function body
   * with
   *		replication_yypop_buffer_state();
   *		replication_yypush_buffer_state(new_buffer);
   */
  replication_yyensure_buffer_stack();
  if (YY_CURRENT_BUFFER == new_buffer) return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  replication_yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (replication_yywrap()) processing, but the only time this flag
   * is looked at is after replication_yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

static void replication_yy_load_buffer_state(void) {
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  replication_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c
 *YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE replication_yy_create_buffer(FILE *file, int size) {
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)replication_yyalloc(sizeof(struct yy_buffer_state));
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in replication_yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *)replication_yyalloc(b->yy_buf_size + 2);
  if (!b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in replication_yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  replication_yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with replication_yy_create_buffer()
 *
 */
void replication_yy_delete_buffer(YY_BUFFER_STATE b) {
  if (!b) return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer) replication_yyfree((void *)b->yy_ch_buf);

  replication_yyfree((void *)b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a replication_yyrestart() or at EOF.
 */
static void replication_yy_init_buffer(YY_BUFFER_STATE b, FILE *file)

{
  int oerrno = errno;

  replication_yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then replication_yy_init_buffer was _probably_
   * called from replication_yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  b->yy_is_interactive = 0;

  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void replication_yy_flush_buffer(YY_BUFFER_STATE b) {
  if (!b) return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER) replication_yy_load_buffer_state();
}

/** Pushes the new___ state onto the stack. The new___ state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new___ state.
 *
 */
void replication_yypush_buffer_state(YY_BUFFER_STATE new_buffer) {
  if (new_buffer == NULL) return;

  replication_yyensure_buffer_stack();

  /* This block is copied from replication_yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER) (yy_buffer_stack_top)++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from replication_yy_switch_to_buffer. */
  replication_yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new___ top.
 *
 */
void replication_yypop_buffer_state(void) {
  if (!YY_CURRENT_BUFFER) return;

  replication_yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if ((yy_buffer_stack_top) > 0) --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER) {
    replication_yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void replication_yyensure_buffer_stack(void) {
  int num_to_alloc;

  if (!(yy_buffer_stack)) {
    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) = (struct yy_buffer_state **)replication_yyalloc(
        num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR(
          "out of dynamic memory in replication_yyensure_buffer_stack()");

    memset((yy_buffer_stack), 0,
           num_to_alloc * sizeof(struct yy_buffer_state *));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
  }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {
    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state **)replication_yyrealloc(
        (yy_buffer_stack), num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR(
          "out of dynamic memory in replication_yyensure_buffer_stack()");

    /* zero only the new___ slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0,
           grow_size * sizeof(struct yy_buffer_state *));
    (yy_buffer_stack_max) = num_to_alloc;
  }
}

/** Setup the input buffer state to scan directly from a user-specified
 *character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE replication_yy_scan_buffer(char *base, yy_size_t size) {
  YY_BUFFER_STATE b;

  if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR ||
      base[size - 1] != YY_END_OF_BUFFER_CHAR)
    /* They forgot to leave room for the EOB's. */
    return 0;

  b = (YY_BUFFER_STATE)replication_yyalloc(sizeof(struct yy_buffer_state));
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in replication_yy_scan_buffer()");

  b->yy_buf_size = size - 2; /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = 0;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  replication_yy_switch_to_buffer(b);

  return b;
}

/** Setup the input buffer state to scan a string. The next call to
 *replication_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       replication_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE replication_yy_scan_string(yyconst char *yystr) {
  return replication_yy_scan_bytes(yystr, strlen(yystr));
}

/** Setup the input buffer state to scan the given bytes. The next call to
 *replication_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE replication_yy_scan_bytes(yyconst char *yybytes,
                                          int _yybytes_len) {
  YY_BUFFER_STATE b;
  char *buf;
  yy_size_t n;
  int i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = _yybytes_len + 2;
  buf = (char *)replication_yyalloc(n);
  if (!buf)
    YY_FATAL_ERROR("out of dynamic memory in replication_yy_scan_bytes()");

  for (i = 0; i < _yybytes_len; ++i) buf[i] = yybytes[i];

  buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

  b = replication_yy_scan_buffer(buf, n);
  if (!b) YY_FATAL_ERROR("bad buffer in replication_yy_scan_bytes()");

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error(yyconst char *msg) {
  (void)fprintf(stderr, "%s\n", msg);
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                            \
  do {                                                       \
    /* Undo effects of setting up replication_yytext. */     \
    int yyless_macro_arg = (n);                              \
    YY_LESS_LINENO(yyless_macro_arg);                        \
    replication_yytext[replication_yyleng] = (yy_hold_char); \
    (yy_c_buf_p) = replication_yytext + yyless_macro_arg;    \
    (yy_hold_char) = *(yy_c_buf_p);                          \
    *(yy_c_buf_p) = '\0';                                    \
    replication_yyleng = yyless_macro_arg;                   \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int replication_yyget_lineno(void) { return replication_yylineno; }

/** Get the input stream.
 *
 */
FILE *replication_yyget_in(void) { return replication_yyin; }

/** Get the output stream.
 *
 */
FILE *replication_yyget_out(void) { return replication_yyout; }

/** Get the length of the current token.
 *
 */
int replication_yyget_leng(void) { return replication_yyleng; }

/** Get the current token.
 *
 */

char *replication_yyget_text(void) { return replication_yytext; }

/** Set the current line number.
 * @param line_number
 *
 */
void replication_yyset_lineno(int line_number) {
  replication_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see replication_yy_switch_to_buffer
 */
void replication_yyset_in(FILE *in_str) { replication_yyin = in_str; }

void replication_yyset_out(FILE *out_str) { replication_yyout = out_str; }

int replication_yyget_debug(void) { return replication_yy_flex_debug; }

void replication_yyset_debug(int bdebug) { replication_yy_flex_debug = bdebug; }

static int yy_init_globals(void) {
  /* Initialization is the same as for the non-reentrant scanner.
*This function is called from replication_yylex_destroy(), so don't allocate
* here.
*/

  (yy_buffer_stack) = 0;
  (yy_buffer_stack_top) = 0;
  (yy_buffer_stack_max) = 0;
  (yy_c_buf_p) = (char *)0;
  (yy_init) = 0;
  (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
  replication_yyin = stdin;
  replication_yyout = stdout;
#else
  replication_yyin = (FILE *)0;
  replication_yyout = (FILE *)0;
#endif

  /* For future reference: Set errno on error, since we are called by
   * replication_yylex_init()
   */
  return 0;
}

/* replication_yylex_destroy is for both reentrant and non-reentrant scanners.
 */
int replication_yylex_destroy(void) {
  /* Pop the buffer stack, destroying each element. */
  while (YY_CURRENT_BUFFER) {
    replication_yy_delete_buffer(YY_CURRENT_BUFFER);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    replication_yypop_buffer_state();
  }

  /* Destroy the stack itself. */
  replication_yyfree((yy_buffer_stack));
  (yy_buffer_stack) = NULL;

  /* Reset the globals. This is important in a non-reentrant scanner so the next
   * time
   * replication_yylex() is called, initialization will occur. */
  yy_init_globals();

  return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n) {
  register int i;
  for (i = 0; i < n; ++i) s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *s) {
  register int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *replication_yyalloc(yy_size_t size) { return (void *)malloc(size); }

void *replication_yyrealloc(void *ptr, yy_size_t size) {
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *)realloc((char *)ptr, size);
}

void replication_yyfree(void *ptr) {
  free((char *)ptr); /* see replication_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 182 "repl_scanner.l"

static void startlit(void) { initStringInfo(&litbuf); }

static char *litbufdup(void) { return litbuf.data; }

static void addlit(char *ytext, int yleng) {
  appendBinaryStringInfo(&litbuf, ytext, yleng);
}

static void addlitchar(unsigned char ychar) {
  appendStringInfoChar(&litbuf, ychar);
}

void yyerror(const char *message) {
  ereport(ERROR,
          (errcode(ERRCODE_SYNTAX_ERROR), errmsg_internal("%s", message)));
}

void replication_scanner_init(const char *str) {
  Size slen = strlen(str);
  char *scanbuf;

  /*
   * Might be left over after ereport()
   */
  if (YY_CURRENT_BUFFER) replication_yy_delete_buffer(YY_CURRENT_BUFFER);

  /*
   * Make a scan buffer with special termination needed by flex.
   */
  scanbuf = (char *)palloc(slen + 2);
  memcpy(scanbuf, str, slen);
  scanbuf[slen] = scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;
  scanbufhandle = replication_yy_scan_buffer(scanbuf, slen + 2);
}

void replication_scanner_finish() {
  replication_yy_delete_buffer(scanbufhandle);
  scanbufhandle = NULL;
}
