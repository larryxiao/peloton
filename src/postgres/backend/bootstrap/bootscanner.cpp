#line 2 "bootscanner.cpp"

#line 4 "bootscanner.cpp"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer boot_yy_create_buffer
#define yy_delete_buffer boot_yy_delete_buffer
#define yy_flex_debug boot_yy_flex_debug
#define yy_init_buffer boot_yy_init_buffer
#define yy_flush_buffer boot_yy_flush_buffer
#define yy_load_buffer_state boot_yy_load_buffer_state
#define yy_switch_to_buffer boot_yy_switch_to_buffer
#define yyin boot_yyin
#define yyleng boot_yyleng
#define yylex boot_yylex
#define yylineno boot_yylineno
#define yyout boot_yyout
#define yyrestart boot_yyrestart
#define yytext boot_yytext
#define yywrap boot_yywrap
#define yyalloc boot_yyalloc
#define yyrealloc boot_yyrealloc
#define yyfree boot_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class___-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined(__STDC__)

#define YY_USE_CONST

#endif /* defined (__STDC__) */
#endif /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start)-1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new___ file". */
#define YY_NEW_FILE boot_yyrestart(boot_yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the
 * main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int boot_yyleng;

extern FILE *boot_yyin, *boot_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                       \
  do {                                                  \
    /* Undo effects of setting up boot_yytext. */       \
    int yyless_macro_arg = (n);                         \
    YY_LESS_LINENO(yyless_macro_arg);                   \
    *yy_cp = (yy_hold_char);                            \
    YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp =     \
        yy_bp + yyless_macro_arg - YY_MORE_ADJ;         \
    YY_DO_BEFORE_ACTION; /* set up boot_yytext again */ \
  } while (0)

#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
  FILE *yy_input_file;

  char *yy_ch_buf;  /* input buffer */
  char *yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via boot_yyrestart()), so that the user can continue scanning by
 * just pointing boot_yyin at a new___ input file.
 */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0;       /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0;       /**< capacity of stack. */
static YY_BUFFER_STATE *yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER \
  ((yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when boot_yytext is formed. */
static char yy_hold_char;
static int yy_n_chars; /* number of characters read into yy_ch_buf */
int boot_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *)0;
static int yy_init = 0;  /* whether we need to initialize */
static int yy_start = 0; /* start state number */

/* Flag which is used to allow boot_yywrap()'s to do buffer switches
 * instead of setting up a fresh boot_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void boot_yyrestart(FILE *input_file);
void boot_yy_switch_to_buffer(YY_BUFFER_STATE new_buffer);
YY_BUFFER_STATE boot_yy_create_buffer(FILE *file, int size);
void boot_yy_delete_buffer(YY_BUFFER_STATE b);
void boot_yy_flush_buffer(YY_BUFFER_STATE b);
void boot_yypush_buffer_state(YY_BUFFER_STATE new_buffer);
void boot_yypop_buffer_state(void);

static void boot_yyensure_buffer_stack(void);
static void boot_yy_load_buffer_state(void);
static void boot_yy_init_buffer(YY_BUFFER_STATE b, FILE *file);

#define YY_FLUSH_BUFFER boot_yy_flush_buffer(YY_CURRENT_BUFFER)

YY_BUFFER_STATE boot_yy_scan_buffer(char *base, yy_size_t size);
YY_BUFFER_STATE boot_yy_scan_string(yyconst char *yy_str);
YY_BUFFER_STATE boot_yy_scan_bytes(yyconst char *bytes, int len);

void *boot_yyalloc(yy_size_t);
void *boot_yyrealloc(void *, yy_size_t);
void boot_yyfree(void *);

#define yy_new_buffer boot_yy_create_buffer

#define yy_set_interactive(is_interactive)                        \
  {                                                               \
    if (!YY_CURRENT_BUFFER) {                                     \
      boot_yyensure_buffer_stack();                               \
      YY_CURRENT_BUFFER_LVALUE =                                  \
          boot_yy_create_buffer(boot_yyin, YY_BUF_SIZE);          \
    }                                                             \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
  }

#define yy_set_bol(at_bol)                               \
  {                                                      \
    if (!YY_CURRENT_BUFFER) {                            \
      boot_yyensure_buffer_stack();                      \
      YY_CURRENT_BUFFER_LVALUE =                         \
          boot_yy_create_buffer(boot_yyin, YY_BUF_SIZE); \
    }                                                    \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;        \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define boot_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *boot_yyin = (FILE *)0, *boot_yyout = (FILE *)0;

typedef int yy_state_type;

extern int boot_yylineno;

int boot_yylineno = 1;

extern char *boot_yytext;
#define yytext_ptr boot_yytext

static yy_state_type yy_get_previous_state(void);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state);
static int yy_get_next_buffer(void);
static void yy_fatal_error(yyconst char msg[]);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up boot_yytext.
 */
#define YY_DO_BEFORE_ACTION              \
  (yytext_ptr) = yy_bp;                  \
  boot_yyleng = (size_t)(yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp;               \
  *yy_cp = '\0';                         \
  (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 37
#define YY_END_OF_BUFFER 38
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[174] = {
    0,  0,  0,  38, 36, 16, 15, 17, 36, 13, 14, 11, 31, 36, 31, 12, 31, 31, 31,
    31, 36, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 18, 0,  32, 31, 0,  31,
    0,  34, 33, 31, 31, 31, 0,  31, 31, 31, 31, 0,  31, 31, 31, 31, 31, 31, 31,
    24, 31, 31, 31, 31, 31, 31, 31, 18, 31, 0,  33, 0,  0,  31, 31, 0,  30, 31,
    28, 31, 4,  0,  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
    31, 0,  34, 0,  0,  33,

    35, 31, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1,  31, 31, 31, 31, 31, 31,
    0,  33, 27, 31, 31, 20, 2,  31, 31, 23, 31, 31, 31, 31, 26, 31, 25, 31, 9,
    31, 3,  31, 31, 10, 31, 31, 22, 31, 31, 19, 21, 31, 31, 31, 31, 31, 31, 31,
    5,  31, 31, 31, 31, 31, 31, 8,  31, 31, 31, 7,  31, 31, 6,  0};

static yyconst flex_int32_t yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  4,  1,  5,  6,  1,  1,
    1,  1,  7,  8,  1,  9,  10, 11, 12, 1,  13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 1,  1,  1,  14, 1,  1,  1,  15, 15, 16, 17, 18, 19, 15, 15, 20, 15, 15,
    21, 15, 22, 23, 15, 15, 24, 15, 25, 26, 15, 15, 15, 15, 15, 27, 28, 29, 1,
    30, 1,  31, 32, 33, 34,

    35, 15, 36, 37, 38, 15, 15, 39, 15, 40, 41, 42, 43, 44, 45, 46, 47, 15, 48,
    49, 50, 15, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,

    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

static yyconst flex_int32_t
    yy_meta[51] = {0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 3, 3,
                   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 1, 3, 3, 3, 3,
                   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3};

static yyconst flex_int16_t yy_base[178] = {
    0,   0,   178, 177, 878, 878, 878, 878, 171, 878, 878, 878, 39,  158, 42,
    878, 45,  51,  64,  69,  155, 71,  73,  82,  95,  91,  101, 105, 123, 125,
    127, 136, 0,   154, 878, 76,  131, 157, 129, 127, 143, 168, 171, 178, 95,
    189, 182, 200, 203, 114, 207, 211, 213, 221, 231, 244, 233, 252, 257, 262,
    270, 275, 284, 288, 293, 0,   316, 55,  295, 322, 112, 145, 325, 136, 878,
    329, 331, 339, 335, 102, 337, 343, 357, 363, 366, 371, 376, 389, 394, 401,
    408, 414, 421, 426, 428, 263, 92,  82,  449, 73,  58,

    52,  456, 458, 460, 464, 466, 468, 470, 490, 478, 496, 503, 508, 514, 521,
    526, 532, 534, 539, 48,  46,  546, 557, 564, 566, 570, 577, 588, 590, 595,
    597, 608, 617, 626, 628, 630, 637, 648, 650, 655, 658, 660, 662, 668, 680,
    686, 688, 690, 700, 708, 711, 718, 720, 731, 740, 742, 744, 752, 763, 771,
    775, 777, 781, 795, 803, 805, 807, 809, 813, 815, 827, 833, 878, 867, 55,
    869, 873};

static yyconst flex_int16_t yy_def[178] = {
    0,   173, 1,   173, 173, 173, 173, 173, 174, 173, 173, 173, 175, 173, 176,
    173, 176, 176, 176, 176, 173, 176, 176, 176, 176, 176, 176, 176, 176, 176,
    176, 176, 177, 174, 173, 175, 173, 175, 173, 173, 173, 176, 176, 176, 173,
    176, 176, 176, 176, 173, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
    176, 176, 176, 176, 176, 177, 175, 173, 173, 173, 173, 175, 176, 173, 173,
    176, 176, 176, 176, 173, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
    176, 176, 176, 176, 176, 175, 173, 173, 173, 173, 173,

    173, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
    176, 176, 176, 176, 173, 173, 176, 176, 176, 176, 176, 176, 176, 176, 176,
    176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
    176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
    176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 0,   173, 173,
    173, 173};

static yyconst flex_int16_t yy_nxt[929] = {
    0,   4,   5,   6,   7,   8,   4,   9,   10,  4,   11,  12,  13,  14,  15,
    16,  16,  16,  16,  17,  16,  16,  18,  19,  16,  16,  16,  4,   20,  4,
    21,  16,  22,  23,  24,  16,  16,  16,  25,  16,  16,  26,  16,  16,  27,
    28,  29,  30,  31,  16,  16,  36,  37,  35,  40,  41,  35,  173, 35,  121,
    43,  121, 35,  173, 96,  101, 96,  38,  97,  44,  38,  100, 44,  38,  45,
    35,  173, 43,  44,  38,  35,  173, 35,  173, 35,  173, 100, 46,  173, 48,
    47,  44,  38,  35,  173, 97,  44,  38,  44,  38,  44,

    38,  35,  173, 38,  97,  35,  173, 73,  44,  38,  50,  35,  173, 51,  35,
    35,  173, 44,  38,  52,  53,  44,  38,  74,  101, 54,  79,  44,  38,  55,
    56,  44,  38,  35,  173, 35,  173, 35,  173, 39,  57,  49,  58,  39,  67,
    59,  35,  173, 73,  44,  38,  44,  38,  44,  38,  68,  173, 95,  34,  60,
    69,  67,  44,  38,  74,  61,  62,  49,  40,  37,  39,  63,  38,  64,  66,
    34,  173, 69,  35,  40,  41,  35,  173, 32,  38,  43,  70,  173, 71,  173,
    72,  66,  35,  173, 44,  38,  173, 44,  38,  35,

    173, 173, 43,  173, 44,  38,  76,  173, 44,  38,  35,  173, 75,  35,  173,
    44,  38,  35,  173, 78,  77,  35,  173, 35,  173, 173, 44,  38,  173, 44,
    38,  35,  173, 44,  38,  173, 173, 44,  38,  44,  38,  35,  173, 35,  173,
    173, 173, 44,  38,  173, 82,  81,  173, 80,  35,  173, 173, 44,  38,  44,
    38,  83,  35,  173, 173, 84,  86,  35,  173, 173, 44,  38,  35,  173, 173,
    95,  85,  87,  44,  38,  35,  173, 173, 44,  38,  35,  173, 173, 44,  38,
    38,  88,  173, 173, 35,  173, 44,  38,  35,  173,

    90,  44,  38,  35,  173, 91,  173, 68,  173, 89,  44,  38,  98,  173, 44,
    38,  173, 173, 173, 44,  38,  92,  173, 173, 70,  93,  71,  173, 95,  98,
    99,  173, 99,  173, 100, 35,  173, 72,  94,  35,  173, 35,  173, 38,  102,
    35,  173, 35,  173, 35,  173, 44,  38,  35,  173, 44,  38,  44,  38,  103,
    173, 44,  38,  44,  38,  44,  38,  35,  173, 44,  38,  173, 173, 35,  173,
    104, 35,  173, 173, 173, 173, 35,  173, 44,  38,  173, 35,  173, 105, 44,
    38,  173, 44,  38,  173, 106, 108, 44,  38,  35,

    173, 173, 44,  38,  35,  173, 173, 107, 173, 109, 110, 35,  173, 111, 173,
    44,  38,  173, 35,  173, 44,  38,  173, 112, 35,  173, 173, 44,  38,  173,
    173, 35,  173, 113, 44,  38,  35,  173, 35,  173, 44,  38,  173, 173, 173,
    173, 114, 44,  38,  173, 173, 115, 44,  38,  44,  38,  173, 120, 116, 120,
    173, 121, 173, 117, 119, 118, 35,  173, 35,  173, 35,  173, 173, 122, 35,
    173, 35,  173, 35,  173, 35,  173, 44,  38,  44,  38,  44,  38,  35,  173,
    44,  38,  44,  38,  44,  38,  44,  38,  123, 125,

    35,  173, 126, 173, 44,  38,  35,  173, 124, 173, 173, 173, 173, 35,  173,
    127, 44,  38,  35,  173, 128, 173, 44,  38,  35,  173, 129, 173, 130, 44,
    38,  35,  173, 173, 44,  38,  35,  173, 173, 173, 44,  38,  35,  173, 35,
    173, 131, 44,  38,  35,  173, 173, 44,  38,  173, 133, 35,  173, 44,  38,
    44,  38,  173, 132, 173, 44,  38,  35,  173, 136, 173, 134, 44,  38,  35,
    173, 35,  173, 135, 137, 35,  173, 173, 44,  38,  173, 138, 35,  173, 173,
    44,  38,  44,  38,  173, 173, 44,  38,  35,  173,

    35,  173, 173, 44,  38,  35,  173, 35,  173, 139, 173, 140, 173, 173, 44,
    38,  44,  38,  35,  173, 173, 44,  38,  44,  38,  173, 173, 35,  173, 142,
    173, 141, 173, 173, 44,  38,  35,  173, 35,  173, 35,  173, 143, 44,  38,
    173, 173, 35,  173, 144, 145, 173, 44,  38,  44,  38,  44,  38,  35,  173,
    35,  173, 146, 44,  38,  35,  173, 173, 35,  173, 35,  173, 35,  173, 44,
    38,  44,  38,  35,  173, 173, 44,  38,  147, 44,  38,  44,  38,  44,  38,
    35,  173, 149, 148, 44,  38,  35,  173, 35,  173,

    35,  173, 151, 173, 150, 173, 44,  38,  173, 152, 35,  173, 44,  38,  44,
    38,  44,  38,  35,  173, 154, 35,  173, 173, 173, 173, 44,  38,  35,  173,
    35,  173, 173, 153, 44,  38,  173, 44,  38,  173, 155, 35,  173, 173, 44,
    38,  44,  38,  173, 157, 35,  173, 35,  173, 35,  173, 173, 44,  38,  173,
    173, 156, 35,  173, 173, 173, 44,  38,  44,  38,  44,  38,  158, 35,  173,
    173, 160, 173, 44,  38,  159, 35,  173, 173, 161, 35,  173, 35,  173, 44,
    38,  35,  173, 173, 173, 173, 173, 44,  38,  173,

    162, 44,  38,  44,  38,  35,  173, 44,  38,  163, 165, 166, 164, 35,  173,
    35,  173, 35,  173, 35,  173, 44,  38,  35,  173, 35,  173, 173, 167, 44,
    38,  44,  38,  44,  38,  44,  38,  35,  173, 44,  38,  44,  38,  35,  173,
    173, 170, 173, 173, 173, 168, 169, 173, 44,  38,  171, 173, 173, 173, 44,
    38,  173, 173, 173, 173, 173, 172, 33,  33,  33,  33,  42,  42,  65,  173,
    65,  65,  3,   173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
    173, 173, 173, 173, 173, 173, 173, 173, 173, 173,

    173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
    173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173};

static yyconst flex_int16_t yy_chk[929] = {
    0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   12,  12,  14,  14,  14,  16,  16,  175, 121,
    14,  120, 17,  17,  67,  101, 67,  12,  67,  14,  14,  100, 16,  16,  17,
    18,  18,  14,  17,  17,  19,  19,  21,  21,  22,  22,  99,  18,  35,  19,
    18,  18,  18,  23,  23,  97,  19,  19,  21,  21,  22,

    22,  25,  25,  35,  96,  24,  24,  44,  23,  23,  21,  26,  26,  22,  79,
    27,  27,  25,  25,  22,  23,  24,  24,  44,  70,  23,  49,  26,  26,  24,
    25,  27,  27,  28,  28,  29,  29,  30,  30,  39,  26,  38,  26,  36,  39,
    27,  31,  31,  73,  28,  28,  29,  29,  30,  30,  40,  71,  71,  33,  28,
    40,  39,  31,  31,  73,  29,  30,  20,  37,  37,  13,  30,  71,  31,  37,
    8,   3,   40,  41,  41,  41,  42,  42,  2,   37,  41,  43,  0,   43,  43,
    43,  37,  46,  46,  41,  41,  0,   42,  42,  45,

    45,  0,   41,  0,   43,  43,  46,  0,   46,  46,  47,  47,  45,  48,  48,
    45,  45,  50,  50,  48,  47,  51,  51,  52,  52,  0,   47,  47,  0,   48,
    48,  53,  53,  50,  50,  0,   0,   51,  51,  52,  52,  54,  54,  56,  56,
    0,   0,   53,  53,  0,   52,  51,  0,   50,  55,  55,  0,   54,  54,  56,
    56,  53,  57,  57,  0,   54,  56,  58,  58,  0,   55,  55,  59,  59,  95,
    95,  55,  56,  57,  57,  60,  60,  0,   58,  58,  61,  61,  0,   59,  59,
    95,  58,  0,   0,   62,  62,  60,  60,  63,  63,

    60,  61,  61,  64,  64,  61,  0,   68,  0,   59,  62,  62,  68,  0,   63,
    63,  0,   0,   0,   64,  64,  62,  0,   0,   66,  63,  66,  66,  66,  68,
    69,  0,   69,  0,   69,  72,  72,  72,  64,  75,  75,  76,  76,  66,  75,
    78,  78,  80,  80,  77,  77,  72,  72,  81,  81,  75,  75,  76,  76,  77,
    0,   78,  78,  80,  80,  77,  77,  82,  82,  81,  81,  0,   0,   83,  83,
    80,  84,  84,  0,   0,   0,   85,  85,  82,  82,  0,   86,  86,  81,  83,
    83,  0,   84,  84,  0,   82,  84,  85,  85,  87,

    87,  0,   86,  86,  88,  88,  0,   83,  0,   85,  86,  89,  89,  86,  0,
    87,  87,  0,   90,  90,  88,  88,  0,   87,  91,  91,  0,   89,  89,  0,
    0,   92,  92,  88,  90,  90,  93,  93,  94,  94,  91,  91,  0,   0,   0,
    0,   89,  92,  92,  0,   0,   90,  93,  93,  94,  94,  0,   98,  91,  98,
    0,   98,  0,   92,  94,  93,  102, 102, 103, 103, 104, 104, 0,   102, 105,
    105, 106, 106, 107, 107, 108, 108, 102, 102, 103, 103, 104, 104, 110, 110,
    105, 105, 106, 106, 107, 107, 108, 108, 104, 106,

    109, 109, 107, 0,   110, 110, 111, 111, 105, 0,   0,   0,   0,   112, 112,
    108, 109, 109, 113, 113, 109, 0,   111, 111, 114, 114, 110, 0,   111, 112,
    112, 115, 115, 0,   113, 113, 116, 116, 0,   0,   114, 114, 117, 117, 118,
    118, 112, 115, 115, 119, 119, 0,   116, 116, 0,   115, 122, 122, 117, 117,
    118, 118, 0,   114, 0,   119, 119, 123, 123, 118, 0,   116, 122, 122, 124,
    124, 125, 125, 117, 119, 126, 126, 0,   123, 123, 0,   123, 127, 127, 0,
    124, 124, 125, 125, 0,   0,   126, 126, 128, 128,

    129, 129, 0,   127, 127, 130, 130, 131, 131, 124, 0,   127, 0,   0,   128,
    128, 129, 129, 132, 132, 0,   130, 130, 131, 131, 0,   0,   133, 133, 130,
    0,   128, 0,   0,   132, 132, 134, 134, 135, 135, 136, 136, 131, 133, 133,
    0,   0,   137, 137, 132, 133, 0,   134, 134, 135, 135, 136, 136, 138, 138,
    139, 139, 135, 137, 137, 140, 140, 0,   141, 141, 142, 142, 143, 143, 138,
    138, 139, 139, 144, 144, 0,   140, 140, 137, 141, 141, 142, 142, 143, 143,
    145, 145, 141, 139, 144, 144, 146, 146, 147, 147,

    148, 148, 144, 0,   142, 0,   145, 145, 0,   145, 149, 149, 146, 146, 147,
    147, 148, 148, 150, 150, 148, 151, 151, 0,   0,   0,   149, 149, 152, 152,
    153, 153, 0,   147, 150, 150, 0,   151, 151, 0,   151, 154, 154, 0,   152,
    152, 153, 153, 0,   153, 155, 155, 156, 156, 157, 157, 0,   154, 154, 0,
    0,   152, 158, 158, 0,   0,   155, 155, 156, 156, 157, 157, 154, 159, 159,
    0,   156, 0,   158, 158, 155, 160, 160, 0,   157, 161, 161, 162, 162, 159,
    159, 163, 163, 0,   0,   0,   0,   160, 160, 0,

    159, 161, 161, 162, 162, 164, 164, 163, 163, 160, 162, 163, 161, 165, 165,
    166, 166, 167, 167, 168, 168, 164, 164, 169, 169, 170, 170, 0,   164, 165,
    165, 166, 166, 167, 167, 168, 168, 171, 171, 169, 169, 170, 170, 172, 172,
    0,   168, 0,   0,   0,   166, 167, 0,   171, 171, 170, 0,   0,   0,   172,
    172, 0,   0,   0,   0,   0,   171, 174, 174, 174, 174, 176, 176, 177, 0,
    177, 177, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
    173, 173, 173, 173, 173, 173, 173, 173, 173, 173,

    173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
    173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173};

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int boot_yy_flex_debug;
int boot_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *boot_yytext;
#line 1 "bootscanner.l"
#line 2 "bootscanner.l"
/*-------------------------------------------------------------------------
 *
 * bootscanner.l
 *	  a lexical scanner for the bootstrap parser
 *
 * Portions Copyright (c) 1996-2015, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/bootstrap/bootscanner.l
 *
 *-------------------------------------------------------------------------
 */
#include "postgres.h"

#include "access/attnum.h"
#include "access/htup.h"
#include "access/itup.h"
#include "access/tupdesc.h"
#include "bootstrap/bootstrap.h"
#include "catalog/pg_am.h"
#include "catalog/pg_attribute.h"
#include "catalog/pg_class.h"
#include "nodes/nodes.h"
#include "nodes/parsenodes.h"
#include "nodes/pg_list.h"
#include "nodes/primnodes.h"
#include "parser/scansup.h"
#include "rewrite/prs2lock.h"
#include "storage/block.h"
#include "storage/fd.h"
#include "storage/itemptr.h"
#include "storage/off.h"
#include "utils/rel.h"

/* Not needed now that this file is compiled as part of bootparse. */
/* #include "bootparse.h" */

/* Avoid exit() on fatal scanner errors (a bit ugly -- see yy_fatal_error) */
#undef fprintf
#define fprintf(file, fmt, msg) fprintf_to_ereport(fmt, msg)

static void fprintf_to_ereport(const char *fmt, const char *msg) {
  ereport(ERROR, (errmsg_internal("%s", msg)));
}

static int yyline = 1; /* line number for error reporting */

#define YY_NO_INPUT 1
#line 796 "bootscanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals(void);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int boot_yylex_destroy(void);

int boot_yyget_debug(void);

void boot_yyset_debug(int debug_flag);

YY_EXTRA_TYPE boot_yyget_extra(void);

void boot_yyset_extra(YY_EXTRA_TYPE user_defined);

FILE *boot_yyget_in(void);

void boot_yyset_in(FILE *in_str);

FILE *boot_yyget_out(void);

void boot_yyset_out(FILE *out_str);

int boot_yyget_leng(void);

char *boot_yyget_text(void);

int boot_yyget_lineno(void);

void boot_yyset_lineno(int line_number);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int boot_yywrap(void);
#else
extern int boot_yywrap(void);
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput(void);
#else
static int input(void);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO                                               \
  do {                                                     \
    if (fwrite(boot_yytext, boot_yyleng, 1, boot_yyout)) { \
    }                                                      \
  } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                    \
  if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) {                       \
    int c = '*';                                                           \
    size_t n;                                                              \
    for (n = 0; n < max_size && (c = getc(boot_yyin)) != EOF && c != '\n'; \
         ++n)                                                              \
      buf[n] = (char)c;                                                    \
    if (c == '\n') buf[n++] = (char)c;                                     \
    if (c == EOF && ferror(boot_yyin))                                     \
      YY_FATAL_ERROR("input in flex scanner failed");                      \
    result = n;                                                            \
  } else {                                                                 \
    errno = 0;                                                             \
    while ((result = fread(buf, 1, max_size, boot_yyin)) == 0 &&           \
           ferror(boot_yyin)) {                                            \
      if (errno != EINTR) {                                                \
        YY_FATAL_ERROR("input in flex scanner failed");                    \
        break;                                                             \
      }                                                                    \
      errno = 0;                                                           \
      clearerr(boot_yyin);                                                 \
    }                                                                      \
  }

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int boot_yylex(void);

#define YY_DECL int boot_yylex(void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after boot_yytext and
 * boot_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP                           \
  if (boot_yyleng > 0)                          \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol =       \
        (boot_yytext[boot_yyleng - 1] == '\n'); \
  YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 74 "bootscanner.l"

#line 987 "bootscanner.cpp"

  if (!(yy_init)) {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!(yy_start)) (yy_start) = 1; /* first start state */

    if (!boot_yyin) boot_yyin = stdin;

    if (!boot_yyout) boot_yyout = stdout;

    if (!YY_CURRENT_BUFFER) {
      boot_yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE = boot_yy_create_buffer(boot_yyin, YY_BUF_SIZE);
    }

    boot_yy_load_buffer_state();
  }

  while (1) /* loops until end-of-file is reached */
  {
    yy_cp = (yy_c_buf_p);

    /* Support of boot_yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();
  yy_match:
    do {
      register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
      if (yy_accept[yy_current_state]) {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
      }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = (int)yy_def[yy_current_state];
        if (yy_current_state >= 174) yy_c = yy_meta[(unsigned int)yy_c];
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
      ++yy_cp;
    } while (yy_current_state != 173);
    yy_cp = (yy_last_accepting_cpos);
    yy_current_state = (yy_last_accepting_state);

  yy_find_action:
    yy_act = yy_accept[yy_current_state];

    YY_DO_BEFORE_ACTION;

  do_action: /* This label is used only to access EOF actions. */

    switch (yy_act) { /* beginning of action switch */
      case 0:         /* must back up */
        /* undo the effects of YY_DO_BEFORE_ACTION */
        *yy_cp = (yy_hold_char);
        yy_cp = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        goto yy_find_action;

      case 1:
        YY_RULE_SETUP
#line 76 "bootscanner.l"
        {
          return (OPEN);
        }
        YY_BREAK
      case 2:
        YY_RULE_SETUP
#line 78 "bootscanner.l"
        {
          return (XCLOSE);
        }
        YY_BREAK
      case 3:
        YY_RULE_SETUP
#line 80 "bootscanner.l"
        {
          return (XCREATE);
        }
        YY_BREAK
      case 4:
        YY_RULE_SETUP
#line 82 "bootscanner.l"
        {
          return (OBJ_ID);
        }
        YY_BREAK
      case 5:
        YY_RULE_SETUP
#line 83 "bootscanner.l"
        {
          return (XBOOTSTRAP);
        }
        YY_BREAK
      case 6:
        YY_RULE_SETUP
#line 84 "bootscanner.l"
        {
          return (XSHARED_RELATION);
        }
        YY_BREAK
      case 7:
        YY_RULE_SETUP
#line 85 "bootscanner.l"
        {
          return (XWITHOUT_OIDS);
        }
        YY_BREAK
      case 8:
        YY_RULE_SETUP
#line 86 "bootscanner.l"
        {
          return (XROWTYPE_OID);
        }
        YY_BREAK
      case 9:
        YY_RULE_SETUP
#line 87 "bootscanner.l"
        {
          return (NULLVAL);
        }
        YY_BREAK
      case 10:
        YY_RULE_SETUP
#line 89 "bootscanner.l"
        {
          return (INSERT_TUPLE);
        }
        YY_BREAK
      case 11:
        YY_RULE_SETUP
#line 91 "bootscanner.l"
        {
          return (COMMA);
        }
        YY_BREAK
      case 12:
        YY_RULE_SETUP
#line 92 "bootscanner.l"
        {
          return (EQUALS);
        }
        YY_BREAK
      case 13:
        YY_RULE_SETUP
#line 93 "bootscanner.l"
        {
          return (LPAREN);
        }
        YY_BREAK
      case 14:
        YY_RULE_SETUP
#line 94 "bootscanner.l"
        {
          return (RPAREN);
        }
        YY_BREAK
      case 15:
        /* rule 15 can match eol */
        YY_RULE_SETUP
#line 96 "bootscanner.l"
        {
          yyline++;
        }
        YY_BREAK
      case 16:
        YY_RULE_SETUP
#line 97 "bootscanner.l"
            ;
        YY_BREAK
      case 17:
        YY_RULE_SETUP
#line 98 "bootscanner.l"
            ;
        YY_BREAK
      case 18:
        YY_RULE_SETUP
#line 100 "bootscanner.l"
            ; /* drop everything after "#" for comments */
        YY_BREAK
      case 19:
        YY_RULE_SETUP
#line 103 "bootscanner.l"
        {
          return (XDECLARE);
        }
        YY_BREAK
      case 20:
        YY_RULE_SETUP
#line 104 "bootscanner.l"
        {
          return (XBUILD);
        }
        YY_BREAK
      case 21:
        YY_RULE_SETUP
#line 105 "bootscanner.l"
        {
          return (INDICES);
        }
        YY_BREAK
      case 22:
        YY_RULE_SETUP
#line 106 "bootscanner.l"
        {
          return (UNIQUE);
        }
        YY_BREAK
      case 23:
        YY_RULE_SETUP
#line 107 "bootscanner.l"
        {
          return (INDEX);
        }
        YY_BREAK
      case 24:
        YY_RULE_SETUP
#line 108 "bootscanner.l"
        {
          return (ON);
        }
        YY_BREAK
      case 25:
        YY_RULE_SETUP
#line 109 "bootscanner.l"
        {
          return (USING);
        }
        YY_BREAK
      case 26:
        YY_RULE_SETUP
#line 110 "bootscanner.l"
        {
          return (XTOAST);
        }
        YY_BREAK
      case 27:
        YY_RULE_SETUP
#line 111 "bootscanner.l"
        {
          return (XFORCE);
        }
        YY_BREAK
      case 28:
        YY_RULE_SETUP
#line 112 "bootscanner.l"
        {
          return (XNOT);
        }
        YY_BREAK
      case 29:
        YY_RULE_SETUP
#line 113 "bootscanner.l"
        {
          return (XNULL);
        }
        YY_BREAK
      case 30:
        YY_RULE_SETUP
#line 115 "bootscanner.l"
        {
          yylval.str = MapArrayTypeName(boot_yytext);
          return (ID);
        }
        YY_BREAK
      case 31:
        YY_RULE_SETUP
#line 119 "bootscanner.l"
        {
          yylval.str = scanstr(boot_yytext);
          return (ID);
        }
        YY_BREAK
      case 32:
        /* rule 32 can match eol */
        YY_RULE_SETUP
#line 123 "bootscanner.l"
        {
          boot_yytext[strlen(boot_yytext) - 1] = '\0'; /* strip off quotes */
          yylval.str = scanstr(boot_yytext + 1);
          boot_yytext[strlen(boot_yytext)] = '"'; /* restore quotes */
          return (ID);
        }
        YY_BREAK
      case 33:
#line 131 "bootscanner.l"
      case 34:
#line 132 "bootscanner.l"
      case 35:
        YY_RULE_SETUP
#line 132 "bootscanner.l"
        {
          yylval.str = pstrdup(boot_yytext);
          return (CONST_P);
        }
        YY_BREAK
      case 36:
        YY_RULE_SETUP
#line 137 "bootscanner.l"
        {
          elog(ERROR, "syntax error at line %d: unexpected character \"%s\"",
               yyline, boot_yytext);
        }
        YY_BREAK
      case 37:
        YY_RULE_SETUP
#line 143 "bootscanner.l"
        YY_FATAL_ERROR("flex scanner jammed");
        YY_BREAK
#line 1264 "bootscanner.cpp"
      case YY_STATE_EOF(INITIAL):
        yyterminate();

      case YY_END_OF_BUFFER: {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = (yy_hold_char);
        YY_RESTORE_YY_MORE_OFFSET

        if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
          /* We're scanning a new___ file or input source.  It's
           * possible that this happened because the user
           * just pointed boot_yyin at a new___ source and called
           * boot_yylex().  If so, then we have to assure
           * consistency between YY_CURRENT_BUFFER and our
           * globals.  Here is the right place to do so, because
           * this is the first action (other than possibly a
           * back-up) that will match for the new___ input source.
           */
          (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
          YY_CURRENT_BUFFER_LVALUE->yy_input_file = boot_yyin;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ((yy_c_buf_p) <=
            &YY_CURRENT_BUFFER_LVALUE
                 ->yy_ch_buf[(yy_n_chars)]) { /* This was really a NUL. */
          yy_state_type yy_next_state;

          (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

          yy_current_state = yy_get_previous_state();

          /* Okay, we're now positioned to make the NUL
           * transition.  We couldn't have
           * yy_get_previous_state() go ahead and do it
           * for us because it doesn't know how to deal
           * with the possibility of jamming (and we don't
           * want to build jamming into it because then it
           * will run more slowly).
           */

          yy_next_state = yy_try_NUL_trans(yy_current_state);

          yy_bp = (yytext_ptr) + YY_MORE_ADJ;

          if (yy_next_state) {
            /* Consume the NUL. */
            yy_cp = ++(yy_c_buf_p);
            yy_current_state = yy_next_state;
            goto yy_match;
          }

          else {
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            goto yy_find_action;
          }
        }

        else
          switch (yy_get_next_buffer()) {
            case EOB_ACT_END_OF_FILE: {
              (yy_did_buffer_switch_on_eof) = 0;

              if (boot_yywrap()) {
                /* Note: because we've taken care in
                 * yy_get_next_buffer() to have set up
                 * boot_yytext, we can now set up
                 * yy_c_buf_p so that if some total
                 * hoser (like flex itself) wants to
                 * call the scanner after we return the
                 * YY_NULL, it'll still work - another
                 * YY_NULL will get returned.
                 */
                (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                yy_act = YY_STATE_EOF(YY_START);
                goto do_action;
              }

              else {
                if (!(yy_did_buffer_switch_on_eof)) YY_NEW_FILE;
              }
              break;
            }

            case EOB_ACT_CONTINUE_SCAN:
              (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

              yy_current_state = yy_get_previous_state();

              yy_cp = (yy_c_buf_p);
              yy_bp = (yytext_ptr) + YY_MORE_ADJ;
              goto yy_match;

            case EOB_ACT_LAST_MATCH:
              (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

              yy_current_state = yy_get_previous_state();

              yy_cp = (yy_c_buf_p);
              yy_bp = (yytext_ptr) + YY_MORE_ADJ;
              goto yy_find_action;
          }
        break;
      }

      default:
        YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
    } /* end of action switch */
  }   /* end of scanning one token */
} /* end of boot_yylex */

/* yy_get_next_buffer - try to read in a new___ buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(void) {
  register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  register char *source = (yytext_ptr);
  register int number_to_move, i;
  int ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer ==
      0) { /* Don't try to fill the buffer, so this is an EOF. */
    if ((yy_c_buf_p) - (yytext_ptr)-YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

  for (i = 0; i < number_to_move; ++i) *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else {
    int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

      int yy_c_buf_p_offset = (int)((yy_c_buf_p)-b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        int new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
            /* Include room in for 2 EOB chars. */
            boot_yyrealloc((void *)b->yy_ch_buf, b->yy_buf_size + 2);
      } else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if (!b->yy_ch_buf)
        YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE) num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
             (yy_n_chars), (size_t)num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  if ((yy_n_chars) == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      boot_yyrestart(boot_yyin);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yy_size_t)((yy_n_chars) + number_to_move) >
      YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *)boot_yyrealloc(
        (void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
  }

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(void) {
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = (yy_start);
  yy_current_state += YY_AT_BOL();

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp) {
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos) = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 174) yy_c = yy_meta[(unsigned int)yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state) {
  register int yy_is_jam;
  register char *yy_cp = (yy_c_buf_p);

  register YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos) = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 174) yy_c = yy_meta[(unsigned int)yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  yy_is_jam = (yy_current_state == 173);

  return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(void)
#else
static int input(void)
#endif

{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
      /* This was really a NUL. */
      *(yy_c_buf_p) = '\0';

    else { /* need more input */
      int offset = (yy_c_buf_p) - (yytext_ptr);
      ++(yy_c_buf_p);

      switch (yy_get_next_buffer()) {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          boot_yyrestart(boot_yyin);

        /*FALLTHROUGH*/

        case EOB_ACT_END_OF_FILE: {
          if (boot_yywrap()) return EOF;

          if (!(yy_did_buffer_switch_on_eof)) YY_NEW_FILE;
#ifdef __cplusplus
          return yyinput();
#else
          return input();
#endif
        }

        case EOB_ACT_CONTINUE_SCAN:
          (yy_c_buf_p) = (yytext_ptr) + offset;
          break;
      }
    }
  }

  c = *(unsigned char *)(yy_c_buf_p); /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0';               /* preserve boot_yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

  return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void boot_yyrestart(FILE *input_file) {
  if (!YY_CURRENT_BUFFER) {
    boot_yyensure_buffer_stack();
    YY_CURRENT_BUFFER_LVALUE = boot_yy_create_buffer(boot_yyin, YY_BUF_SIZE);
  }

  boot_yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  boot_yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new___ input buffer.
 *
 */
void boot_yy_switch_to_buffer(YY_BUFFER_STATE new_buffer) {
  /* TODO. We should be able to replace this entire function body
   * with
   *		boot_yypop_buffer_state();
   *		boot_yypush_buffer_state(new_buffer);
   */
  boot_yyensure_buffer_stack();
  if (YY_CURRENT_BUFFER == new_buffer) return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  boot_yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (boot_yywrap()) processing, but the only time this flag
   * is looked at is after boot_yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

static void boot_yy_load_buffer_state(void) {
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  boot_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c
 *YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE boot_yy_create_buffer(FILE *file, int size) {
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)boot_yyalloc(sizeof(struct yy_buffer_state));
  if (!b) YY_FATAL_ERROR("out of dynamic memory in boot_yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *)boot_yyalloc(b->yy_buf_size + 2);
  if (!b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in boot_yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  boot_yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with boot_yy_create_buffer()
 *
 */
void boot_yy_delete_buffer(YY_BUFFER_STATE b) {
  if (!b) return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer) boot_yyfree((void *)b->yy_ch_buf);

  boot_yyfree((void *)b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a boot_yyrestart() or at EOF.
 */
static void boot_yy_init_buffer(YY_BUFFER_STATE b, FILE *file)

{
  int oerrno = errno;

  boot_yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then boot_yy_init_buffer was _probably_
   * called from boot_yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  b->yy_is_interactive = 0;

  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void boot_yy_flush_buffer(YY_BUFFER_STATE b) {
  if (!b) return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER) boot_yy_load_buffer_state();
}

/** Pushes the new___ state onto the stack. The new___ state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new___ state.
 *
 */
void boot_yypush_buffer_state(YY_BUFFER_STATE new_buffer) {
  if (new_buffer == NULL) return;

  boot_yyensure_buffer_stack();

  /* This block is copied from boot_yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER) (yy_buffer_stack_top)++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from boot_yy_switch_to_buffer. */
  boot_yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new___ top.
 *
 */
void boot_yypop_buffer_state(void) {
  if (!YY_CURRENT_BUFFER) return;

  boot_yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if ((yy_buffer_stack_top) > 0) --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER) {
    boot_yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void boot_yyensure_buffer_stack(void) {
  int num_to_alloc;

  if (!(yy_buffer_stack)) {
    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) = (struct yy_buffer_state **)boot_yyalloc(
        num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in boot_yyensure_buffer_stack()");

    memset((yy_buffer_stack), 0,
           num_to_alloc * sizeof(struct yy_buffer_state *));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
  }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {
    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state **)boot_yyrealloc(
        (yy_buffer_stack), num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in boot_yyensure_buffer_stack()");

    /* zero only the new___ slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0,
           grow_size * sizeof(struct yy_buffer_state *));
    (yy_buffer_stack_max) = num_to_alloc;
  }
}

/** Setup the input buffer state to scan directly from a user-specified
 *character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE boot_yy_scan_buffer(char *base, yy_size_t size) {
  YY_BUFFER_STATE b;

  if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR ||
      base[size - 1] != YY_END_OF_BUFFER_CHAR)
    /* They forgot to leave room for the EOB's. */
    return 0;

  b = (YY_BUFFER_STATE)boot_yyalloc(sizeof(struct yy_buffer_state));
  if (!b) YY_FATAL_ERROR("out of dynamic memory in boot_yy_scan_buffer()");

  b->yy_buf_size = size - 2; /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = 0;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  boot_yy_switch_to_buffer(b);

  return b;
}

/** Setup the input buffer state to scan a string. The next call to boot_yylex()
 *will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       boot_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE boot_yy_scan_string(yyconst char *yystr) {
  return boot_yy_scan_bytes(yystr, strlen(yystr));
}

/** Setup the input buffer state to scan the given bytes. The next call to
 *boot_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE boot_yy_scan_bytes(yyconst char *yybytes, int _yybytes_len) {
  YY_BUFFER_STATE b;
  char *buf;
  yy_size_t n;
  int i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = _yybytes_len + 2;
  buf = (char *)boot_yyalloc(n);
  if (!buf) YY_FATAL_ERROR("out of dynamic memory in boot_yy_scan_bytes()");

  for (i = 0; i < _yybytes_len; ++i) buf[i] = yybytes[i];

  buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

  b = boot_yy_scan_buffer(buf, n);
  if (!b) YY_FATAL_ERROR("bad buffer in boot_yy_scan_bytes()");

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error(yyconst char *msg) {
  (void)fprintf(stderr, "%s\n", msg);
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                  \
  do {                                             \
    /* Undo effects of setting up boot_yytext. */  \
    int yyless_macro_arg = (n);                    \
    YY_LESS_LINENO(yyless_macro_arg);              \
    boot_yytext[boot_yyleng] = (yy_hold_char);     \
    (yy_c_buf_p) = boot_yytext + yyless_macro_arg; \
    (yy_hold_char) = *(yy_c_buf_p);                \
    *(yy_c_buf_p) = '\0';                          \
    boot_yyleng = yyless_macro_arg;                \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int boot_yyget_lineno(void) { return boot_yylineno; }

/** Get the input stream.
 *
 */
FILE *boot_yyget_in(void) { return boot_yyin; }

/** Get the output stream.
 *
 */
FILE *boot_yyget_out(void) { return boot_yyout; }

/** Get the length of the current token.
 *
 */
int boot_yyget_leng(void) { return boot_yyleng; }

/** Get the current token.
 *
 */

char *boot_yyget_text(void) { return boot_yytext; }

/** Set the current line number.
 * @param line_number
 *
 */
void boot_yyset_lineno(int line_number) { boot_yylineno = line_number; }

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see boot_yy_switch_to_buffer
 */
void boot_yyset_in(FILE *in_str) { boot_yyin = in_str; }

void boot_yyset_out(FILE *out_str) { boot_yyout = out_str; }

int boot_yyget_debug(void) { return boot_yy_flex_debug; }

void boot_yyset_debug(int bdebug) { boot_yy_flex_debug = bdebug; }

static int yy_init_globals(void) {
  /* Initialization is the same as for the non-reentrant scanner.
*This function is called from boot_yylex_destroy(), so don't allocate here.
*/

  (yy_buffer_stack) = 0;
  (yy_buffer_stack_top) = 0;
  (yy_buffer_stack_max) = 0;
  (yy_c_buf_p) = (char *)0;
  (yy_init) = 0;
  (yy_start) = 0;

/* Defined in main.cpp */
#ifdef YY_STDINIT
  boot_yyin = stdin;
  boot_yyout = stdout;
#else
  boot_yyin = (FILE *)0;
  boot_yyout = (FILE *)0;
#endif

  /* For future reference: Set errno on error, since we are called by
   * boot_yylex_init()
   */
  return 0;
}

/* boot_yylex_destroy is for both reentrant and non-reentrant scanners. */
int boot_yylex_destroy(void) {
  /* Pop the buffer stack, destroying each element. */
  while (YY_CURRENT_BUFFER) {
    boot_yy_delete_buffer(YY_CURRENT_BUFFER);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    boot_yypop_buffer_state();
  }

  /* Destroy the stack itself. */
  boot_yyfree((yy_buffer_stack));
  (yy_buffer_stack) = NULL;

  /* Reset the globals. This is important in a non-reentrant scanner so the next
   * time
   * boot_yylex() is called, initialization will occur. */
  yy_init_globals();

  return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n) {
  register int i;
  for (i = 0; i < n; ++i) s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *s) {
  register int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *boot_yyalloc(yy_size_t size) { return (void *)malloc(size); }

void *boot_yyrealloc(void *ptr, yy_size_t size) {
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *)realloc((char *)ptr, size);
}

void boot_yyfree(void *ptr) {
  free((char *)ptr); /* see boot_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 143 "bootscanner.l"

void yyerror(const char *message) {
  elog(ERROR, "%s at line %d", message, yyline);
}
