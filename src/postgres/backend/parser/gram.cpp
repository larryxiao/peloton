/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Substitute the variable and function names.  */
#define yyparse base_yyparse
#define yylex base_yylex
#define yyerror base_yyerror
#define yydebug base_yydebug
#define yynerrs base_yynerrs

/* Copy the first part of user declarations.  */
#line 1 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:339  */

/*#define YYDEBUG 1 */
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2015, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET SQL_inheritance TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.  The handling of SQL_inheritance is
 *	  a good example.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "postgres.h"

#include <ctype.h>
#include <limits.h>

#include "catalog/index.h"
#include "catalog/namespace.h"
#include "catalog/pg_trigger.h"
#include "commands/defrem.h"
#include "commands/trigger.h"
#include "nodes/makefuncs.h"
#include "nodes/nodeFuncs.h"
#include "parser/gramparse.h"
#include "parser/parser.h"
#include "parser/parse_expr.h"
#include "storage/lmgr.h"
#include "utils/date.h"
#include "utils/datetime.h"
#include "utils/numeric.h"
#include "utils/xml.h"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
  do {                                  \
    if ((N) > 0)                        \
      (Current) = (Rhs)[1];             \
    else                                \
      (Current) = (-1);                 \
  } while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE pfree

/* Private struct for the result of privilege_target production */
typedef struct PrivTarget {
  GrantTargetType targtype;
  GrantObjectType objtype;
  List *objs;
} PrivTarget;

/* Private struct for the result of import_qualification production */
typedef struct ImportQual {
  ImportForeignSchemaType type;
  List *table_names;
} ImportQual;

/* ConstraintAttributeSpec yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE 0x01
#define CAS_DEFERRABLE 0x02
#define CAS_INITIALLY_IMMEDIATE 0x04
#define CAS_INITIALLY_DEFERRED 0x08
#define CAS_NOT_VALID 0x10
#define CAS_NO_INHERIT 0x20

#define parser_yyerror(msg) scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos) scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
                         const char *msg);
static Node *makeColumnRef(char *colname, List *indirection, int location,
                           core_yyscan_t yyscanner);
static Node *makeTypeCast(Node *arg, TypeName *typename___, int location);
static Node *makeStringConst(char *str, int location);
static Node *makeStringConstCast(char *str, int location,
                                 TypeName *typename___);
static Node *makeIntConst(int val, int location);
static Node *makeFloatConst(char *str, int location);
static Node *makeBitStringConst(char *str, int location);
static Node *makeNullAConst(int location);
static Node *makeAConst(Value *v, int location);
static Node *makeBoolAConst(bool state, int location);
static Node *makeRoleSpec(RoleSpecType type, int location);
static void check_qualified_name(List *names, core_yyscan_t yyscanner);
static List *check_func_name(List *names, core_yyscan_t yyscanner);
static List *check_indirection(List *indirection, core_yyscan_t yyscanner);
static List *extractArgTypes(List *parameters);
static List *extractAggrArgTypes(List *aggrargs);
static List *makeOrderedSetArgs(List *directargs, List *orderedargs,
                                core_yyscan_t yyscanner);
static void insertSelectOptions(SelectStmt *stmt, List *sortClause,
                                List *lockingClause, Node *limitOffset,
                                Node *limitCount, WithClause *withClause,
                                core_yyscan_t yyscanner);
static Node *makeSetOp(SetOperation op, bool all, Node *larg, Node *rarg);
static Node *doNegate(Node *n, int location);
static void doNegateFloat(Value *v);
static Node *makeAndExpr(Node *lexpr, Node *rexpr, int location);
static Node *makeOrExpr(Node *lexpr, Node *rexpr, int location);
static Node *makeNotExpr(Node *expr, int location);
static Node *makeAArrayExpr(List *elements, int location);
static Node *makeXmlExpr(XmlExprOp op, char *name, List *named_args, List *args,
                         int location);
static List *mergeTableFuncParameters(List *func_args, List *columns);
static TypeName *TableFuncTypeName(List *columns);
static RangeVar *makeRangeVarFromAnyName(List *names, int position,
                                         core_yyscan_t yyscanner);
static void SplitColQualList(List *qualList, List **constraintList,
                             CollateClause **collClause,
                             core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
                           bool *deferrable, bool *initdeferred,
                           bool *not_valid, bool *no_inherit,
                           core_yyscan_t yyscanner);
static Node *makeRecursiveViewSelect(char *relname, List *aliases, Node *query);

#line 252 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:339  */

#ifndef YY_NULLPTR
#if defined __cplusplus && 201103L <= __cplusplus
#define YY_NULLPTR nullptr
#else
#define YY_NULLPTR 0
#endif
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
#undef YYERROR_VERBOSE
#define YYERROR_VERBOSE 1
#else
#define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "y.tab.h".  */
#ifndef YY_BASE_YY__SRC_POSTGRES_BACKEND_PARSER_GRAM_HPP_INCLUDED
#define YY_BASE_YY__SRC_POSTGRES_BACKEND_PARSER_GRAM_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
#define YYDEBUG 1
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
#define YYTOKENTYPE
enum yytokentype {
  IDENT = 258,
  FCONST = 259,
  SCONST = 260,
  BCONST = 261,
  XCONST = 262,
  Op = 263,
  ICONST = 264,
  PARAM = 265,
  TYPECAST = 266,
  DOT_DOT = 267,
  COLON_EQUALS = 268,
  EQUALS_GREATER = 269,
  LESS_EQUALS = 270,
  GREATER_EQUALS = 271,
  NOT_EQUALS = 272,
  ABORT_P = 273,
  ABSOLUTE_P = 274,
  ACCESS = 275,
  ACTION = 276,
  ADD_P = 277,
  ADMIN = 278,
  AFTER = 279,
  AGGREGATE = 280,
  ALL = 281,
  ALSO = 282,
  ALTER = 283,
  ALWAYS = 284,
  ANALYSE = 285,
  ANALYZE = 286,
  AND = 287,
  ANY = 288,
  ARRAY = 289,
  AS = 290,
  ASC = 291,
  ASSERTION = 292,
  ASSIGNMENT = 293,
  ASYMMETRIC = 294,
  AT = 295,
  ATTRIBUTE = 296,
  AUTHORIZATION = 297,
  BACKWARD = 298,
  BEFORE = 299,
  BEGIN_P = 300,
  BETWEEN = 301,
  BIGINT = 302,
  BINARY = 303,
  BIT = 304,
  BOOLEAN_P = 305,
  BOTH = 306,
  BY = 307,
  CACHE = 308,
  CALLED = 309,
  CASCADE = 310,
  CASCADED = 311,
  CASE = 312,
  CAST = 313,
  CATALOG_P = 314,
  CHAIN = 315,
  CHAR_P = 316,
  CHARACTER = 317,
  CHARACTERISTICS = 318,
  CHECK = 319,
  CHECKPOINT = 320,
  CLASS = 321,
  CLOSE = 322,
  CLUSTER = 323,
  COALESCE = 324,
  COLLATE = 325,
  COLLATION = 326,
  COLUMN = 327,
  COMMENT = 328,
  COMMENTS = 329,
  COMMIT = 330,
  COMMITTED = 331,
  CONCURRENTLY = 332,
  CONFIGURATION = 333,
  CONFLICT = 334,
  CONNECTION = 335,
  CONSTRAINT = 336,
  CONSTRAINTS = 337,
  CONTENT_P = 338,
  CONTINUE_P = 339,
  CONVERSION_P = 340,
  COPY = 341,
  COST = 342,
  CREATE = 343,
  CROSS = 344,
  CSV = 345,
  CUBE = 346,
  CURRENT_P = 347,
  CURRENT_CATALOG = 348,
  CURRENT_DATE = 349,
  CURRENT_ROLE = 350,
  CURRENT_SCHEMA = 351,
  CURRENT_TIME = 352,
  CURRENT_TIMESTAMP = 353,
  CURRENT_USER = 354,
  CURSOR = 355,
  CYCLE = 356,
  DATA_P = 357,
  DATABASE = 358,
  DAY_P = 359,
  DEALLOCATE = 360,
  DEC = 361,
  DECIMAL_P = 362,
  DECLARE = 363,
  DEFAULT = 364,
  DEFAULTS = 365,
  DEFERRABLE = 366,
  DEFERRED = 367,
  DEFINER = 368,
  DELETE_P = 369,
  DELIMITER = 370,
  DELIMITERS = 371,
  DESC = 372,
  DICTIONARY = 373,
  DISABLE_P = 374,
  DISCARD = 375,
  DISTINCT = 376,
  DO = 377,
  DOCUMENT_P = 378,
  DOMAIN_P = 379,
  DOUBLE_P = 380,
  DROP = 381,
  EACH = 382,
  ELSE = 383,
  ENABLE_P = 384,
  ENCODING = 385,
  ENCRYPTED = 386,
  END_P = 387,
  ENUM_P = 388,
  ESCAPE = 389,
  EVENT = 390,
  EXCEPT = 391,
  EXCLUDE = 392,
  EXCLUDING = 393,
  EXCLUSIVE = 394,
  EXECUTE = 395,
  EXISTS = 396,
  EXPLAIN = 397,
  EXTENSION = 398,
  EXTERNAL = 399,
  EXTRACT = 400,
  FALSE_P = 401,
  FAMILY = 402,
  FETCH = 403,
  FILTER = 404,
  FIRST_P = 405,
  FLOAT_P = 406,
  FOLLOWING = 407,
  FOR = 408,
  FORCE = 409,
  FOREIGN = 410,
  FORWARD = 411,
  FREEZE = 412,
  FROM = 413,
  FULL = 414,
  FUNCTION = 415,
  FUNCTIONS = 416,
  GLOBAL = 417,
  GRANT = 418,
  GRANTED = 419,
  GREATEST = 420,
  GROUP_P = 421,
  GROUPING = 422,
  HANDLER = 423,
  HAVING = 424,
  HEADER_P = 425,
  HOLD = 426,
  HOUR_P = 427,
  IDENTITY_P = 428,
  IF_P = 429,
  ILIKE = 430,
  IMMEDIATE = 431,
  IMMUTABLE = 432,
  IMPLICIT_P = 433,
  IMPORT_P = 434,
  IN_P = 435,
  INCLUDING = 436,
  INCREMENT = 437,
  INDEX = 438,
  INDEXES = 439,
  INHERIT = 440,
  INHERITS = 441,
  INITIALLY = 442,
  INLINE_P = 443,
  INNER_P = 444,
  INOUT = 445,
  INPUT_P = 446,
  INSENSITIVE = 447,
  INSERT = 448,
  INSTEAD = 449,
  INT_P = 450,
  INTEGER = 451,
  INTERSECT = 452,
  INTERVAL = 453,
  INTO = 454,
  INVOKER = 455,
  IS = 456,
  ISNULL = 457,
  ISOLATION = 458,
  JOIN = 459,
  KEY = 460,
  LABEL = 461,
  LANGUAGE = 462,
  LARGE_P = 463,
  LAST_P = 464,
  LATERAL_P = 465,
  LEADING = 466,
  LEAKPROOF = 467,
  LEAST = 468,
  LEFT = 469,
  LEVEL = 470,
  LIKE = 471,
  LIMIT = 472,
  LISTEN = 473,
  LOAD = 474,
  LOCAL = 475,
  LOCALTIME = 476,
  LOCALTIMESTAMP = 477,
  LOCATION = 478,
  LOCK_P = 479,
  LOCKED = 480,
  LOGGED = 481,
  MAPPING = 482,
  MATCH = 483,
  MATERIALIZED = 484,
  MAXVALUE = 485,
  MINUTE_P = 486,
  MINVALUE = 487,
  MODE = 488,
  MONTH_P = 489,
  MOVE = 490,
  NAME_P = 491,
  NAMES = 492,
  NATIONAL = 493,
  NATURAL = 494,
  NCHAR = 495,
  NEXT = 496,
  NO = 497,
  NONE = 498,
  NOT = 499,
  NOTHING = 500,
  NOTIFY = 501,
  NOTNULL = 502,
  NOWAIT = 503,
  NULL_P = 504,
  NULLIF = 505,
  NULLS_P = 506,
  NUMERIC = 507,
  OBJECT_P = 508,
  OF = 509,
  OFF = 510,
  OFFSET = 511,
  OIDS = 512,
  ON = 513,
  ONLY = 514,
  OPERATOR = 515,
  OPTION = 516,
  OPTIONS = 517,
  OR = 518,
  ORDER = 519,
  ORDINALITY = 520,
  OUT_P = 521,
  OUTER_P = 522,
  OVER = 523,
  OVERLAPS = 524,
  OVERLAY = 525,
  OWNED = 526,
  OWNER = 527,
  PARSER = 528,
  PARTIAL = 529,
  PARTITION = 530,
  PASSING = 531,
  PASSWORD = 532,
  PLACING = 533,
  PLANS = 534,
  POLICY = 535,
  POSITION = 536,
  PRECEDING = 537,
  PRECISION = 538,
  PRESERVE = 539,
  PREPARE = 540,
  PREPARED = 541,
  PRIMARY = 542,
  PRIOR = 543,
  PRIVILEGES = 544,
  PROCEDURAL = 545,
  PROCEDURE = 546,
  PROGRAM = 547,
  QUOTE = 548,
  RANGE = 549,
  READ = 550,
  REAL = 551,
  REASSIGN = 552,
  RECHECK = 553,
  RECURSIVE = 554,
  REF = 555,
  REFERENCES = 556,
  REFRESH = 557,
  REINDEX = 558,
  RELATIVE_P = 559,
  RELEASE = 560,
  RENAME = 561,
  REPEATABLE = 562,
  REPLACE = 563,
  REPLICA = 564,
  RESET = 565,
  RESTART = 566,
  RESTRICT = 567,
  RETURNING = 568,
  RETURNS = 569,
  REVOKE = 570,
  RIGHT = 571,
  ROLE = 572,
  ROLLBACK = 573,
  ROLLUP = 574,
  ROW = 575,
  ROWS = 576,
  RULE = 577,
  SAVEPOINT = 578,
  SCHEMA = 579,
  SCROLL = 580,
  SEARCH = 581,
  SECOND_P = 582,
  SECURITY = 583,
  SELECT = 584,
  SEQUENCE = 585,
  SEQUENCES = 586,
  SERIALIZABLE = 587,
  SERVER = 588,
  SESSION = 589,
  SESSION_USER = 590,
  SET = 591,
  SETS = 592,
  SETOF = 593,
  SHARE = 594,
  SHOW = 595,
  SIMILAR = 596,
  SIMPLE = 597,
  SKIP = 598,
  SMALLINT = 599,
  SNAPSHOT = 600,
  SOME = 601,
  SQL_P = 602,
  STABLE = 603,
  STANDALONE_P = 604,
  START = 605,
  STATEMENT = 606,
  STATISTICS = 607,
  STDIN = 608,
  STDOUT = 609,
  STORAGE = 610,
  STRICT_P = 611,
  STRIP_P = 612,
  SUBSTRING = 613,
  SYMMETRIC = 614,
  SYSID = 615,
  SYSTEM_P = 616,
  TABLE = 617,
  TABLES = 618,
  TABLESAMPLE = 619,
  TABLESPACE = 620,
  TEMP = 621,
  TEMPLATE = 622,
  TEMPORARY = 623,
  TEXT_P = 624,
  THEN = 625,
  TIME = 626,
  TIMESTAMP = 627,
  TO = 628,
  TRAILING = 629,
  TRANSACTION = 630,
  TRANSFORM = 631,
  TREAT = 632,
  TRIGGER = 633,
  TRIM = 634,
  TRUE_P = 635,
  TRUNCATE = 636,
  TRUSTED = 637,
  TYPE_P = 638,
  TYPES_P = 639,
  UNBOUNDED = 640,
  UNCOMMITTED = 641,
  UNENCRYPTED = 642,
  UNION = 643,
  UNIQUE = 644,
  UNKNOWN = 645,
  UNLISTEN = 646,
  UNLOGGED = 647,
  UNTIL = 648,
  UPDATE = 649,
  USER = 650,
  USING = 651,
  VACUUM = 652,
  VALID = 653,
  VALIDATE = 654,
  VALIDATOR = 655,
  VALUE_P = 656,
  VALUES = 657,
  VARCHAR = 658,
  VARIADIC = 659,
  VARYING = 660,
  VERBOSE = 661,
  VERSION_P = 662,
  VIEW = 663,
  VIEWS = 664,
  VOLATILE = 665,
  WHEN = 666,
  WHERE = 667,
  WHITESPACE_P = 668,
  WINDOW = 669,
  WITH = 670,
  WITHIN = 671,
  WITHOUT = 672,
  WORK = 673,
  WRAPPER = 674,
  WRITE = 675,
  XML_P = 676,
  XMLATTRIBUTES = 677,
  XMLCONCAT = 678,
  XMLELEMENT = 679,
  XMLEXISTS = 680,
  XMLFOREST = 681,
  XMLPARSE = 682,
  XMLPI = 683,
  XMLROOT = 684,
  XMLSERIALIZE = 685,
  YEAR_P = 686,
  YES_P = 687,
  ZONE = 688,
  NOT_LA = 689,
  NULLS_LA = 690,
  WITH_LA = 691,
  POSTFIXOP = 692,
  UMINUS = 693
};
#endif
/* Tokens.  */
#define IDENT 258
#define FCONST 259
#define SCONST 260
#define BCONST 261
#define XCONST 262
#define Op 263
#define ICONST 264
#define PARAM 265
#define TYPECAST 266
#define DOT_DOT 267
#define COLON_EQUALS 268
#define EQUALS_GREATER 269
#define LESS_EQUALS 270
#define GREATER_EQUALS 271
#define NOT_EQUALS 272
#define ABORT_P 273
#define ABSOLUTE_P 274
#define ACCESS 275
#define ACTION 276
#define ADD_P 277
#define ADMIN 278
#define AFTER 279
#define AGGREGATE 280
#define ALL 281
#define ALSO 282
#define ALTER 283
#define ALWAYS 284
#define ANALYSE 285
#define ANALYZE 286
#define AND 287
#define ANY 288
#define ARRAY 289
#define AS 290
#define ASC 291
#define ASSERTION 292
#define ASSIGNMENT 293
#define ASYMMETRIC 294
#define AT 295
#define ATTRIBUTE 296
#define AUTHORIZATION 297
#define BACKWARD 298
#define BEFORE 299
#define BEGIN_P 300
#define BETWEEN 301
#define BIGINT 302
#define BINARY 303
#define BIT 304
#define BOOLEAN_P 305
#define BOTH 306
#define BY 307
#define CACHE 308
#define CALLED 309
#define CASCADE 310
#define CASCADED 311
#define CASE 312
#define CAST 313
#define CATALOG_P 314
#define CHAIN 315
#define CHAR_P 316
#define CHARACTER 317
#define CHARACTERISTICS 318
#define CHECK 319
#define CHECKPOINT 320
#define CLASS 321
#define CLOSE 322
#define CLUSTER 323
#define COALESCE 324
#define COLLATE 325
#define COLLATION 326
#define COLUMN 327
#define COMMENT 328
#define COMMENTS 329
#define COMMIT 330
#define COMMITTED 331
#define CONCURRENTLY 332
#define CONFIGURATION 333
#define CONFLICT 334
#define CONNECTION 335
#define CONSTRAINT 336
#define CONSTRAINTS 337
#define CONTENT_P 338
#define CONTINUE_P 339
#define CONVERSION_P 340
#define COPY 341
#define COST 342
#define CREATE 343
#define CROSS 344
#define CSV 345
#define CUBE 346
#define CURRENT_P 347
#define CURRENT_CATALOG 348
#define CURRENT_DATE 349
#define CURRENT_ROLE 350
#define CURRENT_SCHEMA 351
#define CURRENT_TIME 352
#define CURRENT_TIMESTAMP 353
#define CURRENT_USER 354
#define CURSOR 355
#define CYCLE 356
#define DATA_P 357
#define DATABASE 358
#define DAY_P 359
#define DEALLOCATE 360
#define DEC 361
#define DECIMAL_P 362
#define DECLARE 363
#define DEFAULT 364
#define DEFAULTS 365
#define DEFERRABLE 366
#define DEFERRED 367
#define DEFINER 368
#define DELETE_P 369
#define DELIMITER 370
#define DELIMITERS 371
#define DESC 372
#define DICTIONARY 373
#define DISABLE_P 374
#define DISCARD 375
#define DISTINCT 376
#define DO 377
#define DOCUMENT_P 378
#define DOMAIN_P 379
#define DOUBLE_P 380
#define DROP 381
#define EACH 382
#define ELSE 383
#define ENABLE_P 384
#define ENCODING 385
#define ENCRYPTED 386
#define END_P 387
#define ENUM_P 388
#define ESCAPE 389
#define EVENT 390
#define EXCEPT 391
#define EXCLUDE 392
#define EXCLUDING 393
#define EXCLUSIVE 394
#define EXECUTE 395
#define EXISTS 396
#define EXPLAIN 397
#define EXTENSION 398
#define EXTERNAL 399
#define EXTRACT 400
#define FALSE_P 401
#define FAMILY 402
#define FETCH 403
#define FILTER 404
#define FIRST_P 405
#define FLOAT_P 406
#define FOLLOWING 407
#define FOR 408
#define FORCE 409
#define FOREIGN 410
#define FORWARD 411
#define FREEZE 412
#define FROM 413
#define FULL 414
#define FUNCTION 415
#define FUNCTIONS 416
#define GLOBAL 417
#define GRANT 418
#define GRANTED 419
#define GREATEST 420
#define GROUP_P 421
#define GROUPING 422
#define HANDLER 423
#define HAVING 424
#define HEADER_P 425
#define HOLD 426
#define HOUR_P 427
#define IDENTITY_P 428
#define IF_P 429
#define ILIKE 430
#define IMMEDIATE 431
#define IMMUTABLE 432
#define IMPLICIT_P 433
#define IMPORT_P 434
#define IN_P 435
#define INCLUDING 436
#define INCREMENT 437
#define INDEX 438
#define INDEXES 439
#define INHERIT 440
#define INHERITS 441
#define INITIALLY 442
#define INLINE_P 443
#define INNER_P 444
#define INOUT 445
#define INPUT_P 446
#define INSENSITIVE 447
#define INSERT 448
#define INSTEAD 449
#define INT_P 450
#define INTEGER 451
#define INTERSECT 452
#define INTERVAL 453
#define INTO 454
#define INVOKER 455
#define IS 456
#define ISNULL 457
#define ISOLATION 458
#define JOIN 459
#define KEY 460
#define LABEL 461
#define LANGUAGE 462
#define LARGE_P 463
#define LAST_P 464
#define LATERAL_P 465
#define LEADING 466
#define LEAKPROOF 467
#define LEAST 468
#define LEFT 469
#define LEVEL 470
#define LIKE 471
#define LIMIT 472
#define LISTEN 473
#define LOAD 474
#define LOCAL 475
#define LOCALTIME 476
#define LOCALTIMESTAMP 477
#define LOCATION 478
#define LOCK_P 479
#define LOCKED 480
#define LOGGED 481
#define MAPPING 482
#define MATCH 483
#define MATERIALIZED 484
#define MAXVALUE 485
#define MINUTE_P 486
#define MINVALUE 487
#define MODE 488
#define MONTH_P 489
#define MOVE 490
#define NAME_P 491
#define NAMES 492
#define NATIONAL 493
#define NATURAL 494
#define NCHAR 495
#define NEXT 496
#define NO 497
#define NONE 498
#define NOT 499
#define NOTHING 500
#define NOTIFY 501
#define NOTNULL 502
#define NOWAIT 503
#define NULL_P 504
#define NULLIF 505
#define NULLS_P 506
#define NUMERIC 507
#define OBJECT_P 508
#define OF 509
#define OFF 510
#define OFFSET 511
#define OIDS 512
#define ON 513
#define ONLY 514
#define OPERATOR 515
#define OPTION 516
#define OPTIONS 517
#define OR 518
#define ORDER 519
#define ORDINALITY 520
#define OUT_P 521
#define OUTER_P 522
#define OVER 523
#define OVERLAPS 524
#define OVERLAY 525
#define OWNED 526
#define OWNER 527
#define PARSER 528
#define PARTIAL 529
#define PARTITION 530
#define PASSING 531
#define PASSWORD 532
#define PLACING 533
#define PLANS 534
#define POLICY 535
#define POSITION 536
#define PRECEDING 537
#define PRECISION 538
#define PRESERVE 539
#define PREPARE 540
#define PREPARED 541
#define PRIMARY 542
#define PRIOR 543
#define PRIVILEGES 544
#define PROCEDURAL 545
#define PROCEDURE 546
#define PROGRAM 547
#define QUOTE 548
#define RANGE 549
#define READ 550
#define REAL 551
#define REASSIGN 552
#define RECHECK 553
#define RECURSIVE 554
#define REF 555
#define REFERENCES 556
#define REFRESH 557
#define REINDEX 558
#define RELATIVE_P 559
#define RELEASE 560
#define RENAME 561
#define REPEATABLE 562
#define REPLACE 563
#define REPLICA 564
#define RESET 565
#define RESTART 566
#define RESTRICT 567
#define RETURNING 568
#define RETURNS 569
#define REVOKE 570
#define RIGHT 571
#define ROLE 572
#define ROLLBACK 573
#define ROLLUP 574
#define ROW 575
#define ROWS 576
#define RULE 577
#define SAVEPOINT 578
#define SCHEMA 579
#define SCROLL 580
#define SEARCH 581
#define SECOND_P 582
#define SECURITY 583
#define SELECT 584
#define SEQUENCE 585
#define SEQUENCES 586
#define SERIALIZABLE 587
#define SERVER 588
#define SESSION 589
#define SESSION_USER 590
#define SET 591
#define SETS 592
#define SETOF 593
#define SHARE 594
#define SHOW 595
#define SIMILAR 596
#define SIMPLE 597
#define SKIP 598
#define SMALLINT 599
#define SNAPSHOT 600
#define SOME 601
#define SQL_P 602
#define STABLE 603
#define STANDALONE_P 604
#define START 605
#define STATEMENT 606
#define STATISTICS 607
#define STDIN 608
#define STDOUT 609
#define STORAGE 610
#define STRICT_P 611
#define STRIP_P 612
#define SUBSTRING 613
#define SYMMETRIC 614
#define SYSID 615
#define SYSTEM_P 616
#define TABLE 617
#define TABLES 618
#define TABLESAMPLE 619
#define TABLESPACE 620
#define TEMP 621
#define TEMPLATE 622
#define TEMPORARY 623
#define TEXT_P 624
#define THEN 625
#define TIME 626
#define TIMESTAMP 627
#define TO 628
#define TRAILING 629
#define TRANSACTION 630
#define TRANSFORM 631
#define TREAT 632
#define TRIGGER 633
#define TRIM 634
#define TRUE_P 635
#define TRUNCATE 636
#define TRUSTED 637
#define TYPE_P 638
#define TYPES_P 639
#define UNBOUNDED 640
#define UNCOMMITTED 641
#define UNENCRYPTED 642
#define UNION 643
#define UNIQUE 644
#define UNKNOWN 645
#define UNLISTEN 646
#define UNLOGGED 647
#define UNTIL 648
#define UPDATE 649
#define USER 650
#define USING 651
#define VACUUM 652
#define VALID 653
#define VALIDATE 654
#define VALIDATOR 655
#define VALUE_P 656
#define VALUES 657
#define VARCHAR 658
#define VARIADIC 659
#define VARYING 660
#define VERBOSE 661
#define VERSION_P 662
#define VIEW 663
#define VIEWS 664
#define VOLATILE 665
#define WHEN 666
#define WHERE 667
#define WHITESPACE_P 668
#define WINDOW 669
#define WITH 670
#define WITHIN 671
#define WITHOUT 672
#define WORK 673
#define WRAPPER 674
#define WRITE 675
#define XML_P 676
#define XMLATTRIBUTES 677
#define XMLCONCAT 678
#define XMLELEMENT 679
#define XMLEXISTS 680
#define XMLFOREST 681
#define XMLPARSE 682
#define XMLPI 683
#define XMLROOT 684
#define XMLSERIALIZE 685
#define YEAR_P 686
#define YES_P 687
#define ZONE 688
#define NOT_LA 689
#define NULLS_LA 690
#define WITH_LA 691
#define POSTFIXOP 692
#define UMINUS 693

/* Value type.  */
#if !defined YYSTYPE && !defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE {
#line 190 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:355  */

  core_YYSTYPE core_yystype;
  /* these fields must match core_YYSTYPE: */
  int ival;
  char *str;
  const char *keyword;

  char chr;
  bool boolean;
  JoinType jtype;
  DropBehavior dbehavior;
  OnCommitAction oncommit;
  List *list;
  Node *node;
  Value *value;
  ObjectType objtype;
  TypeName *typnam;
  FunctionParameter *fun_param;
  FunctionParameterMode fun_param_mode;
  FuncWithArgs *funwithargs;
  DefElem *defelt;
  SortBy *sortby;
  WindowDef *windef;
  JoinExpr *jexpr;
  IndexElem *ielem;
  Alias *alias;
  RangeVar *range;
  IntoClause *into;
  WithClause *with;
  InferClause *infer;
  OnConflictClause *onconflict;
  A_Indices *aind;
  ResTarget *target;
  struct PrivTarget *privtarget;
  AccessPriv *accesspriv;
  struct ImportQual *importqual;
  InsertStmt *istmt;
  VariableSetStmt *vsetstmt;

#line 1208 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:355  */
};
#define YYSTYPE_IS_TRIVIAL 1
#define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if !defined YYLTYPE && !defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE {
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
#define YYLTYPE_IS_DECLARED 1
#define YYLTYPE_IS_TRIVIAL 1
#endif

int base_yyparse(core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY__SRC_POSTGRES_BACKEND_PARSER_GRAM_HPP_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 1236 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:358  */

#ifdef short
#undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
#ifdef __SIZE_TYPE__
#define YYSIZE_T __SIZE_TYPE__
#elif defined size_t
#define YYSIZE_T size_t
#elif !defined YYSIZE_T
#include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#define YYSIZE_T size_t
#else
#define YYSIZE_T unsigned int
#endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T)-1)

#ifndef YY_
#if defined YYENABLE_NLS && YYENABLE_NLS
#if ENABLE_NLS
#include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#define YY_(Msgid) dgettext("bison-runtime", Msgid)
#endif
#endif
#ifndef YY_
#define YY_(Msgid) Msgid
#endif
#endif

#ifndef YY_ATTRIBUTE
#if (defined __GNUC__ &&                                           \
     (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__))) || \
    defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#define YY_ATTRIBUTE(Spec) __attribute__(Spec)
#else
#define YY_ATTRIBUTE(Spec) /* empty */
#endif
#endif

#ifndef YY_ATTRIBUTE_PURE
#define YY_ATTRIBUTE_PURE YY_ATTRIBUTE((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
#define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE((__unused__))
#endif

#if !defined _Noreturn && \
    (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
#if defined _MSC_VER && 1200 <= _MSC_VER
#define _Noreturn __declspec(noreturn)
#else
#define _Noreturn YY_ATTRIBUTE((__noreturn__))
#endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if !defined lint || defined __GNUC__
#define YYUSE(E) ((void)(E))
#else
#define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                 \
  _Pragma("GCC diagnostic push")                            \
      _Pragma("GCC diagnostic ignored \"-Wuninitialized\"") \
          _Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
#define YY_IGNORE_MAYBE_UNINITIALIZED_END _Pragma("GCC diagnostic pop")
#else
#define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
#define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
#define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if !defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

#ifdef YYSTACK_USE_ALLOCA
#if YYSTACK_USE_ALLOCA
#ifdef __GNUC__
#define YYSTACK_ALLOC __builtin_alloca
#elif defined __BUILTIN_VA_ARG_INCR
#include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#elif defined _AIX
#define YYSTACK_ALLOC __alloca
#elif defined _MSC_VER
#include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#define alloca _alloca
#else
#define YYSTACK_ALLOC alloca
#if !defined _ALLOCA_H && !defined EXIT_SUCCESS
#include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
/* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS 0
#endif
#endif
#endif
#endif
#endif

#ifdef YYSTACK_ALLOC
/* Pacify GCC's 'empty if-body' warning.  */
#define YYSTACK_FREE(Ptr) \
  do {/* empty */         \
    ;                     \
  } while (0)
#ifndef YYSTACK_ALLOC_MAXIMUM
/* The OS might guarantee only one guard page at the bottom of the stack,
   and a page size can be as small as 4096 bytes.  So we cannot safely
   invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
   to allow for a few compiler-allocated temporary stack slots.  */
#define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#endif
#else
#define YYSTACK_ALLOC YYMALLOC
#define YYSTACK_FREE YYFREE
#ifndef YYSTACK_ALLOC_MAXIMUM
#define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#endif
#if (defined __cplusplus && !defined EXIT_SUCCESS && \
     !((defined YYMALLOC || defined malloc) &&       \
       (defined YYFREE || defined free)))
#include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS 0
#endif
#endif
#ifndef YYMALLOC
#define YYMALLOC malloc
#if !defined malloc && !defined EXIT_SUCCESS
void *malloc(YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#endif
#endif
#ifndef YYFREE
#define YYFREE free
#if !defined free && !defined EXIT_SUCCESS
void free(void *);      /* INFRINGES ON USER NAME SPACE */
#endif
#endif
#endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */

#if (!defined yyoverflow &&                                \
     (!defined __cplusplus ||                              \
      (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL && \
       defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc {
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
#define YYSTACK_GAP_MAXIMUM (sizeof(union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
#define YYSTACK_BYTES(N)                                              \
  ((N) * (sizeof(yytype_int16) + sizeof(YYSTYPE) + sizeof(YYLTYPE)) + \
   2 * YYSTACK_GAP_MAXIMUM)

#define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
#define YYSTACK_RELOCATE(Stack_alloc, Stack)                         \
  do {                                                               \
    YYSIZE_T yynewbytes;                                             \
    YYCOPY(&yyptr->Stack_alloc, Stack, yysize);                      \
    Stack = &yyptr->Stack_alloc;                                     \
    yynewbytes = yystacksize * sizeof(*Stack) + YYSTACK_GAP_MAXIMUM; \
    yyptr += yynewbytes / sizeof(*yyptr);                            \
  } while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
#ifndef YYCOPY
#if defined __GNUC__ && 1 < __GNUC__
#define YYCOPY(Dst, Src, Count) \
  __builtin_memcpy(Dst, Src, (Count) * sizeof(*(Src)))
#else
#define YYCOPY(Dst, Src, Count)                                  \
  do {                                                           \
    YYSIZE_T yyi;                                                \
    for (yyi = 0; yyi < (Count); yyi++) (Dst)[yyi] = (Src)[yyi]; \
  } while (0)
#endif
#endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL 755
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST 91349

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS 456
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS 613
/* YYNRULES -- Number of rules.  */
#define YYNRULES 2484
/* YYNSTATES -- Number of states.  */
#define YYNSTATES 4918

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK 2
#define YYMAXUTOK 693

#define YYTRANSLATE(YYX) \
  ((unsigned int)(YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] = {
    0,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   445, 2,   2,   450, 451, 443, 441, 454,
    442, 452, 444, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   455, 453,
    437, 439, 438, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   448, 2,   449, 446, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,
    15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
    30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
    45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
    60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,
    75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
    90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104,
    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
    135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
    165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
    195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
    225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
    255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
    270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
    285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
    300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
    315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
    330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
    345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
    360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
    375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
    390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
    405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
    420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
    435, 436, 440, 447};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] = {
    0,     733,   733,   740,   747,   757,   758,   759,   760,   761,   762,
    763,   764,   765,   766,   767,   768,   769,   770,   771,   772,   773,
    774,   775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
    785,   786,   787,   788,   789,   790,   791,   792,   793,   794,   795,
    796,   797,   798,   799,   800,   801,   802,   803,   804,   805,   806,
    807,   808,   809,   810,   811,   812,   813,   814,   815,   816,   817,
    818,   819,   820,   821,   822,   823,   824,   825,   826,   827,   828,
    829,   830,   831,   832,   833,   834,   835,   836,   837,   838,   839,
    840,   841,   842,   843,   844,   845,   846,   847,   848,   849,   850,
    851,   852,   853,   854,   855,   856,   857,   858,   859,   860,   861,
    862,   863,   864,   865,   866,   867,   868,   869,   870,   871,   872,
    873,   874,   875,   876,   877,   878,   880,   890,   901,   902,   903,
    912,   913,   917,   918,   922,   927,   931,   936,   941,   945,   949,
    954,   958,   1016,  1018,  1022,  1026,  1030,  1034,  1048,  1066,  1077,
    1078,  1082,  1090,  1108,  1120,  1141,  1148,  1167,  1174,  1191,  1209,
    1220,  1221,  1233,  1240,  1257,  1267,  1277,  1292,  1310,  1311,  1315,
    1322,  1330,  1331,  1332,  1333,  1334,  1335,  1349,  1355,  1361,  1370,
    1378,  1386,  1390,  1398,  1406,  1413,  1422,  1423,  1431,  1442,  1450,
    1458,  1469,  1477,  1485,  1492,  1501,  1511,  1512,  1516,  1517,  1520,
    1522,  1526,  1527,  1528,  1529,  1533,  1534,  1535,  1541,  1553,  1557,
    1561,  1576,  1583,  1584,  1585,  1589,  1590,  1591,  1595,  1596,  1600,
    1604,  1605,  1612,  1619,  1629,  1636,  1646,  1647,  1652,  1653,  1658,
    1664,  1670,  1676,  1682,  1692,  1702,  1703,  1707,  1708,  1716,  1731,
    1737,  1743,  1749,  1755,  1774,  1783,  1792,  1803,  1814,  1823,  1832,
    1843,  1854,  1863,  1872,  1881,  1890,  1899,  1908,  1919,  1933,  1934,
    1939,  1947,  1955,  1964,  1972,  1980,  1989,  1998,  2007,  2016,  2026,
    2039,  2054,  2063,  2071,  2086,  2094,  2104,  2114,  2121,  2128,  2136,
    2144,  2151,  2158,  2166,  2174,  2182,  2189,  2196,  2204,  2211,  2218,
    2226,  2234,  2242,  2250,  2258,  2266,  2276,  2283,  2291,  2299,  2307,
    2315,  2323,  2330,  2336,  2346,  2347,  2351,  2352,  2353,  2357,  2365,
    2369,  2370,  2374,  2381,  2388,  2395,  2405,  2408,  2409,  2413,  2414,
    2419,  2423,  2427,  2432,  2447,  2460,  2461,  2466,  2475,  2485,  2495,
    2521,  2527,  2557,  2586,  2608,  2609,  2613,  2614,  2623,  2624,  2625,
    2628,  2629,  2634,  2635,  2639,  2643,  2647,  2651,  2655,  2659,  2663,
    2667,  2671,  2675,  2679,  2683,  2687,  2691,  2700,  2704,  2708,  2712,
    2716,  2720,  2724,  2725,  2730,  2734,  2741,  2748,  2749,  2750,  2751,
    2752,  2756,  2760,  2768,  2779,  2795,  2812,  2829,  2859,  2860,  2861,
    2862,  2863,  2870,  2877,  2878,  2882,  2883,  2887,  2888,  2892,  2896,
    2903,  2907,  2914,  2915,  2916,  2920,  2921,  2924,  2945,  2966,  2967,
    2971,  2979,  2980,  2981,  3012,  3019,  3026,  3037,  3048,  3058,  3067,
    3100,  3107,  3114,  3121,  3132,  3142,  3143,  3144,  3148,  3149,  3150,
    3151,  3152,  3153,  3162,  3170,  3174,  3187,  3202,  3216,  3231,  3245,
    3263,  3284,  3285,  3289,  3290,  3294,  3295,  3298,  3304,  3308,  3316,
    3321,  3327,  3328,  3332,  3337,  3344,  3345,  3355,  3357,  3359,  3361,
    3364,  3367,  3370,  3374,  3375,  3376,  3377,  3378,  3381,  3382,  3387,
    3388,  3389,  3390,  3393,  3394,  3395,  3396,  3399,  3400,  3403,  3404,
    3407,  3422,  3435,  3451,  3465,  3466,  3467,  3479,  3492,  3508,  3521,
    3522,  3534,  3554,  3564,  3577,  3585,  3596,  3597,  3600,  3601,  3604,
    3608,  3612,  3616,  3620,  3624,  3628,  3632,  3636,  3640,  3644,  3648,
    3654,  3655,  3659,  3660,  3665,  3668,  3669,  3681,  3693,  3708,  3709,
    3717,  3718,  3722,  3723,  3727,  3728,  3732,  3733,  3737,  3748,  3761,
    3762,  3772,  3783,  3784,  3797,  3804,  3821,  3829,  3840,  3843,  3847,
    3851,  3855,  3867,  3877,  3880,  3884,  3897,  3907,  3917,  3926,  3935,
    3944,  3954,  3963,  3973,  3982,  3991,  4000,  4009,  4018,  4027,  4036,
    4045,  4054,  4063,  4072,  4081,  4090,  4099,  4108,  4118,  4136,  4147,
    4148,  4149,  4150,  4154,  4155,  4159,  4160,  4170,  4181,  4201,  4209,
    4221,  4222,  4226,  4230,  4238,  4242,  4246,  4253,  4257,  4262,  4267,
    4274,  4281,  4286,  4296,  4310,  4311,  4316,  4317,  4321,  4322,  4332,
    4343,  4363,  4372,  4380,  4397,  4417,  4447,  4456,  4477,  4492,  4493,
    4497,  4505,  4520,  4531,  4532,  4542,  4550,  4567,  4589,  4605,  4619,
    4630,  4644,  4645,  4649,  4650,  4654,  4655,  4659,  4660,  4664,  4665,
    4669,  4670,  4671,  4672,  4673,  4685,  4705,  4730,  4731,  4732,  4736,
    4738,  4760,  4762,  4764,  4766,  4768,  4773,  4778,  4788,  4789,  4793,
    4794,  4798,  4799,  4803,  4804,  4805,  4809,  4813,  4814,  4815,  4819,
    4820,  4825,  4826,  4853,  4854,  4855,  4856,  4857,  4858,  4863,  4874,
    4897,  4907,  4921,  4923,  4928,  4933,  4935,  4940,  4950,  4951,  4952,
    4953,  4965,  4985,  5008,  5018,  5029,  5039,  5049,  5060,  5069,  5076,
    5083,  5092,  5101,  5110,  5119,  5128,  5139,  5142,  5143,  5146,  5150,
    5157,  5158,  5159,  5160,  5161,  5164,  5167,  5168,  5176,  5183,  5184,
    5187,  5189,  5200,  5210,  5220,  5232,  5233,  5249,  5264,  5265,  5269,
    5279,  5290,  5299,  5309,  5318,  5319,  5322,  5323,  5326,  5327,  5328,
    5331,  5345,  5350,  5360,  5369,  5381,  5382,  5386,  5394,  5406,  5416,
    5429,  5439,  5461,  5471,  5489,  5500,  5511,  5521,  5531,  5541,  5551,
    5562,  5576,  5577,  5578,  5579,  5580,  5581,  5582,  5583,  5584,  5585,
    5586,  5587,  5588,  5589,  5590,  5594,  5595,  5598,  5599,  5602,  5604,
    5609,  5610,  5620,  5631,  5632,  5633,  5666,  5675,  5684,  5693,  5702,
    5711,  5720,  5729,  5743,  5752,  5761,  5771,  5780,  5789,  5797,  5806,
    5815,  5824,  5836,  5837,  5838,  5839,  5840,  5841,  5842,  5843,  5844,
    5845,  5846,  5847,  5848,  5849,  5850,  5851,  5852,  5853,  5854,  5855,
    5856,  5860,  5861,  5875,  5886,  5897,  5908,  5919,  5930,  5941,  5954,
    5955,  5959,  5960,  5961,  5962,  5963,  5964,  5965,  5966,  5967,  5968,
    5969,  5972,  5973,  5983,  5989,  5997,  6005,  6013,  6021,  6029,  6037,
    6045,  6053,  6061,  6069,  6077,  6085,  6093,  6101,  6109,  6117,  6127,
    6128,  6131,  6132,  6142,  6158,  6172,  6198,  6200,  6202,  6204,  6211,
    6220,  6221,  6224,  6231,  6238,  6245,  6259,  6267,  6275,  6283,  6291,
    6299,  6307,  6315,  6323,  6331,  6339,  6347,  6355,  6363,  6371,  6379,
    6391,  6392,  6396,  6397,  6402,  6403,  6407,  6408,  6413,  6429,  6442,
    6452,  6464,  6465,  6468,  6469,  6479,  6489,  6490,  6494,  6498,  6502,
    6513,  6526,  6540,  6557,  6558,  6559,  6560,  6572,  6598,  6627,  6628,
    6632,  6633,  6637,  6638,  6642,  6643,  6646,  6647,  6655,  6666,  6677,
    6690,  6691,  6694,  6695,  6696,  6699,  6700,  6701,  6704,  6705,  6706,
    6722,  6734,  6747,  6762,  6763,  6766,  6767,  6771,  6772,  6780,  6781,
    6785,  6786,  6801,  6810,  6819,  6828,  6837,  6849,  6850,  6851,  6852,
    6853,  6859,  6863,  6878,  6879,  6885,  6895,  6899,  6904,  6912,  6953,
    6957,  6961,  6965,  6973,  6974,  6979,  6980,  6987,  6991,  6995,  6999,
    7003,  7007,  7011,  7015,  7019,  7023,  7027,  7031,  7035,  7039,  7043,
    7051,  7055,  7059,  7063,  7067,  7073,  7074,  7081,  7082,  7086,  7087,
    7090,  7102,  7106,  7121,  7132,  7133,  7138,  7139,  7154,  7165,  7179,
    7190,  7204,  7215,  7229,  7237,  7239,  7241,  7246,  7248,  7261,  7270,
    7271,  7275,  7279,  7291,  7302,  7313,  7326,  7327,  7328,  7332,  7345,
    7346,  7356,  7368,  7372,  7376,  7380,  7387,  7408,  7417,  7426,  7435,
    7446,  7447,  7450,  7451,  7452,  7455,  7456,  7459,  7469,  7478,  7495,
    7505,  7514,  7523,  7532,  7541,  7550,  7559,  7569,  7578,  7587,  7596,
    7605,  7615,  7625,  7634,  7643,  7653,  7663,  7673,  7683,  7693,  7703,
    7713,  7723,  7733,  7743,  7753,  7763,  7774,  7785,  7796,  7807,  7817,
    7827,  7838,  7849,  7859,  7869,  7877,  7886,  7895,  7904,  7913,  7922,
    7931,  7940,  7949,  7963,  7964,  7967,  7968,  7978,  7988,  7997,  8006,
    8015,  8024,  8034,  8044,  8053,  8062,  8071,  8080,  8089,  8098,  8107,
    8116,  8125,  8134,  8143,  8152,  8161,  8170,  8179,  8188,  8205,  8214,
    8222,  8230,  8238,  8246,  8255,  8263,  8271,  8280,  8288,  8296,  8304,
    8312,  8320,  8328,  8336,  8344,  8352,  8369,  8386,  8387,  8388,  8393,
    8399,  8408,  8409,  8410,  8411,  8412,  8416,  8417,  8420,  8421,  8422,
    8423,  8427,  8428,  8429,  8434,  8445,  8467,  8477,  8478,  8481,  8490,
    8496,  8515,  8522,  8529,  8536,  8543,  8550,  8557,  8565,  8573,  8581,
    8589,  8597,  8604,  8611,  8620,  8621,  8622,  8626,  8629,  8632,  8635,
    8638,  8645,  8647,  8649,  8654,  8656,  8668,  8681,  8694,  8712,  8733,
    8734,  8735,  8736,  8746,  8762,  8772,  8773,  8777,  8778,  8782,  8786,
    8790,  8808,  8809,  8810,  8811,  8812,  8813,  8814,  8821,  8822,  8833,
    8840,  8847,  8858,  8875,  8882,  8900,  8906,  8922,  8935,  8944,  8952,
    8960,  8969,  8980,  8991,  9001,  9002,  9013,  9023,  9034,  9045,  9056,
    9067,  9076,  9088,  9089,  9103,  9126,  9134,  9143,  9154,  9155,  9167,
    9181,  9195,  9207,  9215,  9228,  9229,  9233,  9234,  9235,  9236,  9240,
    9250,  9263,  9264,  9268,  9269,  9272,  9273,  9276,  9277,  9281,  9282,
    9295,  9302,  9312,  9319,  9329,  9330,  9331,  9332,  9333,  9334,  9335,
    9336,  9337,  9341,  9345,  9352,  9359,  9360,  9364,  9365,  9366,  9376,
    9386,  9387,  9391,  9392,  9393,  9394,  9404,  9411,  9429,  9430,  9440,
    9446,  9452,  9458,  9474,  9492,  9496,  9504,  9510,  9516,  9525,  9527,
    9532,  9543,  9553,  9563,  9569,  9578,  9587,  9593,  9594,  9605,  9619,
    9620,  9631,  9642,  9643,  9646,  9647,  9648,  9649,  9650,  9651,  9652,
    9653,  9656,  9657,  9661,  9662,  9663,  9674,  9692,  9693,  9697,  9698,
    9702,  9718,  9744,  9777,  9788,  9789,  9799,  9810,  9813,  9814,  9815,
    9816,  9817,  9820,  9821,  9822,  9870,  9871,  9875,  9876,  9891,  9892,
    9899,  9907,  9915,  9923,  9931,  9939,  9950,  9951,  9978,  9992,  10007,
    10008, 10027, 10031, 10035, 10052, 10059, 10066, 10076, 10077, 10080, 10092,
    10093, 10097, 10109, 10117, 10122, 10127, 10132, 10137, 10145, 10153, 10158,
    10163, 10170, 10171, 10175, 10176, 10177, 10184, 10185, 10189, 10190, 10194,
    10195, 10199, 10203, 10204, 10207, 10216, 10229, 10230, 10231, 10232, 10236,
    10237, 10241, 10243, 10253, 10258, 10261, 10266, 10267, 10275, 10285, 10286,
    10287, 10295, 10299, 10300, 10303, 10304, 10329, 10330, 10334, 10335, 10339,
    10340, 10341, 10342, 10343, 10347, 10360, 10367, 10374, 10381, 10382, 10386,
    10387, 10391, 10392, 10396, 10397, 10401, 10412, 10413, 10414, 10415, 10419,
    10420, 10425, 10431, 10449, 10450, 10454, 10455, 10461, 10466, 10470, 10477,
    10485, 10520, 10545, 10549, 10575, 10579, 10591, 10604, 10618, 10629, 10644,
    10650, 10655, 10661, 10668, 10669, 10677, 10681, 10685, 10691, 10698, 10703,
    10704, 10705, 10706, 10710, 10711, 10723, 10724, 10729, 10736, 10743, 10750,
    10761, 10762, 10775, 10779, 10786, 10796, 10806, 10817, 10818, 10833, 10843,
    10855, 10860, 10861, 10864, 10865, 10868, 10869, 10874, 10875, 10880, 10881,
    10889, 10894, 10895, 10899, 10903, 10909, 10939, 10944, 10951, 10956, 10962,
    10967, 10976, 10978, 10981, 10985, 10986, 10987, 10988, 10989, 10990, 10995,
    11015, 11016, 11017, 11018, 11029, 11035, 11043, 11044, 11050, 11055, 11060,
    11065, 11070, 11075, 11080, 11085, 11091, 11097, 11103, 11110, 11132, 11141,
    11145, 11153, 11157, 11165, 11177, 11198, 11202, 11208, 11212, 11225, 11236,
    11251, 11253, 11255, 11257, 11259, 11261, 11266, 11267, 11271, 11272, 11279,
    11288, 11296, 11305, 11316, 11324, 11325, 11326, 11330, 11332, 11334, 11336,
    11338, 11340, 11342, 11347, 11352, 11358, 11366, 11371, 11378, 11385, 11389,
    11393, 11429, 11430, 11432, 11440, 11455, 11457, 11459, 11461, 11463, 11465,
    11467, 11469, 11471, 11473, 11475, 11477, 11479, 11481, 11484, 11486, 11488,
    11491, 11493, 11495, 11497, 11500, 11505, 11513, 11518, 11526, 11531, 11539,
    11544, 11553, 11561, 11569, 11577, 11595, 11603, 11611, 11619, 11627, 11643,
    11651, 11659, 11667, 11675, 11683, 11691, 11695, 11701, 11705, 11709, 11717,
    11725, 11733, 11741, 11761, 11783, 11794, 11801, 11817, 11822, 11839, 11841,
    11843, 11845, 11847, 11849, 11851, 11853, 11855, 11857, 11859, 11861, 11863,
    11865, 11867, 11869, 11871, 11873, 11875, 11877, 11881, 11887, 11891, 11895,
    11900, 11916, 11917, 11918, 11933, 11963, 11965, 11967, 11978, 12002, 12013,
    12024, 12032, 12042, 12052, 12061, 12065, 12071, 12078, 12085, 12095, 12102,
    12130, 12165, 12176, 12177, 12184, 12190, 12216, 12226, 12239, 12247, 12260,
    12270, 12283, 12293, 12306, 12310, 12314, 12318, 12322, 12326, 12330, 12332,
    12336, 12345, 12350, 12357, 12372, 12379, 12383, 12387, 12391, 12395, 12402,
    12410, 12418, 12422, 12426, 12430, 12434, 12438, 12444, 12448, 12457, 12461,
    12465, 12470, 12484, 12486, 12490, 12492, 12494, 12497, 12500, 12503, 12504,
    12507, 12515, 12525, 12526, 12529, 12530, 12531, 12536, 12540, 12544, 12548,
    12559, 12560, 12564, 12565, 12573, 12574, 12578, 12579, 12584, 12592, 12594,
    12608, 12611, 12638, 12639, 12642, 12643, 12654, 12672, 12679, 12688, 12705,
    12750, 12758, 12766, 12774, 12782, 12803, 12804, 12805, 12808, 12809, 12812,
    12815, 12816, 12817, 12820, 12821, 12824, 12825, 12826, 12827, 12828, 12829,
    12830, 12831, 12832, 12833, 12834, 12835, 12838, 12840, 12845, 12847, 12852,
    12854, 12856, 12858, 12860, 12862, 12874, 12878, 12885, 12889, 12895, 12899,
    12908, 12919, 12920, 12923, 12927, 12931, 12937, 12938, 12943, 12947, 12954,
    12955, 12956, 12957, 12958, 12959, 12960, 12961, 12971, 12975, 12982, 12989,
    12990, 13006, 13010, 13015, 13019, 13034, 13039, 13043, 13046, 13049, 13050,
    13051, 13054, 13061, 13071, 13085, 13086, 13090, 13101, 13102, 13105, 13106,
    13109, 13113, 13120, 13124, 13128, 13135, 13145, 13146, 13150, 13151, 13154,
    13155, 13166, 13167, 13176, 13177, 13185, 13195, 13196, 13200, 13201, 13204,
    13220, 13228, 13236, 13258, 13259, 13270, 13274, 13301, 13303, 13308, 13311,
    13314, 13316, 13318, 13320, 13330, 13332, 13343, 13347, 13351, 13355, 13359,
    13368, 13375, 13407, 13411, 13417, 13424, 13428, 13432, 13438, 13439, 13441,
    13442, 13443, 13447, 13477, 13504, 13508, 13514, 13516, 13533, 13534, 13535,
    13540, 13541, 13542, 13547, 13548, 13549, 13550, 13556, 13557, 13558, 13559,
    13560, 13580, 13581, 13582, 13583, 13584, 13585, 13586, 13587, 13588, 13589,
    13590, 13591, 13592, 13593, 13594, 13595, 13596, 13597, 13598, 13599, 13600,
    13601, 13602, 13603, 13604, 13605, 13606, 13607, 13608, 13609, 13610, 13611,
    13612, 13613, 13614, 13615, 13616, 13617, 13618, 13619, 13620, 13621, 13622,
    13623, 13624, 13625, 13626, 13627, 13628, 13629, 13630, 13631, 13632, 13633,
    13634, 13635, 13636, 13637, 13638, 13639, 13640, 13641, 13642, 13643, 13644,
    13645, 13646, 13647, 13648, 13649, 13650, 13651, 13652, 13653, 13654, 13655,
    13656, 13657, 13658, 13659, 13660, 13661, 13662, 13663, 13664, 13665, 13666,
    13667, 13668, 13669, 13670, 13671, 13672, 13673, 13674, 13675, 13676, 13677,
    13678, 13679, 13680, 13681, 13682, 13683, 13684, 13685, 13686, 13687, 13688,
    13689, 13690, 13691, 13692, 13693, 13694, 13695, 13696, 13697, 13698, 13699,
    13700, 13701, 13702, 13703, 13704, 13705, 13706, 13707, 13708, 13709, 13710,
    13711, 13712, 13713, 13714, 13715, 13716, 13717, 13718, 13719, 13720, 13721,
    13722, 13723, 13724, 13725, 13726, 13727, 13728, 13729, 13730, 13731, 13732,
    13733, 13734, 13735, 13736, 13737, 13738, 13739, 13740, 13741, 13742, 13743,
    13744, 13745, 13746, 13747, 13748, 13749, 13750, 13751, 13752, 13753, 13754,
    13755, 13756, 13757, 13758, 13759, 13760, 13761, 13762, 13763, 13764, 13765,
    13766, 13767, 13768, 13769, 13770, 13771, 13772, 13773, 13774, 13775, 13776,
    13777, 13778, 13779, 13780, 13781, 13782, 13783, 13784, 13785, 13786, 13787,
    13788, 13789, 13790, 13791, 13792, 13793, 13794, 13795, 13796, 13797, 13798,
    13799, 13800, 13801, 13802, 13803, 13804, 13805, 13806, 13807, 13808, 13809,
    13810, 13811, 13812, 13813, 13814, 13815, 13816, 13817, 13818, 13819, 13820,
    13821, 13822, 13823, 13824, 13825, 13826, 13827, 13828, 13829, 13830, 13831,
    13832, 13833, 13834, 13835, 13836, 13837, 13838, 13839, 13840, 13841, 13842,
    13843, 13844, 13845, 13846, 13847, 13861, 13862, 13863, 13864, 13865, 13866,
    13867, 13868, 13869, 13870, 13871, 13872, 13873, 13874, 13875, 13876, 13877,
    13878, 13879, 13880, 13881, 13882, 13883, 13884, 13885, 13886, 13887, 13888,
    13889, 13890, 13891, 13892, 13893, 13894, 13895, 13896, 13897, 13898, 13899,
    13900, 13901, 13902, 13903, 13904, 13905, 13906, 13907, 13908, 13922, 13923,
    13924, 13925, 13926, 13927, 13928, 13929, 13930, 13931, 13932, 13933, 13934,
    13935, 13936, 13937, 13938, 13939, 13940, 13941, 13942, 13943, 13944, 13954,
    13955, 13956, 13957, 13958, 13959, 13960, 13961, 13962, 13963, 13964, 13965,
    13966, 13967, 13968, 13969, 13970, 13971, 13972, 13973, 13974, 13975, 13976,
    13977, 13978, 13979, 13980, 13981, 13982, 13983, 13984, 13985, 13986, 13987,
    13988, 13989, 13990, 13991, 13992, 13993, 13994, 13995, 13996, 13997, 13998,
    13999, 14000, 14001, 14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009,
    14010, 14011, 14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019, 14020,
    14021, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] = {
    "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
    "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
    "EQUALS_GREATER", "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P",
    "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE",
    "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY",
    "ARRAY", "AS", "ASC", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT",
    "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
    "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALLED",
    "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P",
    "CHARACTER", "CHARACTERISTICS", "CHECK", "CHECKPOINT", "CLASS", "CLOSE",
    "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COMMENT",
    "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION",
    "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
    "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE", "CROSS", "CSV",
    "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
    "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
    "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DEC",
    "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED",
    "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DESC", "DICTIONARY",
    "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P",
    "DOUBLE_P", "DROP", "EACH", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
    "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
    "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXTENSION", "EXTERNAL",
    "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
    "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL",
    "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANT", "GRANTED", "GREATEST",
    "GROUP_P", "GROUPING", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P",
    "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P",
    "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
    "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
    "INSENSITIVE", "INSERT", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
    "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "KEY",
    "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING",
    "LEAKPROOF", "LEAST", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD",
    "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK_P", "LOCKED",
    "LOGGED", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "MINUTE_P",
    "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
    "NATURAL", "NCHAR", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY",
    "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P",
    "OF", "OFF", "OFFSET", "OIDS", "ON", "ONLY", "OPERATOR", "OPTION",
    "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER",
    "OVERLAPS", "OVERLAY", "OWNED", "OWNER", "PARSER", "PARTIAL", "PARTITION",
    "PASSING", "PASSWORD", "PLACING", "PLANS", "POLICY", "POSITION",
    "PRECEDING", "PRECISION", "PRESERVE", "PREPARE", "PREPARED", "PRIMARY",
    "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM", "QUOTE",
    "RANGE", "READ", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
    "REFERENCES", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME",
    "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT",
    "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
    "ROW", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH",
    "SECOND_P", "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE",
    "SERVER", "SESSION", "SESSION_USER", "SET", "SETS", "SETOF", "SHARE",
    "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME",
    "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS",
    "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", "SUBSTRING",
    "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
    "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
    "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT",
    "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P",
    "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN",
    "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING", "VACUUM",
    "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
    "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VOLATILE",
    "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT",
    "WORK", "WRAPPER", "WRITE", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
    "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT",
    "XMLSERIALIZE", "YEAR_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA",
    "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'",
    "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','", "':'", "$accept",
    "stmtblock", "stmtmulti", "stmt", "CreateRoleStmt", "opt_with",
    "OptRoleList", "AlterOptRoleList", "AlterOptRoleElem", "CreateOptRoleElem",
    "CreateUserStmt", "AlterRoleStmt", "opt_in_database", "AlterRoleSetStmt",
    "AlterUserStmt", "AlterUserSetStmt", "DropRoleStmt", "DropUserStmt",
    "CreateGroupStmt", "AlterGroupStmt", "add_drop", "DropGroupStmt",
    "CreateSchemaStmt", "OptSchemaName", "OptSchemaEltList", "schema_stmt",
    "VariableSetStmt", "set_rest", "generic_set", "set_rest_more", "var_name",
    "var_list", "var_value", "iso_level", "opt_boolean_or_string", "zone_value",
    "opt_encoding", "NonReservedWord_or_Sconst", "VariableResetStmt",
    "reset_rest", "generic_reset", "SetResetClause", "FunctionSetResetClause",
    "VariableShowStmt", "ConstraintsSetStmt", "constraints_set_list",
    "constraints_set_mode", "CheckPointStmt", "DiscardStmt", "AlterTableStmt",
    "alter_table_cmds", "alter_table_cmd", "alter_column_default",
    "opt_drop_behavior", "opt_collate_clause", "alter_using",
    "replica_identity", "reloptions", "opt_reloptions", "reloption_list",
    "reloption_elem", "AlterCompositeTypeStmt", "alter_type_cmds",
    "alter_type_cmd", "ClosePortalStmt", "CopyStmt", "copy_from", "opt_program",
    "copy_file_name", "copy_options", "copy_opt_list", "copy_opt_item",
    "opt_binary", "opt_oids", "copy_delimiter", "opt_using",
    "copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg",
    "copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "CreateStmt",
    "OptTemp", "OptTableElementList", "OptTypedTableElementList",
    "TableElementList", "TypedTableElementList", "TableElement",
    "TypedTableElement", "columnDef", "columnOptions", "ColQualList",
    "ColConstraint", "ColConstraintElem", "ConstraintAttr", "TableLikeClause",
    "TableLikeOptionList", "TableLikeOption", "TableConstraint",
    "ConstraintElem", "opt_no_inherit", "opt_column_list", "columnList",
    "columnElem", "key_match", "ExclusionConstraintList",
    "ExclusionConstraintElem", "ExclusionWhereClause", "key_actions",
    "key_update", "key_delete", "key_action", "OptInherit", "OptWith",
    "OnCommitOption", "OptTableSpace", "OptConsTableSpace", "ExistingIndex",
    "CreateAsStmt", "create_as_target", "opt_with_data", "CreateMatViewStmt",
    "create_mv_target", "OptNoLog", "RefreshMatViewStmt", "CreateSeqStmt",
    "AlterSeqStmt", "OptSeqOptList", "SeqOptList", "SeqOptElem", "opt_by",
    "NumericOnly", "NumericOnly_list", "CreatePLangStmt", "opt_trusted",
    "handler_name", "opt_inline_handler", "validator_clause", "opt_validator",
    "DropPLangStmt", "opt_procedural", "CreateTableSpaceStmt",
    "OptTableSpaceOwner", "DropTableSpaceStmt", "CreateExtensionStmt",
    "create_extension_opt_list", "create_extension_opt_item",
    "AlterExtensionStmt", "alter_extension_opt_list",
    "alter_extension_opt_item", "AlterExtensionContentsStmt", "CreateFdwStmt",
    "fdw_option", "fdw_options", "opt_fdw_options", "DropFdwStmt",
    "AlterFdwStmt", "create_generic_options", "generic_option_list",
    "alter_generic_options", "alter_generic_option_list",
    "alter_generic_option_elem", "generic_option_elem", "generic_option_name",
    "generic_option_arg", "CreateForeignServerStmt", "opt_type",
    "foreign_server_version", "opt_foreign_server_version",
    "DropForeignServerStmt", "AlterForeignServerStmt", "CreateForeignTableStmt",
    "AlterForeignTableStmt", "ImportForeignSchemaStmt",
    "import_qualification_type", "import_qualification",
    "CreateUserMappingStmt", "auth_ident", "DropUserMappingStmt",
    "AlterUserMappingStmt", "CreatePolicyStmt", "AlterPolicyStmt",
    "DropPolicyStmt", "RowSecurityOptionalExpr", "RowSecurityOptionalWithCheck",
    "RowSecurityDefaultToRole", "RowSecurityOptionalToRole",
    "RowSecurityDefaultForCmd", "row_security_cmd", "CreateTrigStmt",
    "TriggerActionTime", "TriggerEvents", "TriggerOneEvent", "TriggerForSpec",
    "TriggerForOptEach", "TriggerForType", "TriggerWhen", "TriggerFuncArgs",
    "TriggerFuncArg", "OptConstrFromTable", "ConstraintAttributeSpec",
    "ConstraintAttributeElem", "DropTrigStmt", "CreateEventTrigStmt",
    "event_trigger_when_list", "event_trigger_when_item",
    "event_trigger_value_list", "AlterEventTrigStmt", "enable_trigger",
    "CreateAssertStmt", "DropAssertStmt", "DefineStmt", "definition",
    "def_list", "def_elem", "def_arg", "old_aggr_definition", "old_aggr_list",
    "old_aggr_elem", "opt_enum_val_list", "enum_val_list", "AlterEnumStmt",
    "opt_if_not_exists", "CreateOpClassStmt", "opclass_item_list",
    "opclass_item", "opt_default", "opt_opfamily", "opclass_purpose",
    "opt_recheck", "CreateOpFamilyStmt", "AlterOpFamilyStmt",
    "opclass_drop_list", "opclass_drop", "DropOpClassStmt", "DropOpFamilyStmt",
    "DropOwnedStmt", "ReassignOwnedStmt", "DropStmt", "drop_type",
    "any_name_list", "any_name", "attrs", "type_name_list", "TruncateStmt",
    "opt_restart_seqs", "CommentStmt", "comment_type", "comment_text",
    "SecLabelStmt", "opt_provider", "security_label_type", "security_label",
    "FetchStmt", "fetch_args", "from_in", "opt_from_in", "GrantStmt",
    "RevokeStmt", "privileges", "privilege_list", "privilege",
    "privilege_target", "grantee_list", "grantee", "opt_grant_grant_option",
    "function_with_argtypes_list", "function_with_argtypes", "GrantRoleStmt",
    "RevokeRoleStmt", "opt_grant_admin_option", "opt_granted_by",
    "AlterDefaultPrivilegesStmt", "DefACLOptionList", "DefACLOption",
    "DefACLAction", "defacl_privilege_target", "IndexStmt", "opt_unique",
    "opt_concurrently", "opt_index_name", "access_method_clause",
    "index_params", "index_elem", "opt_collate", "opt_class", "opt_asc_desc",
    "opt_nulls_order", "CreateFunctionStmt", "opt_or_replace", "func_args",
    "func_args_list", "func_args_with_defaults", "func_args_with_defaults_list",
    "func_arg", "arg_class", "param_name", "func_return", "func_type",
    "func_arg_with_default", "aggr_arg", "aggr_args", "aggr_args_list",
    "createfunc_opt_list", "common_func_opt_item", "createfunc_opt_item",
    "func_as", "transform_type_list", "opt_definition", "table_func_column",
    "table_func_column_list", "AlterFunctionStmt", "alterfunc_opt_list",
    "opt_restrict", "RemoveFuncStmt", "RemoveAggrStmt", "RemoveOperStmt",
    "oper_argtypes", "any_operator", "DoStmt", "dostmt_opt_list",
    "dostmt_opt_item", "CreateCastStmt", "cast_context", "DropCastStmt",
    "opt_if_exists", "CreateTransformStmt", "transform_element_list",
    "DropTransformStmt", "ReindexStmt", "reindex_target_type",
    "reindex_target_multitable", "reindex_option_list", "reindex_option_elem",
    "AlterTblSpcStmt", "RenameStmt", "opt_column", "opt_set_data",
    "AlterObjectSchemaStmt", "AlterOwnerStmt", "RuleStmt", "RuleActionList",
    "RuleActionMulti", "RuleActionStmt", "RuleActionStmtOrEmpty", "event",
    "opt_instead", "DropRuleStmt", "NotifyStmt", "notify_payload", "ListenStmt",
    "UnlistenStmt", "TransactionStmt", "opt_transaction",
    "transaction_mode_item", "transaction_mode_list",
    "transaction_mode_list_or_empty", "ViewStmt", "opt_check_option",
    "LoadStmt", "CreatedbStmt", "createdb_opt_list", "createdb_opt_items",
    "createdb_opt_item", "createdb_opt_name", "opt_equal", "AlterDatabaseStmt",
    "AlterDatabaseSetStmt", "DropdbStmt", "AlterSystemStmt", "CreateDomainStmt",
    "AlterDomainStmt", "opt_as", "AlterTSDictionaryStmt",
    "AlterTSConfigurationStmt", "any_with", "CreateConversionStmt",
    "ClusterStmt", "cluster_index_specification", "VacuumStmt",
    "vacuum_option_list", "vacuum_option_elem", "AnalyzeStmt",
    "analyze_keyword", "opt_verbose", "opt_full", "opt_freeze", "opt_name_list",
    "ExplainStmt", "ExplainableStmt", "explain_option_list",
    "explain_option_elem", "explain_option_name", "explain_option_arg",
    "PrepareStmt", "prep_type_clause", "PreparableStmt", "ExecuteStmt",
    "execute_param_clause", "DeallocateStmt", "InsertStmt", "insert_target",
    "insert_rest", "insert_column_list", "insert_column_item",
    "opt_on_conflict", "opt_conf_expr", "returning_clause", "DeleteStmt",
    "using_clause", "LockStmt", "opt_lock", "lock_type", "opt_nowait",
    "opt_nowait_or_skip", "UpdateStmt", "set_clause_list", "set_clause",
    "single_set_clause", "multiple_set_clause", "set_target", "set_target_list",
    "DeclareCursorStmt", "cursor_name", "cursor_options", "opt_hold",
    "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
    "simple_select", "with_clause", "cte_list", "common_table_expr",
    "opt_with_clause", "into_clause", "OptTempTableName", "opt_table",
    "all_or_distinct", "distinct_clause", "opt_all_clause", "opt_sort_clause",
    "sort_clause", "sortby_list", "sortby", "select_limit", "opt_select_limit",
    "limit_clause", "offset_clause", "select_limit_value",
    "select_offset_value", "opt_select_fetch_first_value",
    "select_offset_value2", "row_or_rows", "first_or_next", "group_clause",
    "group_by_list", "group_by_item", "empty_grouping_set", "rollup_clause",
    "cube_clause", "grouping_sets_clause", "having_clause",
    "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
    "for_locking_item", "for_locking_strength", "locked_rels_list",
    "values_clause", "from_clause", "from_list", "table_ref", "joined_table",
    "alias_clause", "opt_alias_clause", "func_alias_clause", "join_type",
    "join_outer", "join_qual", "relation_expr", "relation_expr_list",
    "relation_expr_opt_alias", "relation_expr_tablesample",
    "tablesample_clause", "opt_repeatable_clause", "func_table",
    "rowsfrom_item", "rowsfrom_list", "opt_col_def_list", "opt_ordinality",
    "where_clause", "where_or_current_clause", "OptTableFuncElementList",
    "TableFuncElementList", "TableFuncElement", "Typename", "opt_array_bounds",
    "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
    "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
    "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
    "CharacterWithoutLength", "character", "opt_varying", "opt_charset",
    "ConstDatetime", "ConstInterval", "opt_timezone", "opt_interval",
    "interval_second", "a_expr", "b_expr", "c_expr", "func_application",
    "func_expr", "func_expr_windowless", "func_expr_common_subexpr",
    "xml_root_version", "opt_xml_root_standalone", "xml_attributes",
    "xml_attribute_list", "xml_attribute_el", "document_or_content",
    "xml_whitespace_option", "xmlexists_argument", "within_group_clause",
    "filter_clause", "window_clause", "window_definition_list",
    "window_definition", "over_clause", "window_specification",
    "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
    "frame_extent", "frame_bound", "row", "explicit_row", "implicit_row",
    "sub_type", "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
    "expr_list", "func_arg_list", "func_arg_expr", "type_list", "array_expr",
    "array_expr_list", "extract_list", "extract_arg", "overlay_list",
    "overlay_placing", "position_list", "substr_list", "substr_from",
    "substr_for", "trim_list", "in_expr", "case_expr", "when_clause_list",
    "when_clause", "case_default", "case_arg", "columnref", "indirection_el",
    "indirection", "opt_indirection", "opt_asymmetric", "ctext_expr",
    "ctext_expr_list", "ctext_row", "opt_target_list", "target_list",
    "target_el", "qualified_name_list", "qualified_name", "name_list", "name",
    "database_name", "access_method", "attr_name", "index_name", "file_name",
    "func_name", "AexprConst", "Iconst", "Sconst", "SignedIconst", "RoleId",
    "RoleSpec", "role_list", "ColId", "type_function_name", "NonReservedWord",
    "ColLabel", "unreserved_keyword", "col_name_keyword",
    "type_func_name_keyword", "reserved_keyword", YY_NULLPTR};
#endif

#ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] = {
    0,   256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
    270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
    285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
    300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
    315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
    330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
    345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
    360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
    375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
    390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
    405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
    420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
    435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
    450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
    465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
    480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
    495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
    510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
    525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
    540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
    555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
    570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
    585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599,
    600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
    615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
    630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
    645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
    660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
    675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
    690, 691, 60,  62,  61,  692, 43,  45,  42,  47,  37,  94,  693, 91,  93,
    40,  41,  46,  59,  44,  58};
#endif

#define YYPACT_NINF -4380

#define yypact_value_is_default(Yystate) (!!((Yystate) == (-4380)))

#define YYTABLE_NINF -2391

#define yytable_value_is_error(Yytable_value) (!!((Yytable_value) == (-2391)))

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] = {
    8259,  1265,  11565, -4380, -4380, 1265,  -4380, 62578, 7,     163,   712,
    182,   11949, 63009, 69905, 225,   309,   9322,  1265,  69905, 1724,  47924,
    59561, 684,   69905, 1036,  813,   47924, 69905, 70336, 974,   1063,  733,
    70767, 63440, 58268, 888,   69905, 1095,  1240,  71198, 63871, 972,   64302,
    813,   44486, 117,   1049,  71629, 69905, 2010,  1538,  1162,  -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, 7,     -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, 1666,  -4380, 1003,  2158,  27,    769,   1189,  -4380, -4380, -4380,
    56113, 69905, 69905, 69905, 1407,  69905, 1465,  69905, 196,   56113, 51803,
    64733, 1584,  1457,  41032, 72060, -4380, 50510, 69905, 69905, 72491, 69905,
    1523,  60854, 69905, 1627,  69905, 69905, 52234, 72922, 1760,  1544,  -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, 69905, 10886, 1036,  -4380, -4380, 69905, 1588,
    56113, 69905, 1526,  69905, 1629,  69905, -4380, 69905, 1649,  73353, 320,
    1322,  51803, 1679,  41464, 1726,  69905, 51803, 73784, 69905, 69905, -4380,
    -4380, 1730,  69905, 69905, -4380, 1849,  52665, 1183,  1853,  1987,  1921,
    849,   -4380, 65164, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    55251, 309,   -4380, -4380, 56544, 69905, 1922,  -4380, -4380, 74215, 88821,
    1735,  -4380, 441,   56975, 53096, 2051,  1711,  41896, 2057,  74646, 53527,
    75077, -4380, -4380, 75508, -4380, 75939, 1815,  1922,  76370, 89240, 53958,
    -4380, 1942,  76801, -4380, 1721,  1242,  1244,  37564, -4380, -4380, -4380,
    7,     -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, 368,   1419,
    203,   210,   211,   -4380, -4380, 214,   215,   218,   368,   2174,  2174,
    -4380, 69905, -4380, -4380, 1419,  45,    1747,  1747,  1747,  1905,  12,
    -4380, 1747,  1877,  -4380, -4380, -4380, -4380, 64302, -4380, 1816,  1036,
    1828,  2238,  1874,  -4380, -4380, -4380, -4380, -4380, 1892,  69905, 69905,
    69905, -4380, -4380, 2257,  1881,  2128,  1883,  -4380, -4380, -4380, 2075,
    2080,  2092,  98,    1036,  1988,  -4380, 2213,  -4380, 2112,  27385, 27385,
    1036,  65595, 77232, 223,   55251, 1036,  66026, 1945,  1383,  2126,  -4380,
    -4380, -4380, 734,   -4380, 2352,  1976,  2207,  1883,  1544,  38865, -4380,
    2006,  1152,  64302, -4380, -4380, -4380, 400,   2274,  27833, -4380, 69905,
    2011,  -4380, 2035,  2011,  2024,  2044,  27,    -4380, 8259,  69905, 1308,
    1308,  2450,  1308,  1672,  1773,  -4380, 2216,  -4380, 2357,  2322,  64302,
    1049,  226,   -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, 2110,  1152,  -4380, 233,   -4380, 1182,  2073,  1510,
    2182,  -4380, -4380, 900,   69905, 2199,  204,   530,   2143,  66457, 3509,
    2129,  -4380, -4380, -4380, 2277,  1030,  -4380, -4380, -4380, -4380, 2407,
    2447,  4955,  308,   66888, -4380, -4380, -4380, -4380, 69905, 69905, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, 2144,  -4380, -4380,
    2149,  2454,  2342,  2429,  2304,  929,   2356,  1299,  2497,  12118, 87,
    67319, 69905, 2459,  2510,  5531,  1486,  837,   2394,  1021,  2500,  2361,
    1801,  2517,  5546,  69905, -4380, 2463,  2563,  77,    -4380, 176,   -4380,
    2284,  2427,  713,   56113, 2237,  -4380, -4380, 69905, -4380, -4380, 89659,
    2310,  -4380, 670,   56113, -4380, 2440,  2290,  42328, 69905, -4380, 69905,
    -4380, -4380, -4380, -4380, -4380, 2374,  2549,  69905, 89659, -4380, 2498,
    69905, -4380, 1747,  2415,  2258,  2645,  89659, 115,   69905, 1028,  2675,
    69905, 2470,  1028,  2298,  77663, -4380, -4380, 1028,  -4380, -4380, -4380,
    69905, 69905, 2268,  1382,  2462,  1028,  2480,  2688,  2690,  2350,  2464,
    945,   1016,  178,   2581,  1028,  2327,  78094, 78525, 69905, 2332,  69905,
    2664,  56113, 69905, 2589,  -4380, 2453,  -4380, -4380, 1437,  -4380, -4380,
    -4380, -4380, 2603,  2110,  237,   2605,  2299,  2606,  -4380, -4380, -4380,
    2346,  -4380, 2346,  2346,  2302,  2302,  2471,  2303,  2614,  -4380, -4380,
    -4380, 2162,  2346,  2302,  -4380, 90497, -4380, 1444,  1484,  -4380, 220,
    -4380, 2726,  -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, 154,
    -4380, 1010,  1763,  -4380, -4380, 2344,  -4380, 2624,  2129,  2625,  -4380,
    2313,  78956, -4380, 79387, 79818, 2630,  2144,  51803, 2631,  2516,  2632,
    2313,  2635,  2519,  2637,  237,   2641,  -4380, 946,   2638,  2644,  2532,
    2652,  220,   2653,  1606,  2313,  55682, 2654,  261,   -4380, 29625, -4380,
    2434,  -4380, 1049,  -4380, 1454,  -4380, 47062, -4380, 1244,  1419,  -4380,
    69905, 1419,  69905, 1419,  69905, 1419,  69905, 1419,  69905, 69905, 69905,
    1419,  -4380, -4380, -4380, 69905, 2347,  69905, 69905, -4380, -4380, -4380,
    59992, 51803, 60423, -4380, 69905, -4380, 344,   1036,  -4380, -4380, 89659,
    2763,  51803, 2664,  -4380, 1481,  -4380, -4380, -4380, -4380, -4380, -4380,
    2584,  69905, 2649,  2650,  59992, 51803, -4380, 80249, 55251, 2552,  2362,
    -4380, -4380, -4380, -4380, -4380, 1740,  2802,  280,   2808,  29625, 2364,
    200,   200,   2365,  2663,  -4380, -4380, -4380, 247,   2369,  2370,  -4380,
    245,   245,   2371,  2372,  -4380, 250,   2373,  2375,  2819,  2823,  262,
    2380,  2382,  2383,  2162,  200,   29625, -4380, 2384,  245,   2385,  2386,
    2387,  2834,  2390,  -4380, 2837,  2395,  335,   352,   2397,  2398,  -4380,
    2371,  -4380, 216,   2399,  2403,  2405,  2411,  2413,  2417,  2418,  2419,
    29625, 29625, 29625, -4380, 26041, 1152,  1036,  -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, 272,   4166,  -4380, 2428,  -4380, -4380, 2588,
    -4380, -4380, 29625, -4380, -4380, 80,    -4380, 276,   -4380, -4380, -4380,
    1152,  2671,  2420,  -4380, -4380, 274,   2423,  -4380, 1803,  -4380, -4380,
    -4380, -4380, -4380, -4380, 54389, 2836,  -4380, 399,   1036,  176,   283,
    2780,  46200, 46631, -4380, -4380, 2668,  -4380, 69905, -4380, -4380, 29625,
    44055, -4380, 1152,  138,   -4380, -4380, -4380, 1531,  -4380, -4380, -4380,
    7,     -4380, 11425, -4380, 1537,  2011,  69905, 69905, 2844,  -4380, -4380,
    -4380, 2035,  -4380, -4380, 27,    27,    29625, 27,    755,   1442,  28281,
    29625, 2725,  2628,  1141,  996,   2733,  -4380, 2633,  1672,  1773,  64302,
    69905, 80680, 2556,  -4380, 44917, 1517,  1152,  2520,  2525,  2564,  48786,
    2437,  2527,  2531,  2577,  -4380, 2692,  -4380, -4380, 2537,  2539,  81111,
    -4380, -4380, 784,   -4380, -4380, -4380, 784,   -4380, 2475,  1456,  1374,
    1089,  2544,  256,   1071,  2838,  -4380, 766,   2594,  -4380, -4380, -4380,
    6366,  69905, 2781,  5959,  2665,  308,   2598,  -4380, -4380, 2715,  2555,
    2557,  2680,  308,   1114,  81542, -4380, -4380, -4380, -4380, -4380, -4380,
    1707,  24755, -4380, 2559,  2538,  2571,  69905, 57406, 343,   2676,  1522,
    1859,  643,   69905, 2752,  2694,  69905, 2496,  2578,  2580,  2782,  2504,
    1361,  2881,  2509,  -4380, -4380, -4380, 1731,  2697,  -4380, 2784,  2825,
    6728,  2574,  2576,  87983, 852,   42760, 69905, 69905, 2871,  1546,  2602,
    -4380, -4380, -4380, 1546,  69905, 2604,  2609,  69905, 308,   -4380, 2931,
    308,   308,   1594,  2934,  2616,  392,   1572,  1028,  2509,  1645,  -4380,
    2619,  2622,  474,   -4380, 2735,  -4380, -4380, 1252,  2634,  64302, 153,
    1701,  2509,  2636,  2639,  2504,  2504,  69905, 69905, 69905, 69905, 69905,
    207,   2957,  2962,  2643,  213,   2683,  2554,  -4380, 50941, 2648,  77232,
    -4380, -4380, 69905, 2651,  2116,  2509,  1436,  1496,  -4380, -4380, -4380,
    1544,  -4380, 69905, -4380, 69905, 2110,  89659, 2753,  2809,  -4380, 2595,
    -4380, 2129,  308,   -4380, 69905, 69905, 2144,  2759,  709,   973,   89659,
    2760,  2821,  69905, 2824,  2611,  -4380, 473,   45343, -4380, 2268,  2583,
    2996,  69905, 48786, -4380, 3011,  784,   -4380, 89659, 2778,  2896,  -4380,
    69905, 2794,  2591,  -4380, 2930,  2646,  -4380, -4380, 737,   69905, -4380,
    2902,  51803, 277,   1036,  2640,  51803, 2828,  69905, 69905, 69905, 69905,
    -4380, -4380, 2792,  174,   124,   -4380, 50941, -4380, 69905, 2804,  1645,
    2810,  3018,  48,    1747,  81973, 2903,  -4380, 82404, 2607,  3023,  89659,
    2852,  -4380, 1843,  -4380, 2737,  -4380, 56113, 237,   -4380, -4380, -4380,
    -4380, 89659, 69905, -4380, 2613,  -4380, -4380, 29625, -4380, -4380, -4380,
    2174,  -4380, 89659, 2346,  2346,  -4380, -4380, 3031,  2698,  2700,  2174,
    -4380, 2174,  -4380, 89659, -4380, 2620,  2626,  2734,  2174,  -4380, 2702,
    2703,  2704,  -4380, 2623,  2705,  2174,  -4380, -4380, 1858,  -4380, 82835,
    56113, 237,   51803, 51803, 2938,  261,   2939,  2686,  2942,  2691,  42760,
    237,   297,   69905, 69905, 51803, 69905, 69905, 69905, -4380, 69905, -4380,
    -4380, -4380, -4380, 89659, 69905, 69905, 89659, -4380, 51803, 50941, 2947,
    2948,  237,   69905, 69905, -4380, 11425, 1551,  83266, 1244,  54820, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, 69905, -4380, 69905, -4380,
    69905, -4380, 69905, -4380, 69905, -4380, -4380, -4380, 69905, -4380, 69905,
    1617,  -4380, -4380, 1640,  142,   69905, 69905, 197,   56113, 69905, 2841,
    69905, 69905, 69905, 69905, 69905, 2717,  2423,  1048,  -4380, 775,   818,
    64302, 2849,  -4380, -4380, 1673,  2010,  884,   69905, 1250,  1892,  -4380,
    -4380, 60423, 59561, 2914,  133,   69905, -4380, -4380, 3512,  29625, 1152,
    26937, -4380, -4380, 11425, 2689,  29625, 29625, 2658,  2174,  2174,  -4380,
    961,   29625, 29625, 29625, 2174,  2174,  7740,  29625, 42760, 29625, 32761,
    22989, 29625, 29625, 26489, -4380, 29625, 2863,  34099, 29625, 283,   2866,
    29625, 283,   7740,  3098,  3098,  764,   3455,  2656,  1152,  -4380, 2174,
    1042,  -4380, 238,   89659, 29625, 29625, 29625, 29625, 48786, 2740,  229,
    69905, 29625, 2667,  2109,  -4380, 29625, -4380, 2670,  29625, 2742,  1027,
    29625, 29625, 29625, 29625, 29625, 29625, 29625, 29625, 29625, -4380, 34965,
    435,   2952,  2964,  22,    436,   67750, 27385, 2963,  22091, -4380, 296,
    2963,  -4380, -4380, -4380, 69905, 2836,  -4380, -4380, 2747,  -4380, -4380,
    -4380, -4380, -4380, 284,   -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    2672,  -4380, -4380, -4380, -4380, 2672,  -4380, 2673,  2865,  -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, 2950,  2954,  237,   69905,
    400,   61285, -4380, 27833, -4380, 1713,  -4380, 2679,  -4380, 2933,  -4380,
    2677,  -4380, 9270,  2933,  -4380, -4380, 336,   2793,  2928,  2875,  -4380,
    -4380, -4380, 2682,  11425, -4380, 1694,  11425, 1913,  -4380, -4380, -4380,
    -4380, -4380, -4380, 1161,  -4380, 69905, 1165,  2725,  996,   2741,  893,
    3103,  69905, -4380, 39298, 2873,  -4380, 3091,  -4380, 90497, -4380, 2693,
    -4380, 90078, 86714, -4380, -4380, 894,   -4380, 976,   2769,  2774,  2826,
    51803, 69905, 69905, -4380, 48786, 51803, 69905, 69905, -4380, 51803, 69905,
    69905, -4380, -4380, -4380, -4380, -4380, 47493, 43,    59561, 2829,  58699,
    -4380, -4380, 2695,  69905, 2756,  2943,  2949,  853,   -4380, -4380, 83697,
    -4380, 2906,  51803, 69905, 69905, 29625, 2907,  69905, 69905, -4380, 304,
    2785,  2786,  -4380, 69905, 2787,  56113, 2707,  69905, 69905, 89659, 2783,
    765,   56113, 2754,  43192, 69905, 69905, 69905, 69905, 2839,  3010,  89659,
    69905, 2959,  1181,  64302, 164,   2233,  2509,  2915,  -4380, 1125,  -4380,
    51803, 69905, 2909,  -4380, -4380, -4380, 68181, 3126,  2827,  -4380, -4380,
    84128, -4380, -4380, -4380, 1714,  -4380, 51803, 51803, 69905, 7203,  69905,
    924,   -4380, -4380, 89659, -4380, 69905, 69905, 69905, 2956,  69905, 61716,
    84559, 84990, 66,    515,   2965,  69905, 62147, -4380, 69905, -4380, -4380,
    49217, 51803, 69905, 797,   48786, -4380, -4380, 69905, -4380, 2912,  762,
    -4380, 69905, 2297,  -4380, 2805,  2812,  69905, 241,   2312,  2509,  69905,
    69905, 2727,  1722,  2806,  2858,  -4380, 2925,  511,   69905, -4380, 51803,
    1074,  -4380, 2880,  51803, 69905, 12230, -4380, -4380, 308,   -4380, -4380,
    -4380, -4380, -4380, 69905, 69905, 308,   69905, 308,   1434,  -4380, 51803,
    69905, -4380, -4380, -4380, 69905, 7692,  69905, 69905, 69905, 69905, 51803,
    69905, -4380, -4380, 1204,  1295,  1554,  1582,  2882,  69905, 3013,  69905,
    85421, 51803, 69905, 69905, 69905, 1595,  -4380, 2856,  -4380, 51803, 1074,
    7834,  69905, 69905, 2817,  2818,  255,   2897,  -4380, -4380, -4380, -4380,
    -4380, -4380, 2993,  3160,  85852, 496,   -4380, 2995,  2997,  2801,  2803,
    2999,  69905, 496,   69905, -4380, -4380, -4380, -4380, 2994,  69905, 496,
    3001,  496,   2951,  147,   -4380, -4380, 1028,  -4380, 2766,  1727,  -4380,
    -4380, 29625, 89659, -4380, 1728,  -4380, 2768,  174,   -4380, -4380, 48786,
    69905, 694,   718,   3071,  57837, 873,   3066,  69905, 2813,  69905, 3067,
    873,   69905, -4380, 1115,  59561, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, 3068,  -4380, 1036,  2268,  2268,  2268,  2268,  -4380,
    -4380, -4380, -4380, 2970,  1591,  -4380, 2776,  2268,  69905, 2894,  873,
    2779,  3087,  -4380, 1645,  3089,  719,   69905, 57837, 1939,  2816,  2988,
    3198,  1747,  1036,  2990,  2977,  -4380, 25174, 4212,  2978,  3030,  55251,
    3069,  3070,  3085,  -4380, 2110,  -4380, 3204,  -4380, 29625, 1738,  2791,
    220,   -4380, -4380, 2795,  2626,  2811,  2820,  2799,  2800,  -4380, 2174,
    208,   69905, 2807,  1214,  107,   2919,  2174,  3020,  2814,  -4380, 3111,
    237,   2129,  -4380, 2313,  -4380, 69905, -4380, 69905, 69905, 69905, 69905,
    2144,  -4380, -4380, 2998,  237,   2313,  3004,  237,   237,   -4380, 3048,
    3006,  237,   220,   2313,  2924,  3116,  55251, -4380, 261,   -4380, -4380,
    29625, 3029,  1747,  -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    1744,  -4380, 69905, -4380, 3094,  3095,  3110,  2846,  2847,  2864,  69905,
    2851,  -4380, 2846,  308,   2846,  2423,  2423,  2846,  2847,  51372, 3269,
    3129,  -4380, 2940,  2848,  3139,  171,   -4380, 183,   60,    3079,  -4380,
    -4380, -4380, -4380, 89659, -4380, -4380, -4380, -4380, -4380, 51803, 2900,
    69905, 69905, -4380, 136,   3058,  2867,  51372, 3265,  237,   -4380, 56113,
    -4380, -4380, 89659, 2941,  2960,  56113, 3072,  2918,  -4380, -4380, -4380,
    -4380, -4380, 89659, -4380, 3120,  69905, 1752,  -4380, -4380, 1506,  -4380,
    1519,  29625, 152,   -4380, 9905,  1754,  29625, 2872,  2887,  -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, 2888,  3173,  -4380, 1756,  1758,  1766,
    2889,  2890,  3956,  2893,  10093, 2895,  2892,  32761, 32761, 26041, 1120,
    -4380, 32761, 2898,  3076,  1771,  9521,  2899,  2901,  10374, 28729, 29625,
    28729, 28729, 10458, 2899,  2904,  1777,  48786, 3075,  10815, 1813,  -4380,
    29625, 48786, 4521,  29625, -4380, 29625, 2905,  -4380, -4380, 1151,  1151,
    1151,  7740,  -4380, 2921,  -4380, 32761, 32761, -4380, 1954,  26041, -4380,
    -4380, 3189,  -4380, -4380, 2012,  -4380, 2908,  -4380, -4380, 2515,  42760,
    3666,  29625, 243,   29625, 2667,  29625, 2975,  1151,  1151,  1151,  445,
    445,   234,   234,   234,   367,   436,   -4380, -4380, -4380, 2911,  2913,
    2916,  3096,  2917,  29625, -4380, 1994,  2069,  69905, 2528,  2553,  3296,
    -4380, -4380, -4380, 35832, 2945,  29625, 29625, 29625, 2920,  -4380, 2230,
    11425, 79,    -4380, 288,   2945,  -4380, 1544,  2174,  1042,  47062, -4380,
    -4380, 29625, -4380, -4380, -4380, 2035,  -4380, -4380, -4380, -4380, -4380,
    69905, 2010,  29625, -4380, -4380, 1504,  2935,  29625, 1694,  -4380, -4380,
    2971,  -4380, 29625, -4380, -4380, -4380, 2423,  -4380, 3134,  -4380, -4380,
    -4380, 35832, 2961,  2966,  38431, 3114,  -4380, 69905, -4380, 69905, 157,
    -4380, -4380, -4380, 2936,  -4380, -4380, 86714, 1763,  -4380, 90078, -4380,
    90078, -4380, 1763,  3317,  -4380, 86714, 1656,  51803, 69905, 69905, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, 51803, 51803, 3118,  69905, 3117,  3119,  29625, 227,   69905, 2929,
    2932,  1118,  3197,  69905, -4380, 3240,  237,   -4380, -4380, 3012,  -4380,
    11425, -4380, -4380, -4380, -4380, -4380, 51803, 69905, -4380, 55251, -4380,
    2110,  89659, -4380, -4380, -4380, 69905, 2967,  69905, -4380, 69905, 69905,
    69905, 2144,  -4380, -4380, -4380, -4380, 1008,  89659, -4380, -4380, 69905,
    69905, 127,   3014,  3015,  69905, -4380, 645,   2735,  8030,  69905, 69905,
    69905, 3192,  -4380, -4380, -4380, -4380, 3141,  -4380, -4380, 86714, -4380,
    2313,  642,   3021,  2509,  -4380, 3131,  -4380, 1262,  -4380, 3063,  -4380,
    -4380, -4380, -4380, 3254,  237,   3255,  237,   69905, 69905, 69905, 69905,
    3078,  -4380, -4380, -4380, -4380, -4380, 48786, 48786, 48786, 1814,  -4380,
    -4380, 1036,  -4380, -4380, -4380, -4380, -4380, -4380, 3215,  -4380, 1820,
    -4380, 839,   -4380, -4380, -4380, -4380, -4380, -4380, 51803, 69905, 8372,
    69905, 69905, 69905, 1535,  -4380, 936,   89659, -4380, 88402, 51803, 69905,
    69905, 3026,  51803, 3008,  -4380, -4380, -4380, 3183,  3130,  -4380, 540,
    3133,  51803, 3019,  -4380, 3035,  -4380, -4380, 3040,  2414,  2509,  1645,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, 1224,  177,   2435,
    2509,  3044,  -4380, 3046,  -4380, -4380, -4380, 3193,  3196,  3200,  3052,
    3055,  3105,  3057,  3060,  3115,  -4380, 3062,  3121,  3065,  3123,  3082,
    237,   89659, 3207,  1036,  3106,  3300,  237,   -4380, 3088,  -4380, -4380,
    3411,  -4380, 69905, -4380, 3101,  2579,  2509,  -4380, -4380, 51803, 69905,
    -4380, -4380, -4380, 496,   89659, 69905, 3259,  -4380, -4380, -4380, 496,
    496,   69905, 69905, 496,   3263,  -4380, 3266,  69905, 3267,  -4380, 496,
    -4380, -4380, -4380, -4380, 2415,  3025,  40600, -4380, 3466,  5072,  3027,
    -4380, 48786, 40600, 1741,  1788,  150,   1028,  55251, 69905, 55251, -4380,
    718,   3131,  69905, 69905, 3032,  3028,  -4380, -4380, -4380, -4380, 51803,
    192,   51803, 2174,  -4380, -4380, 3097,  -4380, 69905, 1747,  206,   3108,
    3442,  2690,  277,   3184,  1485,  3389,  2816,  -4380, -4380, -4380, -4380,
    69905, 69905, 174,   1036,  -4380, 3047,  3043,  -4380, 69905, 69905, 69905,
    69905, 69905, 2900,  3050,  3051,  89659, 61,    3246,  3247,  2504,  3469,
    3365,  2010,  2816,  3135,  3366,  69905, -4380, 1825,  144,   -4380, 1036,
    55251, 87133, 3356,  -4380, 4167,  -4380, -4380, 170,   69905, 3342,  -4380,
    -4380, 2010,  237,   89659, 1829,  -4380, -4380, -4380, 2174,  -4380, -4380,
    1561,  1561,  3073,  -4380, 3074,  -4380, 3449,  -4380, -4380, -4380, -4380,
    -4380, -4380, 3061,  -4380, -4380, 69905, -4380, 237,   261,   3122,  237,
    3124,  237,   237,   69905, -4380, 69905, -4380, -4380, 69905, 69905, -4380,
    -4380, 69905, 50941, 237,   -4380, 11425, 3373,  -4380, -4380, 3191,  3195,
    3202,  69905, 2846,  56113, -4380, 3084,  51803, 1076,  -4380, -4380, 3256,
    -4380, -4380, 64302, 3188,  -4380, -4380, -4380, -4380, 3377,  3385,  -4380,
    -4380, -4380, 759,   -4380, -4380, -4380, 51803, 59992, 319,   51803, -4380,
    2110,  3329,  -4380, -4380, 2129,  308,   -4380, 3338,  69905, 3339,  -4380,
    -4380, -4380, 3099,  11377, 29625, -4380, 3412,  89659, -4380, 5190,  -4380,
    -4380, -4380, 29625, -4380, -4380, -4380, -4380, -4380, 29625, -4380, 29625,
    3388,  -4380, 23438, 3532,  3532,  3102,  89659, 32761, 32761, 32761, 32761,
    1413,  2385,  32761, 32761, 32761, 32761, 32761, 32761, 32761, 32761, 32761,
    33657, 405,   -4380, 3279,  29625, 29625, 3396,  3388,  -4380, 89659, 3100,
    2899,  3104,  3107,  29625, -4380, -4380, 1833,  34532, 3113,  48786, -4380,
    29625, 9589,  1837,  3143,  11397, 1152,  5281,  1036,  29625, 2025,  2068,
    29625, 1867,  29625, 3395,  -4380, -4380, -4380, 3109,  -4380, -4380, 89659,
    29625, 3125,  4216,  32761, 32761, 4422,  -4380, 4973,  29625, 26041, -4380,
    3293,  3149,  39731, -4380, 23887, 3112,  813,   813,   813,   813,   -4380,
    69905, 69905, 69905, 36265, 3404,  35398, 68612, 3127,  1834,  -4380, 68612,
    -4380, 69043, -4380, 3136,  -4380, 3128,  1152,  29625, 3399,  86,    86,
    3293,  -4380, 29625, 29625, 29177, 3138,  -4380, 3399,  176,   3142,  -4380,
    -4380, 9181,  -4380, -4380, 3150,  -4380, 3137,  -4380, 2935,  1174,  -4380,
    5631,  3308,  -4380, -4380, -4380, 3127,  30073, 3261,  -4380, 1869,  -4380,
    -4380, 3501,  3261,  -4380, -4380, 1873,  39298, 2961,  27833, 1152,  1875,
    1670,  -4380, -4380, 86714, -4380, 3203,  -4380, -4380, -4380, 2313,  2313,
    1056,  2846,  3437,  1056,  5749,  -4380, -4380, 36698, 69905, 69905, -4380,
    69905, 1879,  1557,  69905, -4380, 69905, -4380, -4380, -4380, -4380, 3557,
    -4380, 69905, -4380, -4380, 3210,  3212,  -4380, 69905, 69905, 69905, 69905,
    3387,  -4380, -4380, 2073,  -4380, -4380, 51803, 69905, -4380, -4380, -4380,
    249,   2669,  2509,  -4380, 3227,  -4380, -4380, 3419,  -4380, 3551,  3248,
    69905, 3162,  -4380, 1557,  246,   2504,  967,   -4380, -4380, 3234,  -4380,
    69905, -4380, 69905, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, 49217, -4380, -4380, 69905, -4380, 48786, 40600, 48786, -4380,
    1336,  281,   2699,  2509,  -4380, 3249,  -4380, 3251,  3252,  3302,  1110,
    1004,  3258,  3260,  3303,  3177,  3181,  3186,  -4380, -4380, 3328,  69905,
    2313,  3190,  3223,  368,   1036,  -4380, -4380, 1036,  2313,  1036,  69905,
    69905, 69905, 3587,  3276,  69905, 69905, 69905, 69905, 69905, 69905, 3489,
    172,   1751,  51803, 69905, 69905, 51803, 69905, 69905, 69905, 69905, 69905,
    69905, 69905, -4380, 3573,  3503,  1699,  3543,  3268,  69905, -4380, 69905,
    2735,  69905, 69905, -4380, -4380, -4380, 3201,  3445,  496,   -4380, -4380,
    3447,  3448,  -4380, 496,   496,   3453,  496,   -4380, 473,   48786, -4380,
    2569,  3137,  2174,  1731,  -4380, -4380, -4380, -4380, -4380, -4380, 2766,
    -4380, -4380, 2026,  -4380, -4380, 69905, 3205,  69905, 69905, 32761, -4380,
    1516,  264,   -4380, 3456,  69905, 3245,  -4380, -4380, -4380, 3372,  69905,
    -4380, -4380, -4380, -4380, -4380, 3218,  -4380, 3484,  57837, 2313,  51803,
    51803, 2313,  -4380, 89659, 3226,  2816,  -4380, -4380, -4380, -4380, -4380,
    -4380, 51803, 3008,  51803, 277,   1285,  86283, 3270,  -4380, 3219,  3525,
    -4380, 3228,  3233,  -4380, -4380, 69905, 3131,  1889,  1645,  3645,  69,
    1721,  -4380, 59130, 1939,  3484,  -4380, -4380, -4380, 3615,  3326,  -4380,
    2010,  69905, 2900,  3326,  1036,  69905, 2756,  -4380, 86714, 29625, 29625,
    -4380, 3238,  -4380, 3244,  5770,  -4380, 3312,  3242,  2268,  -4380, -4380,
    -4380, -4380, -4380, -4380, 3324,  3250,  69905, -4380, -4380, 3253,  -4380,
    3273,  -4380, -4380, -4380, -4380, -4380, -4380, 237,   -4380, -4380, 69905,
    -4380, 69905, -4380, -4380, 237,   237,   237,   237,   -4380, 3368,  -4380,
    69905, 69905, 69905, 69905, 2846,  -4380, 308,   -4380, 3536,  51372, -4380,
    -4380, 1894,  69905, -4380, -4380, -4380, 3601,  133,   3547,  -4380, -4380,
    3506,  806,   3508,  3513,  806,   3515,  806,   -4380, 29625, 11425, -4380,
    3272,  -4380, 11425, 5891,  11425, 3396,  -4380, 1895,  29625, -4380, 531,
    531,   531,   2891,  3559,  -4380, 1433,  3274,  531,   531,   531,   351,
    351,   193,   193,   193,   3532,  405,   11425, 11425, -4380, -4380, 3275,
    -4380, -4380, -4380, 2899,  -4380, 30521, 3425,  3667,  -4380, -4380, -4380,
    3314,  3315,  3278,  -4380, 29625, 30969, 3277,  90497, 3461,  -4380, 1269,
    29625, 29625, 1469,  -4380, 10317, 29625, 89659, 1920,  1469,  455,   29625,
    2772,  2843,  29625, 29625, 5304,  6232,  3281,  29625, 87552, -4380, -4380,
    -4380, 1925,  29625, 69905, 69905, 69905, 69905, -4380, -4380, -4380, 68612,
    69043, 3283,  24321, 1834,  3284,  69905, -4380, -4380, 3287,  35832, 3530,
    3471,  -4380, 35832, 3471,  1459,  3471,  3535,  3376,  40164, -4380, -4380,
    3292,  3478,  -4380, 22091, 1709,  11425, 3693,  3577,  29625, 3299,  3301,
    3304,  11425, 11425, 29625, -4380, 1036,  3577,  1036,  -4380, -4380, 42760,
    -4380, -4380, -4380, -4380, -4380, 3497,  11425, 27385, -4380, 2010,  69905,
    1152,  88,    -4380, 3318,  69905, -4380, 3261,  -4380, -4380, 3371,  1931,
    -4380, -4380, -4380, -4380, -4380, 3383,  59561, 3600,  -4380, 29625, 1935,
    -4380, 3344,  3690,  356,   1952,  1953,  1557,  -4380, 3245,  -4380, 1542,
    3576,  381,   -4380, 237,   -4380, 89659, -4380, 69905, 69905, -4380, -4380,
    -4380, -4380, 69905, 2437,  -4380, -4380, 69905, 69905, 69905, 69905, -4380,
    51803, 69905, -4380, 48786, 1788,  3514,  -4380, -4380, 3516,  368,   69905,
    -4380, 89659, 237,   237,   -4380, -4380, -4380, -4380, 3323,  3712,  3401,
    69905, 69905, 69905, 69905, 51803, 69905, 69905, 2174,  2174,  89659, 3313,
    -4380, 2174,  2174,  3316,  -4380, 51803, 69905, 69905, -4380, -4380, -4380,
    3398,  -4380, 29625, 3704,  -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, 51803, 69905, 3400,  -4380, 3402,  -4380, -4380, -4380, 69905, 69905,
    69905, 69905, 3628,  -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, 69905, -4380, -4380, 1036,  1036,  89659, 237,   237,
    -4380, -4380, -4380, 3571,  496,   -4380, 496,   496,   -4380, -4380, 496,
    -4380, 311,   1957,  -4380, 37131, -4380, -4380, 2675,  1036,  2675,  1586,
    -4380, -4380, 2675,  -4380, 2675,  -4380, 1557,  1688,  3614,  3618,  29625,
    -4380, 710,   2891,  -4380, -4380, -4380, -4380, 3245,  1747,  3382,  56113,
    315,   -4380, 3597,  694,   57837, 267,   3330,  3446,  -4380, 2313,  2313,
    3386,  69905, 3748,  2313,  3223,  -4380, 3541,  73,    69905, 3659,  3378,
    -4380, 1036,  -4380, -4380, 2816,  -4380, 2010,  69905, 57837, 2900,  1973,
    -4380, -4380, -4380, 3375,  3247,  1939,  794,   69905, -4380, 3379,  3752,
    -4380, -4380, 3633,  3534,  3343,  -4380, 11425, 11425, 1036,  90916, 4167,
    89659, 3646,  -4380, 69905, 148,   3610,  237,   -4380, -4380, 237,   237,
    -4380, -4380, -4380, -4380, 69905, 2846,  2846,  2846,  -4380, 3539,  -4380,
    -4380, 3602,  -4380, 237,   51372, 806,   -4380, -4380, -4380, 806,   806,
    -4380, 806,   -4380, 11425, -4380, -4380, -4380, -4380, 6796,  32761, 3647,
    -4380, 3353,  89659, -4380, 3354,  1978,  1985,  34099, 3507,  -4380, -4380,
    -4380, 6824,  3405,  11425, 3459,  3358,  3360,  1469,  1469,  10317, 1991,
    -4380, 1469,  29625, 29625, 1469,  1469,  29625, -4380, -4380, 7402,  3538,
    -4380, -4380, 7452,  -4380, -4380, -4380, -4380, -4380, -4380, 49648, 68612,
    3364,  69905, 1834,  35832, -4380, -4380, 1461,  -4380, 35832, 3612,  -4380,
    35832, 69905, -4380, 69905, 3367,  69905, -4380, 79,    31417, 29625, 3407,
    -4380, -4380, -4380, 3293,  -4380, 3407,  -4380, 3374,  69905, 2420,  -4380,
    -4380, 3737,  36698, 3700,  3384,  -4380, -4380, -4380, -4380, 51372, 3566,
    51372, 1557,  7604,  3245,  36698, 43624, 69905, 69474, 69474, 3531,  3245,
    3382,  -4380, -4380, -4380, -4380, -4380, -4380, 3393,  -4380, -4380, -4380,
    -4380, 3460,  -4380, -4380, 686,   2849,  1996,  -4380, -4380, -4380, -4380,
    -4380, 3573,  -4380, -4380, 40600, 51803, 69905, -4380, 3462,  -4380, -4380,
    -4380, -4380, -4380, 37998, 42760, -4380, 1110,  3390,  3397,  1004,  -4380,
    -4380, -4380, 69905, 8019,  3403,  783,   2849,  69905, 69905, 887,   1220,
    1521,  2846,  3673,  -4380, -4380, -4380, 3573,  -4380, -4380, 496,   -4380,
    -4380, -4380, -4380, -4380, 1028,  3722,  -4380, 48786, -4380, 50079, -4380,
    -4380, -4380, 1036,  -4380, 1036,  3590,  69905, 45769, 1036,  1036,  56113,
    3814,  3814,  69905, -4380, 8538,  3603,  -4380, 3382,  3623,  3671,  -4380,
    3406,  69905, 3564,  3408,  3409,  318,   318,   69905, 69905, 69905, 2022,
    2010,  -4380, 277,   3718,  57837, 3131,  -4380, 1530,  3413,  3721,  -4380,
    3827,  2900,  3050,  3415,  -4380, -4380, 59130, 3607,  3326,  3247,  3549,
    -4380, 3550,  -4380, 369,   -4380, 2010,  69905, 69905, 36698, -4380, 90078,
    -4380, 2023,  -4380, -4380, -4380, 3481,  2945,  3526,  3528,  3421,  69905,
    82,    -4380, -4380, -4380, -4380, -4380, 69905, -4380, 319,   -4380, -4380,
    -4380, -4380, -4380, 3090,  32761, 89659, 2032,  29625, -4380, 29625, -4380,
    3824,  -4380, -4380, -4380, 629,   -4380, -4380, -4380, 1469,  1469,  1469,
    -4380, 3826,  3293,  -4380, -4380, 2036,  3844,  -4380, 69905, 2040,  -4380,
    29625, 3430,  -4380, -4380, 35832, 1461,  3431,  2042,  69905, 2049,  89659,
    3439,  3438,  562,   3441,  22540, 3451,  -4380, -4380, -4380, -4380, -4380,
    11425, 11425, 69905, -4380, 3452,  -4380, -4380, -4380, 69905, 2050,  -4380,
    623,   25593, -4380, -4380, 1076,  1056,  319,   3690,  3382,  -4380, 3457,
    -4380, -4380, 69905, -4380, 1225,  1225,  69905, 3382,  -4380, -4380, 69905,
    3537,  -4380, -4380, 48786, 3518,  -4380, 958,   2849,  69905, 89659, 2129,
    119,   -4380, 89659, 89659, -4380, -4380, -4380, 29625, 3545,  -4380, -4380,
    -4380, -4380, -4380, 69905, 69905, 69905, 69905, 69905, 237,   -4380, 3025,
    1036,  -4380, -4380, 2066,  -4380, -4380, -4380, 69905, 3219,  -4380, 3219,
    -4380, -4380, 3814,  911,   -4380, -4380, -4380, 1596,  3669,  -4380, 1205,
    3654,  3552,  3464,  -4380, 56113, 3911,  3484,  -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, 2076,  3131,  3771,  2816,  3379,  69905, -4380,
    -4380, -4380, -4380, 29625, 3630,  2010,  -4380, 1939,  3484,  -4380, -4380,
    -4380, 3326,  -4380, -4380, 3859,  3664,  3863,  2900,  -4380, 2756,  2078,
    -4380, 5770,  90916, 89659, 3806,  3517,  3520,  -4380, -4380, 3533,  69905,
    -4380, -4380, 3131,  -4380, 3090,  2113,  -4380, 2117,  2119,  3637,  3529,
    -4380, 29625, 93,    3136,  49648, 3490,  -4380, 2123,  -4380, 11425, 69905,
    -4380, -4380, 29625, -4380, 2127,  -4380, -4380, 29625, 3491,  29625, -4380,
    31417, 3485,  -4380, 3909,  -4380, -4380, 2945,  36698, -4380, 3616,  -4380,
    3788,  -4380, 69474, 3542,  42760, -4380, 2935,  2935,  1747,  -4380, 1557,
    -4380, 69905, -4380, 29625, -4380, 3588,  -4380, -4380, 2138,  -4380, 1226,
    3657,  3804,  2148,  2154,  8595,  69905, 2847,  1521,  2847,  -4380, 2846,
    -4380, -4380, -4380, -4380, 50079, 3219,  -4380, -4380, -4380, 3831,  3775,
    -4380, -4380, -4380, -4380, 372,   -4380, 3705,  3708,  69905, -4380, 3519,
    -4380, 2164,  3635,  -4380, -4380, 69905, 3940,  3942,  -4380, 81,    8685,
    56113, 3379,  3247,  1939,  1788,  -4380, 3717,  -4380, 3719,  -4380, 3544,
    2816,  4167,  -4380, -4380, 299,   3821,  3822,  -4380, -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, 2899,  31865, 31865, 3540,  -4380, -4380, 69905,
    -4380, 2168,  2170,  -4380, 2172,  31417, 2181,  -4380, 69905, 3548,  -4380,
    -4380, 39298, 51372, 1225,  3554,  -4380, 3555,  -4380, -4380, 3623,  1557,
    2849,  11425, 69905, 56113, 3931,  -4380, -4380, -4380, 3657,  -4380, -4380,
    -4380, 2849,  69905, -4380, 3665,  -4380, 1130,  1130,  3872,  -4380, 3593,
    -4380, -4380, 3558,  -4380, 3987,  69905, -4380, 1110,  2010,  57837, -4380,
    3561,  -4380, 3326,  3247,  -4380, -4380, 36698, 3326,  -4380, -4380, -4380,
    2122,  56113, 56113, 33209, 3679,  259,   9877,  -4380, -4380, -4380, -4380,
    2183,  -4380, 3694,  -4380, 2209,  -4380, -4380, -4380, 1355,  319,   2935,
    29625, 1557,  -4380, 3654,  -4380, 2849,  2129,  69905, -4380, -4380, -4380,
    3378,  -4380, 3984,  -4380, 950,   -4380, -4380, -4380, -4380, 3131,  3313,
    3379,  48355, -4380, 3326,  2215,  2945,  -4380, 1785,  -4380, -4380, -4380,
    -4380, -4380, -4380, -4380, 3563,  3565,  3976,  -4380, -4380, -4380, -4380,
    -4380, -4380, 3562,  -4380, -4380, -4380, -4380, -4380, 8798,  -4380, -4380,
    -4380, -4380, 3873,  -4380, -4380, -4380, -4380, -4380, -4380, 2219,  -4380,
    -4380, -4380, -4380, -4380, 2816,  -4380, 2083,  -4380, -4380, 2089,  2044,
    3642,  3862,  32313, 29625, -4380, 1557,  3730,  -4380, 48355, 3326,  -4380,
    1785,  3676,  3677,  -4380, 8887,  56113, -4380, 2945,  -4380, 3613,  3617,
    -4380, 3575,  -4380, 3869,  3870,  48355, 56113, 56113, 2221,  -4380, -4380,
    -4380};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] = {
    1474, 1260, 561,  1344, 1343, 1260, 251,  0,    1346, 0,    1260, 382,
    1005, 0,    0,    0,    0,    561,  1260, 0,    1474, 0,    0,    0,
    0,    0,    1487, 0,    0,    0,    0,    0,    0,    0,    0,    0,
    1260, 0,    0,    1494, 0,    0,    0,    0,    1487, 0,    1348, 0,
    0,    0,    0,    0,    2,    4,    64,   65,   27,   26,   32,   31,
    89,   90,   50,   17,   78,   57,   124,  123,  125,  38,   34,   72,
    23,   25,   35,   39,   59,   40,   51,   102,  58,   21,   56,   83,
    60,   86,   45,   11,   12,   46,   76,   13,   47,   77,   14,   48,
    15,   98,   66,   91,   30,   55,   20,   82,   62,   88,   63,   5,
    41,   74,   70,   10,   52,   53,   54,   79,   80,   81,   107,  85,
    119,  37,   116,  95,   96,   113,  97,   114,  8,    99,   49,   16,
    110,  109,  111,  73,   42,   75,   61,   87,   108,  24,   112,  18,
    19,   115,  84,   105,  101,  120,  118,  126,  103,  67,   6,    7,
    92,   22,   44,   9,    29,   28,   43,   36,   122,  33,   1346, 94,
    106,  93,   68,   100,  71,   104,  121,  69,   117,  1447, 1446, 1496,
    1450, 1473, 0,    1462, 1259, 1258, 1244, 0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    560,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    1270, 2054, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
    353,  2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2337,
    2338, 2339, 2340, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2341, 2342,
    2094, 2095, 2096, 2097, 2098, 2343, 2099, 2100, 2101, 2102, 2103, 2104,
    2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116,
    2117, 2118, 2119, 2120, 2344, 2345, 2121, 2122, 2123, 2124, 2125, 2126,
    2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
    2139, 2140, 2141, 2142, 2143, 2144, 2145, 2346, 2146, 2147, 2148, 2347,
    2149, 2150, 2151, 2348, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2349,
    2350, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
    2170, 2171, 2172, 2173, 2174, 2175, 2351, 2176, 2177, 2178, 2179, 2352,
    2353, 2354, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2355, 2188,
    2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200,
    2201, 2202, 2203, 2204, 2205, 2206, 2356, 2357, 2207, 2208, 2358, 2209,
    2210, 2211, 2359, 2212, 2360, 2213, 2214, 2215, 2216, 2217, 2218, 2219,
    2220, 2361, 2221, 2362, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229,
    2230, 2363, 2231, 2364, 2234, 2232, 2233, 2235, 2236, 2237, 2238, 2239,
    2240, 2241, 2242, 2365, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250,
    2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262,
    2366, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273,
    2274, 2275, 2276, 2277, 2367, 2278, 2279, 2280, 2281, 2368, 2282, 2283,
    2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2369, 2294,
    2295, 2296, 2297, 2298, 2299, 2300, 2301, 2370, 2371, 2302, 2303, 2372,
    2304, 2373, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314,
    2315, 2316, 2317, 2318, 2319, 2320, 2321, 2374, 2375, 2322, 2323, 2324,
    2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2376, 2377, 2378,
    2379, 2380, 2381, 2382, 2383, 2384, 2334, 2335, 2336, 352,  1437, 2022,
    2055, 2056, 1345, 1326, 561,  0,    1247, 381,  0,    0,    0,    0,
    0,    0,    0,    0,    774,  0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    174,  0,    0,    405,  404,  0,    0,    0,
    977,  410,  0,    0,    0,    0,    0,    549,  1387, 2232, 1385, 1438,
    252,  255,  256,  253,  254,  2044, 0,    1087, 1088, 1090, 0,    0,
    1100, 811,  812,  0,    0,    0,    814,  0,    0,    0,    808,  0,
    0,    0,    0,    0,    0,    813,  805,  0,    804,  0,    0,    1100,
    0,    0,    0,    806,  0,    0,    1248, 1384, 411,  1474, 0,    1362,
    1363, 1364, 1346, 1353, 1365, 1358, 1360, 1359, 1361, 1357, 2043, 2070,
    915,  915,  915,  915,  912,  913,  915,  915,  915,  2249, 0,    0,
    894,  0,    896,  2045, 915,  920,  466,  466,  466,  0,    919,  924,
    466,  0,    1241, 1279, 2027, 1486, 0,    895,  1240, 2302, 1376, 0,
    0,    1115, 1111, 1113, 1114, 1112, 0,    0,    0,    2265, 1252, 236,
    2275, 2370, 2302, 235,  230,  231,  204,  2074, 0,    0,    919,  0,
    1249, 1250, 880,  1493, 1491, 0,    2009, 2092, 2106, 2191, 227,  2260,
    2266, 2275, 2370, 2302, 2333, 183,  193,  188,  0,    245,  2275, 2370,
    2302, 241,  1270, 0,    1463, 1591, 2018, 0,    1243, 1242, 1347, 0,
    1350, 0,    1552, 2245, 1467, 1470, 1352, 1468, 1459, 0,    0,    1,
    1474, 1341, 1490, 1490, 0,    1490, 0,    1451, 1459, 1454, 1458, 0,
    0,    0,    0,    2054, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392,
    2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404,
    2405, 2406, 2407, 0,    0,    2028, 2055, 2059, 0,    821,  0,    1282,
    2023, 964,  0,    0,    0,    0,    2022, 0,    0,    0,    0,    2060,
    2050, 2051, 0,    2048, 2049, 2061, 2062, 2063, 0,    2164, 0,    0,
    0,    1917, 1928, 1929, 1930, 2096, 2149, 1925, 1926, 1927, 1919, 1920,
    1921, 1922, 1923, 1924, 0,    1085, 1918, 0,    2164, 0,    153,  0,
    131,  0,    0,    2164, 0,    0,    0,    0,    0,    2164, 0,    0,
    0,    0,    0,    2196, 0,    131,  2164, 0,    0,    1264, 0,    0,
    0,    1266, 1269, 1245, 1329, 0,    2018, 0,    0,    857,  849,  0,
    858,  850,  0,    0,    860,  0,    0,    852,  0,    0,    0,    0,
    861,  0,    851,  853,  863,  854,  859,  0,    0,    0,    0,    855,
    0,    0,    1256, 466,  359,  0,    0,    0,    0,    0,    131,  1314,
    0,    2164, 131,  0,    0,    409,  408,  131,  2048, 407,  406,  2096,
    2149, 0,    1004, 0,    131,  2164, 0,    176,  632,  564,  0,    0,
    733,  2196, 131,  0,    0,    0,    0,    0,    0,    980,  0,    0,
    0,    548,  561,  1388, 1386, 0,    1091, 229,  228,  1089, 2164, 0,
    327,  0,    0,    2164, 1301, 2057, 1650, 1679, 1657, 1679, 1679, 1646,
    1646, 2133, 1659, 2164, 1647, 1648, 1686, 0,    1679, 1646, 1651, 0,
    1649, 1689, 1689, 1674, 327,  825,  1631, 1632, 1633, 1634, 1660, 1661,
    1635, 1666, 1667, 1681, 1636, 1703, 1646, 2058, 810,  0,    809,  2164,
    0,    2164, 2052, 167,  0,    807,  2096, 2149, 2164, 0,    0,    2164,
    0,    2164, 159,  2164, 0,    2164, 327,  2164, 565,  0,    0,    2164,
    0,    2164, 327,  2164, 2196, 161,  0,    2164, 327,  819,  0,    1381,
    0,    1355, 2374, 1370, 0,    1366, 1373, 1369, 1474, 915,  914,  0,
    915,  0,    915,  0,    915,  0,    915,  0,    0,    0,    915,  2046,
    2047, 897,  0,    921,  0,    0,    928,  927,  926,  0,    0,    0,
    929,  0,    1595, 1411, 0,    1238, 1255, 0,    0,    0,    980,  1118,
    0,    1116, 1107, 1108, 1251, 234,  232,  0,    0,    0,    0,    0,
    0,    1257, 0,    0,    0,    0,    2031, 2033, 2034, 1931, 1999, 0,
    2338, 2339, 2340, 1990, 0,    2341, 2342, 2343, 2387, 1833, 1820, 1829,
    1834, 1821, 1823, 1830, 2344, 2345, 2346, 2347, 2041, 2348, 2349, 2350,
    2352, 2353, 2354, 2355, 1825, 1827, 2356, 2357, 0,    2042, 2359, 2360,
    2217, 2362, 2363, 2365, 2366, 1831, 2368, 2369, 2370, 2371, 2372, 2373,
    2040, 0,    1832, 2375, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384,
    0,    0,    0,    2015, 0,    1800, 0,    1639, 1640, 1662, 1663, 1641,
    1668, 1669, 1642, 0,    2014, 1706, 1882, 1799, 1816, 0,    1805, 1806,
    0,    1798, 1794, 1476, 2010, 0,    1795, 2030, 2032, 1991, 1476, 2008,
    196,  247,  0,    248,  2016, 2275, 184,  226,  198,  225,  199,  197,
    0,    2094, 185,  0,    0,    186,  0,    0,    0,    0,    244,  242,
    0,    1246, 0,    1593, 1592, 0,    0,    1997, 2019, 830,  1339, 1340,
    1338, 0,    1335, 1337, 1349, 1346, 2004, 2003, 2005, 0,    1469, 0,
    0,    0,    1449, 1448, 3,    1352, 1488, 1489, 0,    0,    0,    0,
    0,    0,    0,    0,    1542, 1504, 1505, 1507, 1539, 1543, 1551, 0,
    1455, 0,    0,    1597, 0,    1553, 0,    0,    2029, 0,    0,    0,
    0,    822,  0,    0,    0,    1288, 0,    1290, 1291, 1292, 0,    0,
    1293, 1294, 1282, 238,  1300, 1298, 1281, 1283, 1296, 0,    0,    0,
    0,    0,    0,    0,    1306, 0,    0,    165,  166,  576,  561,  0,
    2164, 0,    0,    0,    0,    1044, 1051, 0,    0,    0,    0,    0,
    0,    0,    1045, 1043, 1046, 240,  1055, 1071, 1074, 0,    954,  0,
    0,    0,    0,    0,    1170, 0,    0,    1170, 0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    261,  273,  322,  541,
    0,    0,    543,  0,    2164, 0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    129,  130,  135,  0,    0,    0,    0,    0,
    0,    528,  540,  0,    0,    0,    0,    0,    537,  0,    131,  265,
    521,  525,  0,    0,    0,    641,  640,  1304, 1303, 0,    0,    0,
    1170, 0,    257,  0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    345,  346,  0,    0,    0,    135,
    158,  0,    0,    0,    267,  0,    0,    1265, 1262, 1263, 0,    1268,
    0,    1325, 0,    0,    0,    0,    0,    865,  0,    862,  0,    0,
    856,  2096, 2149, 0,    0,    0,    0,    0,    0,    0,    0,    0,
    384,  358,  0,    0,    730,  0,    0,    0,    0,    0,    741,  0,
    1282, 1313, 0,    0,    0,    570,  0,    2164, 0,    133,  775,  0,
    731,  410,  0,    0,    133,  0,    0,    170,  0,    636,  0,    0,
    0,    0,    0,    0,    679,  678,  0,    0,    0,    732,  0,    133,
    0,    2164, 524,  2164, 0,    466,  466,  0,    0,    979,  982,  0,
    0,    0,    0,    1441, 1443, 1442, 0,    1440, 0,    327,  325,  326,
    728,  1099, 0,    0,    1678, 1665, 1673, 1672, 0,    1655, 1654, 1653,
    0,    1652, 0,    1679, 1679, 1677, 1656, 1631, 0,    0,    0,    1685,
    0,    1683, 0,    800,  1627, 1623, 0,    0,    1671, 1692, 1693, 1694,
    1691, 1704, 1690, 0,    1637, 1695, 1646, 1643, 0,    0,    327,  0,
    0,    2164, 327,  2164, 0,    2164, 0,    0,    327,  327,  0,    0,
    0,    0,    0,    0,    637,  0,    818,  816,  815,  817,  0,    0,
    0,    0,    798,  0,    0,    0,    2164, 327,  0,    0,    797,  1941,
    0,    0,    1474, 0,    215,  216,  214,  1371, 217,  1372, 1368, 1354,
    0,    905,  0,    909,  0,    900,  0,    906,  0,    901,  898,  899,
    0,    904,  0,    0,    467,  469,  0,    0,    2118, 2132, 0,    2155,
    2184, 2185, 2266, 2271, 0,    2297, 2307, 0,    930,  959,  925,  650,
    0,    0,    1421, 1239, 1948, 0,    1474, 0,    0,    0,    0,    233,
    205,  0,    0,    0,    961,  2265, 1254, 879,  561,  0,    1796, 0,
    1803, 1804, 1989, 0,    0,    0,    0,    0,    0,    1802, 1956, 0,
    0,    0,    0,    0,    1729, 0,    0,    0,    1969, 0,    1975, 0,
    0,    1766, 0,    0,    0,    0,    0,    0,    0,    0,    1730, 1710,
    1711, 1800, 1941, 0,    1801, 2037, 0,    1703, 2013, 1931, 0,    1928,
    1929, 1930, 0,    0,    0,    2002, 0,    1939, 0,    0,    1744, 1937,
    1746, 0,    0,    0,    0,    1925, 1926, 1927, 1919, 1920, 1921, 1922,
    1923, 1924, 1935, 1726, 0,    0,    1884, 0,    1725, 0,    0,    1555,
    0,    2035, 1992, 1555, 249,  250,  246,  0,    0,    201,  200,  0,
    219,  223,  224,  195,  222,  0,    218,  203,  1873, 1872, 202,  194,
    191,  189,  206,  208,  209,  192,  190,  243,  0,    0,    2064, 2408,
    2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420,
    2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432,
    2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444,
    2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456,
    2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468,
    2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480,
    2481, 2482, 2483, 2484, 1994, 1993, 2025, 2065, 2066, 2067, 2068, 1998,
    0,    0,    327,  1333, 0,    1330, 2007, 0,    1471, 0,    2020, 0,
    1342, 1466, 1465, 1497, 1498, 997,  1464, 1522, 1523, 1518, 0,    0,
    0,    1548, 1546, 1514, 1508, 1513, 1511, 0,    1515, 1706, 1541, 1453,
    1502, 1503, 1506, 1452, 0,    1544, 0,    1424, 1542, 1507, 1408, 0,
    1390, 0,    1598, 0,    1019, 1021, 0,    1020, 0,    1023, 0,    1032,
    0,    0,    1018, 1037, 0,    1026, 1024, 0,    0,    0,    0,    0,
    0,    823,  0,    0,    0,    0,    1289, 0,    0,    2297, 237,  1292,
    1297, 1284, 1295, 0,    0,    0,    0,    0,    963,  962,  0,    0,
    984,  0,    0,    0,    1309, 455,  0,    324,  0,    0,    0,    0,
    0,    0,    0,    0,    726,  723,  0,    0,    722,  0,    574,  0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    611,  0,    1170, 0,    644,  0,
    1053, 0,    1052, 0,    0,    0,    1054, 1049, 1050, 2266, 2275, 2302,
    239,  1073, 0,    1072, 1070, 1007, 0,    1008, 0,    0,    0,    0,
    0,    2142, 275,  288,  0,    1169, 0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    311,  0,    314,  313,  0,
    0,    0,    0,    0,    318,  297,  0,    298,  0,    0,    317,  0,
    0,    542,  0,    0,    0,    1170, 0,    269,  0,    0,    0,    0,
    0,    0,    1086, 0,    668,  0,    156,  0,    152,  155,  0,    0,
    0,    0,    527,  539,  0,    531,  532,  529,  533,  534,  0,    0,
    0,    0,    0,    0,    526,  0,    0,    634,  633,  639,  0,    0,
    0,    0,    0,    0,    0,    0,    1120, 1119, 0,    0,    0,    0,
    0,    0,    765,  0,    0,    0,    0,    0,    0,    0,    653,  0,
    652,  0,    157,  0,    0,    0,    0,    0,    0,    0,    213,  1261,
    1267, 1328, 2026, 1327, 0,    0,    0,    0,    864,  0,    0,    0,
    0,    0,    0,    0,    0,    866,  867,  868,  869,  0,    0,    0,
    0,    0,    0,    0,    361,  362,  131,  360,  2057, 0,    754,  729,
    0,    0,    742,  0,    744,  747,  0,    1280, 428,  0,    0,    567,
    611,  0,    413,  163,  0,    0,    0,    0,    670,  128,  174,  176,
    411,  0,    175,  177,  179,  180,  181,  178,  182,  631,  635,  0,
    563,  0,    0,    0,    0,    0,    680,  684,  683,  687,  685,  0,
    681,  0,    0,    1619, 0,    151,  0,    0,    519,  523,  0,    0,
    0,    413,  497,  338,  2164, 0,    466,  0,    2164, 0,    981,  0,
    0,    0,    0,    0,    0,    0,    0,    1439, 0,    1077, 0,    1302,
    0,    0,    0,    327,  1676, 1675, 1628, 1624, 0,    0,    0,    0,
    826,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1644,
    2164, 327,  0,    1075, 168,  2053, 0,    802,  0,    0,    0,    0,
    0,    1079, 794,  0,    327,  160,  0,    327,  327,  566,  0,    0,
    327,  327,  162,  0,    0,    0,    558,  327,  820,  1383, 0,    2164,
    466,  1356, 1367, 902,  911,  910,  908,  907,  903,  0,    922,  0,
    465,  0,    0,    0,    936,  937,  0,    0,    935,  952,  938,  0,
    940,  932,  931,  941,  942,  0,    0,    961,  648,  0,    0,    0,
    0,    1418, 0,    1416, 0,    1596, 1420, 1409, 1375, 0,    1374, 1378,
    1380, 1379, 1377, 0,    512,  0,    0,    1117, 0,    0,    919,  0,
    0,    327,  1253, 0,    881,  882,  0,    0,    0,    0,    0,    0,
    888,  885,  886,  887,  889,  0,    890,  0,    0,    0,    2000, 1952,
    0,    1953, 0,    0,    1988, 1984, 0,    0,    0,    0,    0,    1957,
    1960, 1961, 1962, 1959, 1963, 1958, 0,    0,    1964, 0,    0,    0,
    0,    0,    0,    0,    0,    0,    2366, 0,    0,    0,    0,    1769,
    0,    0,    1912, 0,    1941, 1974, 0,    0,    0,    0,    0,    0,
    1941, 1980, 0,    0,    0,    0,    1871, 0,    1868, 0,    0,    0,
    0,    1999, 0,    0,    2038, 1707, 1721, 1722, 1723, 1727, 2012, 0,
    2001, 0,    0,    1708, 1735, 0,    1981, 1762, 0,    1767, 1750, 0,
    1743, 0,    1748, 1752, 1731, 0,    1728, 0,    2002, 1940, 0,    1938,
    0,    1718, 1719, 1720, 1712, 1713, 1714, 1715, 1716, 1717, 1724, 1916,
    1914, 1915, 0,    0,    0,    1892, 0,    0,    1747, 2157, 2191, 0,
    1487, 1487, 1487, 1475, 1485, 2011, 0,    1614, 0,    0,    0,    0,
    1808, 0,    1945, 1496, 1943, 1024, 1614, 2017, 0,    0,    1703, 0,
    1594, 1995, 0,    828,  829,  827,  1352, 1336, 1332, 1331, 2006, 1351,
    0,    1474, 0,    995,  996,  0,    1000, 0,    0,    1516, 1549, 0,
    1540, 0,    1520, 1521, 1512, 1550, 1422, 0,    1545, 1457, 1456, 0,
    1617, 0,    0,    1400, 1392, 0,    1599, 0,    1555, 1426, 1428, 1429,
    0,    1999, 1022, 0,    1646, 1033, 0,    1017, 0,    1016, 1646, 0,
    1034, 0,    1646, 0,    0,    0,    1198, 1122, 1174, 824,  1199, 1123,
    1175, 1200, 1124, 1299, 1287, 1286, 1285, 0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    705,  2164, 327,
    1307, 1201, 0,    1125, 323,  1308, 1176, 1312, 725,  724,  0,    0,
    1177, 0,    575,  0,    0,    580,  581,  582,  0,    0,    0,    583,
    0,    2096, 2149, 0,    588,  595,  600,  590,  0,    0,    602,  596,
    0,    0,    0,    0,    0,    0,    608,  615,  0,    0,    0,    0,
    0,    0,    1047, 1048, 1202, 1128, 0,    1178, 1006, 0,    1129, 164,
    0,    0,    262,  276,  617,  705,  1172, 295,  0,    310,  305,  306,
    304,  2164, 327,  2164, 327,  0,    0,    0,    0,    0,    307,  302,
    303,  299,  312,  2073, 2134, 2276, 0,    621,  623,  0,    628,  315,
    1145, 334,  333,  332,  0,    319,  0,    339,  342,  316,  293,  296,
    294,  290,  274,  0,    0,    0,    0,    0,    0,    0,    2024, 0,
    0,    1081, 0,    0,    0,    0,    0,    0,    662,  154,  1160, 144,
    0,    0,    140,  0,    0,    0,    0,    134,  0,    1208, 1135, 0,
    0,    266,  522,  530,  535,  1139, 538,  1188, 536,  1214, 1136, 0,
    1170, 0,    258,  0,    1137, 0,    1182, 1210, 1162, 0,    0,    0,
    0,    0,    0,    0,    0,    0,    1315, 0,    0,    0,    0,    0,
    327,  0,    0,    0,    1172, 2164, 327,  1209, 0,    1167, 1196, 0,
    347,  0,    1161, 0,    0,    268,  1141, 1190, 0,    0,    211,  210,
    212,  0,    0,    2132, 0,    871,  833,  870,  0,    0,    0,    0,
    0,    0,    841,  0,    0,    0,    832,  0,    831,  383,  356,  357,
    359,  366,  0,    753,  0,    0,    0,    743,  0,    0,    0,    1305,
    0,    131,  0,    0,    0,    569,  610,  617,  0,    0,    0,    412,
    416,  420,  421,  422,  0,    0,    0,    0,    145,  132,  0,    783,
    0,    466,  0,    666,  0,    176,  169,  0,    0,    0,    338,  740,
    738,  737,  739,  0,    0,    0,    758,  736,  0,    1618, 1620, 0,
    0,    0,    0,    0,    512,  415,  0,    469,  0,    0,    501,  0,
    0,    0,    0,    338,  0,    0,    0,    1011, 0,    1029, 1012, 0,
    0,    0,    0,    1059, 1066, 1060, 1039, 0,    0,    546,  1444, 1445,
    0,    327,  0,    0,    1645, 1658, 801,  0,    1688, 1687, 1689, 1689,
    0,    1629, 0,    1680, 1681, 1697, 1698, 1699, 1700, 1701, 1702, 0,
    1696, 1638, 0,    612,  327,  327,  0,    327,  0,    327,  327,  0,
    659,  0,    1236, 638,  0,    0,    713,  799,  0,    0,    327,  796,
    1942, 0,    923,  468,  0,    0,    0,    0,    934,  0,    544,  939,
    0,    951,  946,  948,  0,    955,  647,  0,    0,    1419, 1412, 1414,
    1413, 0,    0,    1410, 1949, 795,  0,    518,  1109, 1110, 0,    0,
    327,  0,    956,  0,    0,    883,  884,  0,    0,    891,  0,    0,
    0,    1492, 1950, 1951, 0,    0,    0,    1985, 0,    0,    1846, 0,
    1822, 1824, 1836, 0,    1847, 1807, 1848, 1826, 1828, 0,    1932, 0,
    0,    1837, 0,    1771, 1772, 0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1787, 1786,
    1838, 1911, 0,    0,    1972, 1973, 1839, 0,    0,    1979, 0,    0,
    0,    1844, 1849, 0,    0,    0,    0,    1855, 0,    1876, 0,    0,
    0,    1797, 1942, 0,    0,    0,    0,    0,    0,    0,    0,    1768,
    1751, 1745, 0,    1749, 1753, 0,    0,    0,    1739, 0,    0,    1737,
    1763, 1733, 0,    0,    1764, 0,    0,    0,    1815, 0,    0,    1487,
    1487, 1487, 1487, 1484, 0,    0,    0,    0,    2263, 0,    1577, 1554,
    1556, 1564, 1577, 1559, 1582, 1817, 1612, 1818, 0,    2018, 0,    1525,
    1496, 1496, 1496, 1814, 0,    0,    0,    0,    1495, 1525, 187,  0,
    220,  207,  0,    1334, 2021, 0,    1499, 0,    1933, 1000, 0,    1501,
    0,    0,    1547, 1509, 1423, 1407, 0,    1405, 1394, 0,    1395, 1999,
    0,    1405, 1391, 1434, 0,    0,    1617, 0,    1433, 0,    1646, 1014,
    1015, 0,    1038, 0,    1197, 1121, 1173, 966,  967,  0,    965,  0,
    0,    0,    454,  983,  0,    0,    0,    705,  0,    0,    458,  0,
    1310, 0,    1215, 1159, 577,  578,  0,    589,  0,    598,  597,  0,
    0,    585,  0,    0,    0,    0,    0,    584,  604,  550,  605,  607,
    0,    0,    606,  609,  614,  1170, 0,    645,  1147, 0,    1194, 1041,
    0,    1009, 0,    0,    0,    0,    428,  289,  0,    0,    0,    277,
    287,  0,    321,  0,    292,  0,    285,  308,  300,  309,  301,  320,
    625,  626,  624,  620,  0,    627,  629,  0,    336,  0,    0,    0,
    1204, 0,    1170, 0,    270,  1143, 0,    1192, 0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1205, 1179, 0,    0,    667,
    0,    664,  0,    0,    137,  136,  0,    143,  0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    348,  329,
    0,    761,  0,    0,    0,    350,  0,    0,    0,    0,    1203, 1130,
    834,  0,    0,    0,    835,  846,  0,    0,    836,  0,    0,    0,
    0,    848,  0,    0,    355,  363,  2217, 1919, 1920, 751,  756,  748,
    750,  752,  749,  0,    755,  705,  0,    745,  746,  0,    0,    0,
    0,    0,    440,  0,    0,    434,  0,    0,    1066, 427,  430,  431,
    0,    0,    570,  573,  571,  572,  603,  0,    447,  493,  0,    147,
    0,    0,    148,  146,  0,    0,    338,  671,  675,  673,  672,  674,
    669,  0,    662,  0,    172,  411,  0,    0,    562,  686,  689,  682,
    0,    757,  759,  734,  0,    617,  0,    524,  0,    466,  1384, 507,
    0,    497,  493,  495,  494,  496,  0,    503,  337,  0,    0,    512,
    503,  0,    0,    984,  1010, 0,    0,    0,    1056, 1061, 1057, 0,
    0,    1025, 0,    1058, 0,    1040, 1003, 1231, 1232, 1229, 1230, 0,
    0,    0,    1436, 1078, 0,    1664, 0,    1684, 1682, 1625, 1630, 1670,
    1705, 327,  1076, 803,  0,    790,  0,    792,  1080, 327,  327,  327,
    327,  654,  0,    559,  0,    0,    0,    0,    933,  953,  0,    949,
    0,    0,    916,  958,  0,    0,    1417, 1415, 510,  0,    961,  0,
    917,  960,  0,    0,    0,    0,    0,    0,    0,    1954, 0,    1987,
    1983, 0,    1819, 1955, 0,    1967, 1966, 1912, 0,    0,    1770, 1782,
    1783, 1784, 1968, 0,    1792, 0,    0,    1779, 1780, 1781, 1773, 1774,
    1775, 1776, 1777, 1778, 1785, 1977, 1976, 1970, 1971, 0,    1841, 1842,
    1843, 1978, 1850, 0,    2087, 1877, 1854, 1870, 1869, 0,    0,    0,
    1857, 0,    0,    1866, 0,    1913, 2039, 1709, 0,    0,    1736, 1982,
    1754, 0,    0,    0,    1732, 1932, 0,    0,    0,    0,    0,    1741,
    0,    0,    0,    1895, 1890, 1891, 1909, 0,    0,    0,    0,    0,
    0,    1478, 1477, 1483, 1577, 1582, 0,    1459, 0,    1564, 0,    1576,
    1562, 1575, 0,    0,    1588, 1586, 0,    1588, 0,    1588, 0,    1558,
    0,    1578, 1560, 1575, 0,    1604, 0,    2019, 1613, 0,    1538, 0,
    0,    0,    0,    1946, 1947, 0,    1944, 1809, 1538, 0,    1996, 1472,
    0,    1500, 998,  999,  1517, 1510, 2114, 1615, 0,    1406, 0,    0,
    1397, 1403, 1389, 0,    0,    1427, 1405, 1430, 1035, 0,    0,    1027,
    972,  973,  971,  974,  0,    0,    0,    705,  0,    0,    474,  0,
    991,  991,  0,    0,    460,  506,  1066, 708,  0,    0,    0,    706,
    327,  1126, 0,    599,  0,    0,    594,  592,  591,  593,  0,    551,
    1213, 1127, 0,    0,    0,    0,    1042, 0,    0,    1146, 0,    425,
    0,    282,  1171, 0,    0,    0,    281,  0,    327,  327,  622,  335,
    340,  341,  344,  0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    784,  767,  0,    0,    785,  786,  0,    0,    0,
    1083, 1084, 1082, 0,    1133, 0,    0,    658,  141,  138,  139,  142,
    1157, 1140, 1189, 0,    0,    0,    1138, 0,    1183, 1153, 1149, 0,
    0,    0,    0,    0,    1212, 1166, 1187, 1211, 1164, 1185, 1163, 1184,
    1165, 1186, 1158, 0,    1622, 764,  0,    0,    0,    327,  327,  656,
    1142, 1191, 0,    0,    837,  0,    0,    839,  840,  0,    843,  386,
    0,    389,  396,  367,  372,  1314, 0,    1314, 0,    369,  373,  1314,
    368,  1314, 365,  727,  0,    0,    704,  0,    432,  0,    438,  442,
    443,  441,  433,  1066, 466,  505,  0,    0,    717,  0,    568,  413,
    444,  0,    0,    417,  150,  149,  0,    0,    0,    665,  664,  176,
    2164, 0,    0,    691,  695,  735,  0,    1621, 651,  338,  520,  0,
    0,    413,  512,  0,    418,  423,  424,  0,    501,  497,  0,    0,
    509,  1278, 0,    513,  515,  0,    0,    0,    1013, 1030, 1031, 0,
    0,    1066, 0,    0,    1065, 0,    0,    553,  327,  1626, 613,  327,
    327,  660,  1237, 1106, 714,  0,    945,  944,  943,  545,  0,    947,
    649,  0,    511,  327,  0,    0,    893,  874,  892,  0,    0,    873,
    0,    872,  1986, 1835, 1845, 1965, 1911, 1942, 0,    0,    1793, 0,
    0,    1840, 2376, 0,    0,    0,    0,    1874, 1875, 1856, 0,    2208,
    1861, 0,    0,    0,    1760, 1758, 1755, 0,    1756, 1740, 0,    0,
    1738, 1734, 0,    1765, 1881, 0,    1897, 1894, 1908, 1942, 1482, 1481,
    1480, 1479, 1563, 1561, 0,    1566, 1573, 0,    1557, 0,    1587, 1583,
    0,    1584, 0,    0,    1585, 0,    0,    1600, 0,    1573, 0,    1611,
    1496, 0,    0,    1886, 1812, 1813, 1810, 1496, 2036, 1886, 221,  0,
    0,    1404, 1393, 1396, 0,    0,    0,    0,    1435, 1425, 1028, 1036,
    0,    0,    0,    456,  0,    1066, 0,    0,    0,    994,  994,  0,
    1066, 505,  710,  709,  712,  707,  711,  1311, 0,    586,  587,  601,
    1148, 0,    1195, 1155, 0,    1421, 0,    618,  278,  279,  280,  283,
    329,  291,  284,  0,    0,    0,    1144, 0,    1193, 1151, 1206, 1131,
    1180, 0,    0,    773,  0,    0,    0,    0,    1207, 1132, 1181, 0,
    0,    0,    0,    1421, 0,    0,    0,    0,    0,    1320, 0,    328,
    763,  762,  329,  349,  1168, 0,    838,  844,  845,  842,  387,  131,
    0,    364,  0,    394,  0,    392,  391,  393,  0,    380,  0,    0,
    0,    0,    0,    0,    0,    1097, 1097, 0,    705,  0,    0,    429,
    505,  473,  0,    435,  0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    657,  171,  0,    413,  617,  690,  0,    0,
    0,    760,  0,    512,  415,  0,    1382, 414,  0,    0,    503,  501,
    0,    498,  0,    502,  0,    1271, 0,    0,    0,    0,    1062, 0,
    1068, 0,    1024, 1001, 1063, 0,    1614, 0,    0,    0,    0,    557,
    1098, 791,  793,  655,  950,  0,    957,  327,  875,  876,  877,  878,
    1913, 1788, 0,    0,    0,    0,    1851, 0,    1852, 1879, 1878, 1858,
    1862, 0,    1859, 1860, 1757, 1761, 1759, 1742, 1883, 0,    1496, 1910,
    1607, 0,    1610, 1565, 0,    0,    1567, 0,    0,    1569, 1571, 0,
    0,    0,    0,    0,    0,    2022, 0,    2113, 2350, 2262, 0,    1524,
    1526, 1529, 1531, 1530, 1532, 1528, 1537, 0,    1461, 0,    1460, 1934,
    1616, 0,    0,    985,  0,    0,    1432, 1431, 951,  0,    327,  991,
    505,  475,  2217, 476,  990,  0,    992,  997,  997,  0,    505,  705,
    579,  0,    0,    263,  616,  0,    331,  343,  0,    1421, 0,    0,
    0,    780,  768,  0,    0,    787,  1134, 661,  0,    0,    259,  1154,
    1150, 1322, 1323, 0,    0,    0,    0,    0,    327,  847,  366,  0,
    390,  399,  0,    397,  370,  375,  0,    379,  377,  376,  371,  374,
    1097, 0,    1094, 1093, 703,  0,    464,  436,  0,    484,  0,    0,
    718,  0,    0,    493,  453,  452,  449,  448,  450,  451,  446,  445,
    0,    617,  777,  338,  1278, 0,    630,  692,  693,  688,  0,    0,
    0,    508,  497,  493,  419,  428,  402,  503,  499,  500,  0,    0,
    0,    512,  1324, 984,  0,    1067, 0,    0,    0,    0,    0,    0,
    1101, 552,  0,    0,    556,  547,  617,  918,  1789, 0,    1790, 0,
    0,    0,    1864, 1863, 0,    1900, 1612, 0,    0,    1606, 0,    1574,
    1590, 0,    1570, 1568, 0,    1579, 0,    1581, 1809, 0,    0,    0,
    1533, 0,    1885, 1887, 0,    1811, 1402, 1614, 0,    1399, 0,    968,
    0,    969,  994,  479,  0,    993,  1000, 1000, 466,  705,  457,  1156,
    0,    619,  0,    286,  0,    271,  1152, 0,    771,  0,    782,  780,
    0,    0,    0,    0,    1316, 0,    1317, 1318, 1321, 351,  354,  385,
    395,  0,    378,  1092, 1096, 1095, 0,    0,    437,  470,  471,  472,
    0,    439,  480,  481,  0,    715,  0,    720,  0,    0,    492,  642,
    0,    0,    0,    1272, 0,    0,    0,    1278, 501,  497,  426,  400,
    0,    1275, 0,    514,  0,    338,  1066, 1069, 1064, 1235, 0,    0,
    555,  554,  646,  1791, 1867, 1853, 1880, 1865, 1896, 0,    0,    0,
    1605, 1608, 0,    1572, 0,    0,    1580, 0,    0,    0,    1527, 0,
    0,    1401, 986,  0,    0,    997,  0,    705,  0,    988,  987,  473,
    459,  1421, 330,  0,    0,    0,    778,  781,  769,  782,  789,  788,
    663,  1421, 0,    398,  0,    463,  0,    0,    0,    482,  0,    483,
    504,  0,    719,  0,    0,    776,  0,    0,    413,  694,  0,    1273,
    503,  501,  1276, 1277, 0,    503,  1002, 1234, 1233, 1474, 0,    0,
    2337, 2114, 2309, 0,    1898, 1901, 1899, 1893, 0,    1589, 1603, 1535,
    0,    1534, 1888, 1889, 1614, 327,  1000, 0,    461,  477,  484,  264,
    1421, 0,    0,    770,  260,  1319, 695,  489,  0,    488,  0,    486,
    485,  716,  721,  617,  766,  1278, 698,  403,  503,  0,    1614, 1217,
    1474, 1216, 1218, 1226, 1223, 1225, 1224, 1222, 1104, 1105, 0,    1905,
    1904, 1903, 1907, 1906, 1609, 0,    1601, 1536, 1398, 970,  989,  0,
    705,  272,  772,  779,  0,    487,  491,  490,  643,  1274, 700,  0,
    696,  699,  701,  702,  401,  338,  975,  0,    1227, 1221, 1459, 1446,
    0,    0,    0,    0,    478,  462,  0,    676,  0,    503,  1219, 1474,
    0,    0,    1902, 0,    0,    697,  1614, 1220, 0,    0,    1602, 0,
    976,  0,    0,    698,  0,    0,    0,    1102, 1103, 677};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] = {
    -4380, -4380, -4380, 3280,  -4380, -825,  411,   2568,  -504,  -4380, -4380,
    -4380, 3182,  -4380, -4380, -4380, -4380, -4380, -4380, -4380, 3214,  -4380,
    -4380, 1757,  -2200, -4380, -4380, 139,   3178,  -1187, 125,   2796,  1411,
    -4380, -1039, -4380, -4380, -538,  116,   -4380, 3185,  -687,  -4380, -4380,
    -4380, -4380, -4380, -4380, -4380, -4380, -763,  1903,  1257,  5439,  -3839,
    -4380, -4380, -1296, -2900, -4380, 625,   -4380, -4380, 1845,  -4380, -4380,
    -4380, 1096,  546,   -445,  -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -232,  -4380, -4380, -602,  162,   52,    -2224, -280,  -4380, -4380, 508,
    -279,  -1203, -4380, -3266, -4380, 55,    -4380, -4380, -4380, -256,  -1288,
    1349,  -4380, -652,  -1049, 1653,  -674,  -4380, -140,  -4380, -742,  -601,
    -599,  -686,  -3434, -3438, -3883, -3472, -3166, 1351,  165,   -2830, -2903,
    167,   477,   -4380, 173,   185,   -4380, 493,   -761,  -1319, -4380, -793,
    -4380, -4380, -4380, -2677, -4380, -4380, -4380, -4380, 63,    -4380, -4380,
    -4380, -4380, 535,   -4380, -4380, -4380, -4380, -4380, -4380, -2467, 1810,
    1811,  -4380, -4380, -2861, -4380, -816,  -4380, 668,   -2709, 1272,  -4380,
    -4380, -4380, 2558,  -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380,
    -4380, -1455, -4380, -4380, -4380, -4380, -4380, 521,   59,    -4380, -4380,
    -4380, -4380, 186,   -4380, 1830,  1085,  -4380, -4380, -4380, -725,  -815,
    -791,  -4380, -2722, -4380, -4380, -4380, -4380, -214,  -4380, -4380, -4380,
    -4380, -4380, -4380, -888,  -4380, 1146,  -2838, -4380, -4380, 1157,  -4380,
    -4380, -4380, -4380, -4380, -656,  -137,  2596,  -4380, -526,  -630,  -4380,
    -4380, -4380, -134,  -4380, -4380, -4380, -4380, -4380, -4380, -997,  522,
    -948,  -464,  -4380, -4380, -4380, -4380, -2105, -4380, -4380, -4380, -3239,
    -4380, 4096,  396,   -79,   188,   -4380, -25,   68,    3034,  -1044, -2394,
    466,   -320,  -4380, -1646, -4380, -4380, -4380, -2311, -4380, -4380, -4380,
    -4380, -3215, 189,   -4380, 3033,  -4380, -3448, -4134, -3206, -3675, -4010,
    -3990, -3190, -4380, -4380, -1003, -4380, -4380, -4380, -1292, 2136,  -1759,
    -4380, -1917, 525,   1443,  -830,  -2507, -3476, -633,  -2946, -4380, -4380,
    -3391, -434,  -4380, -4380, -4380, -4380, -4380, -4380, -4380, -1000, -557,
    -4380, -4380, 3546,  -4380, -4016, -4380, 3521,  -4380, -4380, -4380, -4380,
    2424,  2426,  -4380, 2431,  -4380, -4380, -1297, 1232,  -4380, -4380, -4380,
    -4380, -4380, -643,  -752,  -4380, -4380, -4380, 190,   -4380, -4380, -4380,
    -4380, 2085,  -831,  -638,  3414,  191,   -4170, -4380, -4380, -424,  -4380,
    2830,  -4380, -4380, -4380, -4380, -4380, -4380, -4380, -4380, -1843, -4380,
    -4380, -4024, -4380, -4380, -4380, -4380, -4380, 2210,  2212,  72,    -35,
    -4380, -4380, -1160, -4380, -498,  -4380, 2488,  -4380, -4380, -4380, -4380,
    1511,  194,   565,   -4380, 3,     -4380, -4380, -4380, 326,   -4380, -4380,
    -3116, 5,     -4380, -4380, -4380, -4380, -4028, -4380, 6,     -577,  838,
    -4380, -4380, -2542, -4380, 195,   29,    -4380, -4380, 1,     2,     -39,
    -33,   -27,   4,     122,   2923,  -4380, 2937,  -4380, 25,    1791,  -4380,
    -4380, -733,  -141,  -4380, 1518,  -563,  2184,  2874,  2876,  -4380, 1509,
    -4380, -4380, 1525,  -4380, 881,   -554,  -442,  -4380, -4380, -4380, -4380,
    363,   -555,  2200,  -4380, 2886,  -4380, -4380, -4380, -1658, 1527,  -3053,
    918,   -3126, -3064, 407,   397,   -1233, -230,  31,    -681,  2910,  -4380,
    -4380, -4380, 925,   -403,  -4380, -4380, -401,  -2545, 874,   -4380, -3976,
    -2083, -571,  2600,  -955,  -4380, -4380, -921,  14211, -4380, -4380, -4380,
    14544, 15384, -4380, -4380, 15519, 15942, -4380, -805,  1131,  16077, 14217,
    -914,  -1613, 99,    12920, -2250, -936,  -2524, -4380, -3177, -2436, -4380,
    -4380, -4380, -189,  987,   921,   -4380, -4380, -4380, -4380, 15,    -4380,
    -523,  -4380, -520,  -4380, -4380, -4380, -509,  -4379, 2404,  -4380, -4380,
    -4380, -193,  -4380, 17264, 1565,  -4380, -986,  -2480, -2492, -3086, -1622,
    -4380, -4380, -4380, -4380, -4380, -4380, -4380, -1429, -3004, -466,  1635,
    -4380, -4380, 1732,  -4380, -4380, -4380, -1208, -757,  -2381, 1642,  -1821,
    -4380, -739,  -4380, -689,  2412,  -690,  5282,  -1235, 6739,  -443,  -2064,
    -1133, -1406, -4380, -166,  -4380, 30,    -16,   -9,    -104,  -78,   -565,
    3381,  13684, -575,  -1226, 9552,  11561, 12381, -2808};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] = {
    -1,   51,   52,   53,   54,   1410, 2271, 2156, 2984, 2985, 55,   56,
    1406, 57,   58,   59,   60,   61,   62,   63,   1342, 64,   65,   942,
    1531, 2282, 66,   2014, 726,  727,  728,  1837, 1838, 2219, 1839, 1827,
    1232, 1664, 1361, 700,  701,  1324, 1362, 68,   69,   1226, 1818, 70,
    71,   72,   1388, 1389, 1336, 1572, 3964, 4635, 2825, 2134, 3024, 2826,
    2827, 73,   1458, 1459, 74,   75,   2952, 1502, 2250, 3508, 3509, 3998,
    548,  2247, 4283, 4284, 3984, 3985, 4290, 4502, 4503, 2283, 1526, 3018,
    3589, 2975, 4047, 2976, 4048, 2977, 4049, 2963, 3537, 3538, 3539, 2978,
    4020, 4534, 2979, 2033, 4664, 2318, 1686, 1684, 4521, 3849, 3850, 4735,
    4669, 4670, 4671, 4823, 4022, 3022, 3595, 4056, 4311, 2721, 635,  1552,
    3127, 636,  2321, 580,  637,  2284, 81,   2312, 2313, 1429, 2164, 3513,
    3107, 82,   962,  3368, 4367, 4576, 4577, 83,   217,  84,   1535, 85,
    86,   2267, 2969, 87,   2050, 2738, 88,   89,   2766, 2767, 2768, 90,
    91,   3390, 4230, 1390, 2814, 2815, 2816, 2817, 3413, 92,   1533, 1434,
    2291, 93,   94,   95,   96,   97,   2434, 2435, 98,   2207, 99,   100,
    101,  102,  103,  3445, 3931, 3566, 2852, 2991, 3564, 2285, 1543, 2303,
    2304, 4036, 4330, 4545, 4332, 4871, 4872, 4304, 3346, 3863, 105,  106,
    4015, 4016, 4676, 107,  2048, 108,  109,  110,  1510, 2259, 2260, 3514,
    1504, 2253, 2254, 3576, 3577, 111,  2907, 112,  3915, 3916, 581,  4681,
    4642, 4748, 113,  114,  3919, 3920, 115,  116,  117,  118,  119,  629,
    1052, 1053, 1309, 1000, 120,  1934, 121,  913,  2934, 122,  1120, 2480,
    4099, 123,  660,  1066, 1067, 2286, 125,  669,  2458, 671,  1699, 3109,
    3110, 3662, 2420, 813,  126,  127,  2431, 2461, 128,  1329, 2024, 2025,
    3844, 2287, 582,  1558, 2325, 2716, 4442, 4443, 4209, 4459, 2646, 3299,
    130,  583,  1366, 2094, 2328, 3032, 1991, 1992, 1993, 3612, 1994, 3034,
    1995, 1303, 1996, 3040, 3041, 3042, 3608, 3615, 3618, 4356, 4357, 131,
    1364, 2092, 132,  133,  134,  1401, 844,  135,  595,  596,  136,  4514,
    137,  974,  138,  4365, 139,  140,  691,  692,  1104, 1105, 141,  142,
    2107, 3397, 143,  144,  145,  4837, 4879, 4880, 4881, 3623, 4785, 146,
    4839, 1097, 148,  149,  150,  186,  877,  878,  879,  2288, 4349, 152,
    153,  1325, 1326, 1327, 1328, 2019, 154,  155,  156,  157,  158,  159,
    1514, 160,  161,  4491, 162,  163,  1477, 164,  1261, 1262, 165,  166,
    543,  744,  1265, 1273, 167,  639,  1060, 1061, 1062, 1666, 168,  1100,
    2446, 640,  1055, 170,  641,  1979, 2667, 3309, 3310, 3313, 4194, 3825,
    642,  2664, 173,  1706, 2440, 2443, 2660, 643,  2672, 2673, 2674, 2675,
    2676, 3316, 644,  662,  965,  2334, 645,  1193, 178,  179,  180,  754,
    748,  749,  182,  1811, 2607, 678,  1280, 713,  714,  762,  3284, 1947,
    1948, 1970, 1971, 1289, 1290, 1960, 1962, 2648, 1963, 2656, 1953, 3802,
    4427, 4428, 4429, 4430, 4431, 4432, 4179, 1966, 1967, 1292, 1293, 1294,
    1975, 183,  2611, 3263, 3264, 3265, 3779, 3780, 3794, 3790, 4163, 4413,
    3266, 1095, 1300, 3267, 4171, 4854, 3268, 4404, 4405, 4593, 3797, 3275,
    3307, 3008, 3009, 3010, 1997, 1601, 1002, 1194, 1003, 1615, 1195, 1585,
    1005, 1196, 1197, 1198, 1008, 1199, 1200, 1201, 1011, 1577, 1604, 1202,
    1203, 1595, 1612, 1613, 1655, 2518, 1205, 1206, 1207, 3270, 1208, 3735,
    4130, 4119, 2539, 2540, 1834, 3731, 3209, 1806, 2597, 4436, 4610, 4611,
    3248, 3760, 4146, 4402, 4715, 4792, 4793, 1209, 1210, 1211, 2594, 1802,
    846,  1212, 3516, 1804, 2533, 2619, 2620, 1709, 1729, 2486, 2502, 2503,
    2513, 3168, 2521, 2526, 3196, 3197, 2534, 2563, 1213, 2488, 2489, 3152,
    1731, 1214, 1255, 1256, 1726, 2558, 1268, 1269, 746,  1222, 1215, 1216,
    1700, 737,  4409, 538,  803,  2841, 1925, 881,  675,  1217, 1218, 1219,
    1220, 1394, 818,  1022, 1023, 539,  797,  820,  2818, 540,  541,  799,
    1930};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] = {
    597,   176,   177,   171,   181,   172,   174,   937,   845,   676,   705,
    753,   664,   549,   1086,  1087,  1088,  1618,  664,   968,   1092,  795,
    177,   1663,  181,   1223,  1227,  1622,  1926,  1628,  814,   1301,  1295,
    1001,  1393,  1683,  537,   1941,  763,   1304,  1591,  1433,  2032,  587,
    1463,  2421,  2974,  1475,  1931,  1524,  1034,  663,   752,   2617,  1001,
    1029,  966,   663,   1257,  1063,  1545,  1049,  1581,  1582,  579,   3132,
    1614,  3391,  1656,  739,   2221,  1719,  1590,  2095,  736,   2683,  2685,
    3285,  2113,  2994,  628,   2843,  1926,  2103,  1597,  1241,  3269,  1505,
    3374,  2128,  670,   2308,  638,   1427,  3617,  1428,  1931,  1512,  3572,
    1442,  851,   1517,  3408,  706,   3410,  2485,  1521,  3817,  1468,  2176,
    3546,  868,   922,   3587,  2904,  1528,  67,    1944,  2638,  819,   3113,
    3846,  3278,  3524,  3887,  1547,  852,   3600,  4060,  3315,  2942,  757,
    3276,  3277,  3851,  1057,  4069,  869,   2946,  3269,  2948,  1569,  3793,
    2186,  968,   4013,  3518,  3747,  765,   2190,  2191,  4052,  2326,  3518,
    766,   4063,  4053,  2622,  2548,  699,   976,   1046,  76,    3852,  3217,
    77,    733,   78,    2102,  4342,  2088,  751,   3321,  79,    3271,  2005,
    1578,  1579,  4210,  725,   1363,  1234,  1464,  764,   3584,  80,    104,
    1589,  124,   129,   147,   151,   3715,  2391,  169,   175,   4418,  3830,
    4420,  1288,  4460,  4467,  3791,  -2084, 3174,  -1679, 1767,  1291,  3776,
    2987,  -2151, -2154, 646,   1544,  -2186, -2207, 1602,  646,   -2235, 4564,
    646,   -1674, 1932,  1581,  1582,  2105,  1339,  3271,  593,   1068,  547,
    -2057, 3559,  2682,  2184,  4486,  2105,  1072,  -2058, -2057, -2057, 862,
    1590,  4493,  4494,  1774,  -2058, -2058, 2197,  2105,  -1646, 588,   -2390,
    3606,  2202,  -1659, 1116,  2305,  3458,  1597,  -2390, -2390, -1679, 1500,
    -1917, 3171,  3172,  -1686, 2556,  1665,  3191,  -1917, 4641,  1508,  1780,
    1570,  742,   593,   -1674, 1809,  3150,  593,   2556,  2261,  3619,  -1679,
    4515,  873,   2299,  593,   3540,  2026,  1570,  -2028, 3130,  3370,  3320,
    2460,  811,   2418,  3375,  -2029, 2316,  2413,  1782,  2950,  4363,  3221,
    3222,  3079,  3117,  3081,  1391,  2105,  593,   2610,  1570,  646,   3591,
    1482,  3560,  2105,  3119,  4044,  4574,  3948,  4783,  2316,  1578,  1579,
    1340,  2926,  1231,  2732,  1083,  4044,  1472,  2038,  3068,  1497,  -1689,
    1491,  2598,  760,   4528,  646,   4192,  4313,  1507,  1381,  760,   1965,
    1570,  2105,  1589,  2035,  39,    -1689, 3552,  1430,  2707,  652,   3174,
    3620,  2028,  2280,  1832,  2300,  652,   652,   4683,  845,   652,   652,
    1570,  4009,  652,   646,   1774,  874,   3121,  -2206, 2029,  653,   917,
    1090,  1816,  4713,  2801,  43,    653,   653,   4529,  1431,  653,   653,
    -131,  4470,  653,   3561,  4530,  -131,  1824,  1391,  593,   4317,  1833,
    1780,  646,   4846,  1475,  4848,  2747,  542,   4714,  2105,  3174,  661,
    2306,  845,   875,   544,   927,   661,   2106,  4558,  4208,  -388,  4531,
    47,    3,     4,     971,   4559,  1609,  4496,  1768,  1782,  2708,  4103,
    2281,  4105,  1020,  4602,  2802,  4637,  1828,  1774,  4318,  1933,  1817,
    1840,  1840,  2416,  3122,  4314,  1774,  2422,  931,   2424,  4555,  2591,
    2427,  940,   1814,  1629,  1091,  4213,  2592,  4626,  4627,  876,   2599,
    2414,  950,   968,   1780,  50,    593,   593,   3949,  -1936, 4575,  2229,
    932,   1780,  4758,  968,   -1936, 932,   3888,  2233,  4217,  4784,  1432,
    1084,  4659,  1473,  2317,  3621,  932,   593,   4532,  3375,  589,   2415,
    1782,  4898,  1825,  3553,  3118,  2127,  1651,  4010,  2030,  1782,  594,
    4775,  2482,  4045,  2951,  4364,  3120,  4327,  1704,  1701,  2185,  3371,
    1708,  914,   2419,  4772,  1571,  3282,  1810,  3562,  1711,  2770,  4193,
    1125,  3803,  4849,  3174,  1017,  968,   593,   -2391, -2391, -2391, 1571,
    3459,  1720,  1091,  2554,  2076,  2301,  590,   1258,  812,   1259,  1931,
    3541,  2082,  2487,  3622,  1509,  1667,  743,   2302,  1400,  1069,  1071,
    1073,  1571,  2307,  1075,  1076,  1077,  967,   597,   3901,  1723,  2074,
    3607,  -1917, 1082,  2203,  1620,  2557,  4560,  1091,  591,   1705,  592,
    2341,  753,   -2206, 990,   1341,  2172,  3563,  2174,  3237,  1064,  1603,
    1576,  1931,  912,   2198,  1571,  3518,  3317,  4733,  2733,  2838,  4343,
    2031,  2255,  2181,  1826,  4308,  3856,  3878,  2162,  1296,  4754,  2165,
    2166,  1509,  2039,  1474,  1571,  50,    2409,  2143,  177,   752,   181,
    1065,  3189,  1070,  2927,  1074,  2220,  658,   659,   4833,  3793,  1078,
    2224,  -1679, 3339,  658,   659,   3905,  2395,  -2084, 3061,  4028,  4869,
    4135,  968,   -2206, -2151, -2154, 1098,  -1674, -2186, -2207, 968,   968,
    -2235, 2114,  4533,  1598,  -2206, -2057, 663,   4359,  663,   1801,  663,
    928,   -2058, 1056,  1576,  4109,  663,   1079,  1080,  1081,  1117,  2417,
    2363,  2230,  1580,  4059,  -2390, 1822,  1224,  1584,  2428,  1233,  967,
    1235,  845,   1059,  4282,  4154,  1094,  800,   802,   -1686, 4811,  806,
    1653,  808,   1479,  4197,  2154,  4040,  765,   1770,  2179,  2157,  4816,
    1812,  766,   1486,  4160,  -1679, 2091,  1976,  4164,  2625,  3269,  866,
    3269,  -2028, 2481,  1977,  2484,  4796,  4806,  1253,  2933,  -2029, 2491,
    1254,  658,   1392,  1620,  1592,  2505,  2506,  2507,  764,   176,   177,
    171,   181,   172,   174,   2523,  2525,  3323,  4759,  3324,  2535,  1592,
    1094,  1593,  1484,  3661,  3526,  2771,  4622,  658,   659,   4218,  1926,
    2593,  2344,  2345,  4861,  1594,  2647,  1313,  1593,  3448,  3810,  3180,
    1559,  3568,  3186,  3187,  3188,  3189,  1705,  3999,  1299,  -1936, 1596,
    1018,  1253,  4776,  1260,  1408,  1254,  658,   659,   593,   2519,  2761,
    4452,  1263,  3269,  2850,  3838,  3529,  2537,  4462,  3584,  3271,  3492,
    3271,  2248,  2249,  1409,  2147,  2831,  3496,  3497,  -131,  -131,  3500,
    685,   2803,  2436,  673,   658,   1392,  3505,  1345,  2839,  2150,  3184,
    3185,  3186,  3187,  3188,  3189,  2966,  2617,  2617,  2617,  1230,  663,
    4376,  3015,  1238,  3668,  4377,  4378,  1314,  4379,  -821,  2745,  4617,
    1270,  4554,  4586,  67,    2697,  3498,  3499,  2855,  1796,  1797,  1798,
    1799,  1800,  1801,  767,   2851,  2044,  2761,  2762,  1798,  1799,  1800,
    1801,  1243,  2804,  4832,  2045,  2980,  2787,  2016,  4606,  -1459, 2828,
    2319,  2088,  3271,  1951,  2821,  -610,  4344,  2225,  2235,  2432,  -1459,
    3386,  1315,  1447,  686,   -1459, 76,    1323,  4345,  77,    1330,  78,
    2241,  3695,  3696,  3697,  3698,  79,    3828,  3703,  3704,  3705,  3706,
    3707,  3708,  3709,  3710,  3711,  3712,  80,    104,   2264,  124,   129,
    147,   151,   4075,  4660,  169,   175,   2115,  2856,  4306,  1448,  2822,
    2437,  3431,  3533,  2762,  -1459, 768,   2116,  2495,  2117,  593,   2236,
    -2391, -2391, -2391, -2026, 3184,  3185,  3186,  3187,  3188,  3189,  3387,
    4406,  2705,  -1459, 1308,  699,   1437,  1323,  1668,  3751,  3752,  1670,
    2330,  1672,  2433,  1674,  2176,  1676,  1952,  3534,  545,   1680,  3851,
    3669,  2665,  2338,  2857,  2425,  2426,  1316,  1768,  958,   -1646, 3535,
    1740,  3288,  3318,  1001,  3852,  4618,  2967,  2832,  -1459, 2118,  4466,
    1536,  1638,  1562,  1331,  2352,  -1459, 3852,  4384,  4407,  1485,  1591,
    967,   3033,  2274,  3515,  2046,  2964,  1540,  593,   2823,  1452,  3515,
    2765,  967,   4463,  39,    1453,  2690,  2237,  1339,  2981,  2368,  4098,
    2015,  687,   2858,  4866,  1541,  4587,  3432,  1537,  1639,  2496,  177,
    2381,  181,   3890,  2376,  2386,  2047,  2576,  1001,  920,   2040,  2855,
    4346,  923,   1707,  43,    2390,  4691,  1063,  -1646, 3362,  184,   2263,
    4661,  4698,  2238,  663,   4677,  688,   689,   1669,  948,   1671,  3536,
    1673,  2968,  1675,  967,   1677,  1678,  1679,  1244,  4410,  1405,  1449,
    1681,  4688,  4414,  1605,  4696,  4416,  4689,  2765,  4485,  3613,  47,
    2343,  3617,  2148,  4203,  3363,  2746,  1125,  1728,  185,   3174,  2339,
    2497,  48,    3175,  3176,  3177,  2438,  758,   1620,  4334,  4519,  4338,
    1284,  2275,  1605,  1454,  1737,  1320,  2859,  1321,  -1459, 753,   2856,
    49,    1340,  2439,  2687,  1773,  2401,  1253,  1774,  769,   3917,  1254,
    -2391, -2391, -2391, 50,    2034,  959,   1332,  1245,  707,   677,   3852,
    4231,  1769,  1753,  2040,  2389,  1606,  690,   3104,  4819,  1112,  1771,
    2149,  2511,  2982,  1780,  2498,  2824,  1765,  2499,  554,   1781,  2035,
    4867,  759,   1813,  2577,  2549,  1450,  2857,  1333,  2578,  3433,  845,
    1542,  3891,  1253,  1286,  1606,  1274,  1254,  3840,  1538,  1640,  967,
    1782,  39,    1830,  1831,  960,   2889,  2083,  967,   967,   1937,  961,
    2890,  2983,  4620,  -2048, 1334,  1620,  2774,  -153,  -1646, 1607,  3434,
    2579,  1608,  683,   2239,  1945,  1946,  2719,  1950,  4777,  1287,  766,
    766,   43,    766,   2451,  3269,  2858,  2860,  2643,  3269,  184,   3918,
    -153,  711,   760,   2861,  663,   3912,  2862,  3435,  1607,  663,   663,
    1608,  561,   3418,  4006,  1774,  3364,  764,   764,   2657,  764,   4623,
    4690,  2500,  1284,  4196,  3419,  684,   1455,  4636,  47,    4629,  4581,
    -978,  1335,  3178,  710,   4489,  2720,  4831,  2898,  185,   4782,  48,
    4834,  3207,  3810,  1539,  1641,  2084,  2041,  3214,  4183,  4176,  3892,
    2715,  3179,  3893,  4490,  3818,  2775,  1783,  1456,  1299,  49,    2891,
    1784,  632,   2036,  1278,  563,   2786,  1609,  1620,  1782,  2240,  2640,
    2644,  2666,  1408,  2688,  3271,  734,   2689,  2761,  3271,  2859,  14,
    685,   3051,  1398,  1399,  1457,  1286,  4095,  4876,  712,   4598,  3076,
    4665,  1409,  1954,  1787,  2580,  1609,  3913,  2871,  4820,  3077,  -984,
    3365,  3082,  663,   2995,  2874,  3180,  2876,  2208,  3819,  19,    663,
    3065,  3841,  3392,  4639,  3976,  761,   2501,  4644,  4645,  2042,  3979,
    3980,  2869,  3982,  2870,  4471,  2336,  1955,  561,   2069,  2999,  3000,
    3001,  3002,  4730,  1789,  1620,  2658,  4406,  -1646, 2180,  2127,  3007,
    3842,  2882,  4902,  1080,  2762,  -1646, 2953,  1580,  -1646, 1308,  1279,
    -1646, 3518,  4549,  686,   845,   1499,  4737,  4738,  2026,  3852,  3843,
    1610,  4821,  1408,  968,   3066,  663,   561,   2921,  663,   663,   2366,
    2279,  2763,  1305,  2027,  2292,  1522,  1523,  3657,  1611,  2860,  563,
    2430,  1409,  3914,  4822,  4542,  2208,  2861,  2183,  -517,  2862,  1610,
    3291,  3334,  2892,  1773,  1556,  4666,  1774,  571,   951,   572,   2743,
    1563,  2251,  2764,  1306,  3385,  4745,  3660,  1791,  574,   873,   3456,
    2758,  4039,  3835,  745,   1957,  3515,  1620,  2751,  576,   563,   3049,
    1525,  2659,  1780,  2893,  2028,  829,   952,   2719,  -2391, 2289,  663,
    1307,  830,   831,   832,   1323,  2617,  1381,  814,   3681,  1323,  4492,
    2029,  3661,  3173,  2783,  2788,  3699,  2167,  3700,  1564,  755,   1782,
    2894,  1609,  2369,  3201,  561,   953,   31,    4667,  1624,  1626,  3783,
    2176,  4746,  845,   4113,  1958,  4114,  3181,  3182,  3183,  3457,  3184,
    3185,  3186,  3187,  3188,  3189,  2895,  3342,  2702,  2208,  1413,  3393,
    39,    687,   3224,  4079,  652,   4080,  2519,  2519,  2765,  4517,  3460,
    2519,  1792,  874,   2129,  -2391, -2391, -2391, 954,   1796,  1797,  1798,
    1799,  1800,  1801,  3394,  653,   1253,  2896,  563,   3852,  1254,  1414,
    43,    3903,  571,   2020,  572,   688,   689,   3250,  2342,  756,   4858,
    2915,  3784,  2021,  3784,  2519,  2519,  1453,  2350,  1244,  2351,  875,
    4007,  1565,  3106,  2897,  3269,  2356,  577,   4489,  2022,  3269,  3650,
    4682,  184,   2362,  3269,  770,   -2391, 3269,  47,    1954,  3785,  -2391,
    3785,  571,   2863,  572,   4214,  873,   4490,  3701,  4695,  48,    177,
    2030,  181,   4166,  2168,  3786,  2169,  3702,  3859,  3269,  3027,  3345,
    3904,  3787,  2640,  3787,  4679,  1525,  876,   1566,  49,    -411,  3269,
    185,   1955,  -2391, 2958,  4115,  929,   4573,  930,   1245,  4008,  2457,
    50,    2167,  805,   2403,  1416,  2404,  3788,  2405,  4375,  2406,  1112,
    2407,  2863,  3859,  2214,  2408,  2853,  2450,  177,   2447,  181,   2448,
    2449,  4706,  4215,  4411,  3271,  1454,  2504,  3966,  3592,  3271,  2130,
    3596,  1240,  1789,  3271,  1059,  3322,  3271,  2261,  2137,  2441,  1956,
    2690,  3690,  646,   4630,  2215,  3967,  3860,  1509,  1417,  874,   571,
    4662,  572,   3361,  3617,  2131,  3,     4,     968,   3271,  1443,  1648,
    4633,  1346,  1567,  2031,  3295,  2493,  2494,  3274,  3716,  2363,  3271,
    2023,  2508,  2509,  1525,  3789,  2132,  3789,  2133,  2120,  1649,  1957,
    1310,  3860,  951,   2456,  2562,  2479,  875,   1999,  -411,  2216,  1444,
    3045,  1347,  4316,  1445,  4781,  2129,  3861,  2547,  3862,  -1459, 2217,
    4221,  4222,  4448,  3428,  4450,  3317,  -2391, 2127,  632,   2626,  -1459,
    952,   1311,  4569,  968,   -1459, 1284,  4337,  1446,  2000,  2168,  1285,
    2169,  1418,  2218,  3269,  4295,  4325,  14,    858,   1840,  4296,  1958,
    827,   3861,  876,   3862,  3429,  2109,  807,   2110,  1236,  1312,  3570,
    4300,  3004,  4543,  1348,  3526,  2001,  3005,  3094,  34,    4412,  3527,
    859,   2899,  1592,  4381,  -1459, 19,    828,   1820,  845,   3656,  3528,
    4278,  3430,  4279,  4280,  3124,  1419,  4281,  1420,  4301,  4297,  1593,
    4544,  1462,  -1459, 1349,  2739,  3283,  2175,  2901,  1286,  2900,  3269,
    814,   954,   1594,  3136,  2173,  3529,  4705,  3530,  2111,  1592,  2122,
    -2391, 3950,  1658,  3142,  4740,  1659,  3353,  1796,  1797,  1798,  1799,
    1800,  1801,  1422,  3271,  2902,  1350,  1593,  -1495, -1459, 3783,  2694,
    3951,  -1495, 2129,  1287,  2698,  -1459, 2105,  1713,  2701,  1596,  1714,
    4489,  2130,  3857,  2277,  2112,  835,   836,   837,   2649,  838,   839,
    840,   841,   842,   843,   1351,  3376,  864,   3573,  3146,  1424,  4490,
    2309,  2725,  2398,  916,   1773,  3582,  2131,  1774,  4868,  872,   3147,
    2192,  2193,  2194,  2195,  3148,  3396,  3531,  919,   4893,  1592,  3271,
    2668,  177,   1935,  663,   3727,  1936,  3286,  2132,  1938,  2133,  -1495,
    1939,  2782,  3784,  1780,  1426,  2709,  1593,  2712,  3525,  -2391, 2776,
    2397,  967,   3005,  2398,  3379,  921,   1263,  2482,  2706,  2231,  2232,
    4808,  2654,  2655,  3235,  34,    932,   2089,  2244,  1354,  2127,  3785,
    1782,  2187,  31,    924,   1355,  -1495, 2258,  28,    3532,  1125,  938,
    1356,  3174,  3533,  3786,  2617,  3175,  3176,  3177,  2090,  2617,  933,
    2819,  934,   3787,  663,   2617,  2854,  968,   39,    -1459, 1358,  946,
    3740,  2294,  2295,  2296,  2297,  3200,  1359,  3202,  3203,  2130,  3269,
    2410,  1235,  4729,  2411,  956,   3788,  3424,  3534,  1125,  932,   -516,
    3174,  3879,  2865,  955,   3175,  3176,  3177,  43,    3671,  3223,  3535,
    218,   2412,  3269,  2131,  2411,  546,   973,   3889,  3894,  2877,  3741,
    3327,  2769,  630,   957,   2918,  1580,  -2048, 2006,  1030,  2887,  34,
    2482,  1016,  39,    3837,  2132,  1360,  2133,  1025,  1580,  708,   2006,
    2911,  2444,  3906,  47,    2445,  1024,  -2391, 633,   932,   4580,  3226,
    -2391, 3227,  3676,  1462,  4889,  48,    3542,  1041,  3331,  3332,  3631,
    3632,  4292,  43,    4294,  1050,  3789,  2127,  4298,  2380,  4299,  3271,
    2383,  1253,  3228,  -2029, 49,    1254,  968,   1089,  2639,  2780,  2388,
    2640,  2781,  3354,  -2391, 1054,  4497,  2845,  634,   2396,  2846,  3536,
    2955,  2959,  3271,  2956,  2960,  646,   3692,  1313,  3366,  47,    1727,
    3052,  50,    2828,  2398,  3902,  663,   3098,  4062,  1085,  2411,  3352,
    48,    1093,  663,   3145,  663,   3154,  2398,  3160,  2398,  3161,  2398,
    2935,  2398,  1580,  1789,  1308,  1408,  3162,  3721,  2935,  2398,  49,
    3193,  1587,  1588,  2398,  3179,  2935,  3206,  2935,  2564,  2398,  2565,
    -1519, -1519, 50,    -1228, 1409,  -1228, 2519,  2519,  2519,  2519,  3280,
    3281,  2519,  2519,  2519,  2519,  2519,  2519,  2519,  2519,  2519,  2519,
    2566,  3269,  4538,  2332,  4856,  2333,  3229,  1314,  3763,  3211,  3411,
    3230,  3212,  3412,  3179,  1096,  3416,  3725,  3436,  3417,  3438,  3604,
    2998,  1099,  3605,  3629,  3986,  1102,  2398,  3722,  3180,  3443,  3723,
    3732,  4878,  1101,  3733,  3854,  3855,  -1458, -2391, 3451,  3135,  1103,
    1109,  4050,  2519,  2519,  3139,  2559,  3674,  -1458, 3028,  1580,  4355,
    2006,  -1458, 1315,  3033,  1110,  967,   3016,  177,   3743,  1371,  3826,
    2398,  3515,  3827,  3831,  1372,  3836,  3832,  3180,  2689,  3858,  1111,
    2996,  2411,  3479,  1112,  1113,  3558,  4805,  39,    4041,  1114,  2129,
    2411,  3271,  4092,  4110,  3677,  1705,  2398,  1115,  3111,  758,   2567,
    3020,  -1458, 3021,  4908,  2568,  3493,  3251,  1118,  3252,  2569,  -1496,
    1373,  1119,  4835,  28,    -1496, 1121,  4136,  43,    3125,  2445,  -1458,
    4148,  967,   1239,  2398,  845,   3111,  4199,  3060,  3062,  2689,  4205,
    1242,  -2391, 4206,  3071,  968,   3231,  968,   1246,  1796,  1797,  1798,
    1799,  1800,  1801,  2363,  3232,  4211,  4212,  1316,  2411,  2411,  4285,
    1247,  1248,  4286,  47,    759,   -1458, 3551,  1374,  3554,  4086,  4087,
    4088,  3875,  -1458, 1375,  4339,  48,    1376,  4340,  3543,  4386,  3545,
    1264,  4387,  -1496, 3664,  3253,  4388,  3254,  4565,  2398,  2213,  4000,
    4396,  4001,  3272,  2445,  49,    4468,  2788,  1252,  4469,  39,    3296,
    663,   1317,  1475,  3067,  3069,  3070,  2129,  50,    968,   3181,  3182,
    3183,  1271,  3184,  3185,  3186,  3187,  3188,  3189,  -1496, 4539,  4566,
    1274,  2411,  4567,  753,   3628,  760,   2130,  1377,  4582,  43,    1272,
    2445,  4590,  1318,  2570,  4591,  4595,  34,    4601,  2640,  1275,  3580,
    3272,  3610,  2571,  4603,  4615,  1282,  3580,  4616,  3181,  3182,  3183,
    2131,  3184,  3185,  3186,  3187,  3188,  3189,  1297,  3799,  4656,  1319,
    1765,  4657,  1298,  753,   1773,  47,    1308,  1774,  4678,  -2298, 4697,
    1819,  2132,  4616,  2133,  4894,  1338,  4895,  48,    2129,  1378,  1274,
    1379,  -1447, 3804,  3805,  3806,  -1458, 1320,  4337,  1321,  1281,  1380,
    1283,  -2300, 4165,  1780,  4168,  2772,  49,    1381,  1302,  -2391, 1343,
    1765,  4707,  3670,  2127,  2445,  4708,  1382,  4709,  3212,  4836,  2398,
    4719,  2741,  2742,  2640,  4722,  1365,  2562,  3580,  3685,  1367,  2753,
    1782,  2755,  1369,  1370,  4744,  2759,  1931,  2445,  2519,  1400,  1403,
    3244,  1322,  2130,  4750,  1404,  1402,  2445,  3694,  761,   4751,  1384,
    1385,  2445,  1405,  1407,  967,   3262,  3328,  1412,  4766,  -2298, 3987,
    4767,  4797,  2482,  4798,  2640,  4799,  2398,  2131,  2398,  753,   3717,
    3256,  3257,  3258,  4801,  1386,  4852,  2398,  2840,  3580,  1415,  1438,
    2129,  -2300, 2450,  177,   2447,  181,   2448,  2449,  2132,  3234,  2133,
    1439,  1451,  1460,  4512,  3287,  3350,  663,   1465,  3988,  4855,  2129,
    1708,  4609,  -2298, 3262,  4877,  1461,  752,   4616,  4891,  3971,  4917,
    4892,  1471,  4892,  -2298, 2130,  1470,  2541,  1476,  -2298, 2544,  2127,
    3989,  1478,  -2298, 1480,  1483,  -2300, -2391, -2298, 2872,  1487,  -2298,
    -2391, 1387,  -2298, 1488,  3990,  1494,  -2300, 1495,  3991,  2131,  1498,
    -2300, 1501,  1503,  1506,  1513,  -2300, 4266,  4267,  1516,  4269,  -2300,
    1518,  1509,  -2300, 1527,  967,   -2300, 3992,  1529,  -2298, 3993,  2132,
    4072,  2133,  1530,  -2391, -173,  1532,  1546,  1548,  1534,  4120,  3455,
    3994,  1555,  1557,  1561,  203,   1568,  -2298, 1573,  1575,  2932,  1574,
    -2300, 1576,  1580,  1584,  1583,  1586,  2941,  3420,  2943,  3461,  1600,
    3296,  2127,  1616,  2945,  1617,  1619,  1620,  3296,  3439,  -2300, 1627,
    1630,  1632,  1631,  1789,  1633,  1634,  1635,  2130,  1125,  4131,  1637,
    3174,  -2298, 1643,  -2298, 3175,  3176,  3177,  1644,  1642,  -2298, 1645,
    1647,  1652,  1657,  1682,  1710,  1715,  2130,  3414,  1717,  1718,  4138,
    2129,  2131,  -1650, 4355,  -2300, 1724,  -2300, 1725,  -1657, 1732,  1733,
    1734,  -2300, 3995,  1735,  1736,  50,    1738,  1739,  -1647, 1740,  3996,
    2131,  -1648, 2132,  1741,  2133,  1742,  1743,  1745,  1746,  1747,  1748,
    3017,  -1651, 1749,  -2298, -1649, 3449,  1805,  1750,  3490,  1751,  1752,
    1754,  2132,  1125,  2133,  1755,  3174,  1756,  -2391, 1807,  3175,  3176,
    3177,  1757,  3997,  1758,  2127,  4089,  -2300, 1759,  1760,  1761,  1809,
    1823,  1835,  1773,  1810,  4139,  1774,  1819,  1285,  1943,  1775,  1776,
    1777,  1843,  1287,  2127,  1972,  1974,  2004,  2006,  677,   3481,  1983,
    2002,  3078,  2129,  3080,  1778,  2003,  1125,  2007,  2009,  3174,  3489,
    2008,  1780,  3175,  3176,  3177,  2010,  2011,  1781,  2012,  2935,  2018,
    677,   -2298, 2037,  2049,  2043,  2935,  2935,  2071,  2075,  2935,  2129,
    2077,  2078,  2079,  2081,  2080,  2935,  2096,  2097,  2108,  1782,  2098,
    2120,  3517,  814,   -2298, -2300, -2298, -2298, 2130,  3517,  2123,  4289,
    2121,  -2391, 967,   2124,  967,   2125,  2127,  2126,  1796,  1797,  1798,
    1799,  1800,  1801,  2135,  2136,  2139,  -2300, 2140,  -2300, -2300, 2138,
    2144,  2131,  2145,  3179,  2153,  2155,  -2298, 2159,  4322,  -2298, -2298,
    -2298, 2160,  2163,  663,   4026,  2170,  4024,  4025,  2171,  3578,  663,
    2177,  3880,  2132,  2178,  2133,  1381,  2199,  2182,  4029,  -2300, 3144,
    2200,  -2300, -2300, -2300, 2204,  2205,  2188,  2227,  2226,  2189,  3555,
    2228,  2208,  2201,  2234,  2242,  3609,  967,   2209,  2243,  3907,  2212,
    2245,  2246,  3599,  177,   2127,  3659,  2257,  3180,  2256,  2130,  2262,
    2265,  2266,  2269,  556,   1783,  2270,  2273,  2278,  3179,  1784,  2298,
    1432,  2311,  3626,  177,   2293,  4050,  2315,  2314,  3673,  2323,  2327,
    2329,  2331,  3986,  2131,  2335,  2340,  2130,  2346,  1785,  1786,  2353,
    2348,  2355,  2349,  2459,  2360,  2354,  2357,  2358,  2359,  2361,  2370,
    2372,  1787,  2373,  2374,  2132,  3630,  2133,  2375,  2392,  2393,  2429,
    2131,  3179,  3272,  2423,  3272,  1304,  2442,  1125,  2536,  2487,  3174,
    2542,  3180,  3757,  3175,  3176,  3177,  2492,  1774,  2546,  2555,  1788,
    2596,  2132,  2575,  2133,  2561,  2595,  2127,  2573,  2610,  2624,  2631,
    2628,  1789,  2627,  2632,  1790,  2641,  759,   2642,  2650,  2651,  2652,
    4189,  2653,  2663,  2669,  2678,  4844,  4845,  2691,  2679,  2681,  2713,
    1094,  2692,  2717,  2127,  2693,  3180,  2715,  2710,  2718,  2724,  2729,
    2740,  2734,  2735,  2737,  2744,  2748,  2757,  2773,  2756,  2760,  2778,
    1236,  2830,  663,   2792,  1240,  4594,  3272,  1708,  2519,  2836,  2835,
    2847,  2805,  2844,  2848,  2849,  4594,  4389,  2864,  2906,  2903,  2917,
    2924,  2925,  2928,  4291,  2929,  2930,  2936,  2938,  2937,  2939,  2940,
    2944,  2947,  3738,  753,   2954,  1791,  2961,  2949,  3181,  3182,  3183,
    2972,  3184,  3185,  3186,  3187,  3188,  3189,  2986,  2990,  2988,  753,
    2997,  3003,  3296,  3006,  3011,  3013,  3012,  3014,  3023,  3025,  3026,
    3029,  3030,  3043,  3044,  3048,  3050,  3046,  3047,  3053,  3055,  3056,
    1765,  1609,  4507,  4509,  4501,  3058,  3059,  3074,  3057,  3072,  3088,
    3083,  3092,  3064,  4187,  4652,  3772,  3085,  3775,  3089,  3073,  4915,
    4916,  3357,  3093,  3358,  3359,  3360,  3097,  3100,  3101,  3765,  3766,
    3767,  3768,  3181,  3182,  3183,  3103,  3184,  3185,  3186,  3187,  3188,
    3189,  3102,  -2391, 3112,  2460,  3876,  4220,  -2314, 3116,  3115,  1792,
    2640,  1653,  1793,  1794,  1795,  3105,  1796,  1797,  1798,  1799,  1800,
    1801,  3123,  3114,  2629,  3126,  3131,  3133,  4228,  3137,  2630,  1091,
    3138,  3156,  4236,  3140,  3141,  3143,  3181,  3182,  3183,  3159,  3184,
    3185,  3186,  3187,  3188,  3189,  3157,  3158,  3163,  3164,  3170,  4251,
    3166,  -1909, 3169,  3225,  3242,  3192,  3180,  3208,  3198,  2398,  3220,
    3205,  3219,  3274,  3233,  3304,  4309,  3243,  4720,  3245,  3247,  3302,
    3246,  3249,  3308,  3325,  3298,  3279,  3312,  3306,  4262,  3319,  3333,
    3336,  3335,  3340,  3344,  3347,  3341,  3383,  -2314, 3349,  3356,  3372,
    3373,  3952,  3384,  3398,  3955,  3389,  3388,  3399,  3401,  4274,  3415,
    3442,  3446,  4584,  3517,  672,   3444,  674,   3407,  3447,  3453,  680,
    3450,  968,   3452,  3454,  694,   702,   672,   3462,  709,   3463,  3464,
    702,   702,   3465,  738,   3467,  741,   3466,  3468,  3469,  3470,  3933,
    -2314, 3471,  3934,  3473,  3935,  3932,  3475,  3472,  1767,  3484,  3482,
    4422,  -2314, 3474,  2519,  3476,  663,   -2314, 4437,  3480,  2197,  3494,
    -2314, 3477,  4447,  4658,  4498,  -2314, 3495,  3486,  -2314, 1773,  3501,
    -2314, 1774,  3502,  3504,  3519,  1775,  1776,  1777,  4640,  3488,  3507,
    663,   4643,  3522,  2935,  3556,  3565,  3550,  3549,  3567,  2935,  2935,
    1778,  2935,  4031,  2251,  3571,  3569,  -2314, 4648,  1780,  4650,  3580,
    3579,  4360,  3588,  1781,  3590,  3593,  3597,  3594,  3598,  3602,  3601,
    3614,  3625,  1602,  3636,  -2314, 3652,  3653,  3666,  3663,  3640,  3654,
    3642,  3665,  3633,  3634,  3667,  1782,  3655,  3181,  3182,  3183,  3675,
    3184,  3185,  3186,  3187,  3188,  3189,  2463,  3658,  3678,  3680,  1079,
    1080,  3174,  3684,  1708,  3195,  1727,  -1908, 3194,  3734,  3718,  -2314,
    3745,  -2314, 3719,  3693,  760,   3720,  3746,  -2314, 3758,  3774,  1346,
    3726,  3801,  3764,  3821,  796,   801,   801,   804,   3796,  801,   3824,
    810,   3749,  796,   3798,  738,   3829,  3782,  847,   3111,  2464,  4061,
    3839,  3816,  738,   3811,  3845,  738,   3866,  3813,  3874,  801,   1347,
    738,   4057,  177,   3881,  3815,  4712,  3883,  4875,  3645,  3868,  3646,
    3869,  -2314, 3882,  3648,  3886,  3884,  4721,  2465,  3272,  3895,  4501,
    4723,  3272,  4725,  3908,  845,   3909,  3910,  3911,  3923,  3924,  4536,
    1783,  3921,  3925,  3922,  3927,  1784,  2466,  3926,  3930,  3939,  3929,
    3940,  3947,  3963,  3965,  3890,  3975,  2467,  3977,  3978,  4455,  3968,
    3974,  1348,  3981,  4003,  1785,  1786,  677,   4100,  3616,  4011,  4100,
    4014,  4100,  3679,  4875,  2468,  4019,  4589,  4021,  1787,  2469,  2411,
    1773,  4472,  4027,  1774,  4035,  4037,  4043,  1775,  1776,  1777,  -2314,
    4875,  1349,  4038,  663,   4034,  4054,  4055,  4067,  4477,  4068,  4070,
    4071,  4073,  1778,  4090,  4074,  4085,  1788,  4094,  4076,  4096,  1780,
    4097,  -2314, 4101,  -2314, -2314, 1781,  968,   4102,  1789,  4104,  4112,
    1790,  4122,  2470,  1350,  4077,  4107,  4116,  4121,  4117,  4123,  4124,
    4125,  -1910, 4129,  4144,  4156,  4161,  4157,  1782,  4159,  4162,  4169,
    4170,  2471,  4174,  4175,  -2314, 4177,  4178,  -2314, -2314, -2314, 4180,
    4188,  4181,  1351,  4198,  4182,  4200,  4195,  4202,  4207,  4208,  4216,
    4239,  4232,  4240,  4233,  4241,  4252,  4261,  4270,  4255,  4259,  4277,
    4264,  4302,  4265,  4303,  4315,  4310,  4320,  4319,  1352,  4321,  4323,
    3262,  4326,  4329,  4350,  3262,  4331,  4341,  4351,  4352,  4353,  4348,
    4184,  1791,  4186,  4366,  4361,  4372,  4373,  203,   4383,  4385,  4382,
    4392,  4390,  4393,  4394,  4862,  4395,  1708,  4401,  4408,  1353,  4415,
    4419,  4441,  34,    4201,  4435,  4444,  1354,  4449,  4439,  4495,  4190,
    177,   2472,  1355,  4246,  4461,  4465,  4445,  4474,  2473,  1356,  4499,
    4506,  4479,  1783,  2474,  4256,  4464,  1357,  1784,  4480,  4312,  4513,
    3479,  4520,  4010,  4484,  4522,  4525,  4523,  1358,  4526,  4541,  4527,
    4547,  4548,  4546,  4568,  1359,  4551,  1785,  1786,  4553,  4556,  4557,
    4572,  4570,  2475,  4571,  4585,  2476,  4588,  4592,  4597,  4600,  1787,
    4234,  3870,  3871,  3872,  3873,  4605,  1792,  4604,  4607,  1793,  1794,
    1795,  2477,  1796,  1797,  1798,  1799,  1800,  1801,  4632,  4613,  1708,
    4609,  2545,  4624,  1708,  1708,  4647,  4663,  4668,  1788,  4634,  4673,
    4675,  4672,  4680,  1360,  2478,  4686,  663,   4692,  882,   4693,  1789,
    4694,  4701,  738,   4711,  796,   4702,  4704,  801,   4703,  804,   4710,
    801,   4727,  4718,  4724,  4249,  4250,  4728,  847,   4732,  4253,  4254,
    943,   4272,  4273,  4731,  4743,  4734,  4747,  801,   4641,  4756,  2935,
    4757,  2935,  2935,  4760,  1773,  2935,  4762,  1774,  4768,  4765,  967,
    1775,  1776,  1777,  4293,  4770,  4739,  4771,  4778,  796,   4779,  4786,
    4787,  4814,  804,   4818,  4758,  4759,  1778,  796,   3272,  4795,  4826,
    847,   4780,  3272,  1780,  4700,  3759,  4847,  3272,  4853,  1781,  3272,
    4807,  4865,  4809,  1791,  4886,  4825,  801,   4830,  4887,  4890,  845,
    4896,  663,   4884,  3111,  4885,  4897,  4900,  4333,  4904,  4905,  4911,
    1782,  3272,  4909,  4912,  4913,  2210,  4910,  1368,  1411,  2992,  1276,
    1436,  3289,  2834,  3272,  1842,  3900,  1435,  4335,  177,   3296,  3395,
    3506,  4004,  2916,  4354,  3983,  4654,  4500,  4755,  4550,  845,   4023,
    738,   4307,  4552,  4535,  3338,  3099,  4810,  4453,  4736,  4860,  3343,
    4763,  4761,  738,   4824,  1108,  4058,  4042,  4018,  2970,  2971,  3898,
    4100,  968,   4476,  3409,  4100,  4100,  4030,  4100,  4324,  3575,  2290,
    2962,  4864,  1221,  1221,  4914,  738,   702,   4524,  1792,  4901,  702,
    1793,  1794,  1795,  3523,  1796,  1797,  1798,  1799,  1800,  1801,  3520,
    4828,  4478,  738,   4749,  2272,  4815,  738,   4481,  3111,  679,   3111,
    1702,  1221,  4091,  4619,  2684,  4064,  1783,  3326,  4699,  814,   1712,
    1784,  2453,  738,   2454,  3483,  969,   4838,  4903,  1042,  2455,  2635,
    2402,  1249,  2636,  738,   4046,  3293,  4191,  4804,  3833,  2017,  1785,
    1786,  1815,  3294,  2662,  3303,  3262,  1969,  1968,  3812,  4726,  3262,
    1772,  4800,  3262,  1787,  3301,  1773,  4185,  2661,  1774,  1973,  3777,
    4155,  1775,  1776,  1777,  3773,  4167,  4599,  3272,  4717,  4716,  3305,
    2347,  3834,  738,   1940,  3635,  4583,  4446,  1778,  3728,  4438,  1779,
    3035,  1788,  4802,  4794,  1780,  1978,  4803,  738,   3297,  2600,  1781,
    3240,  801,   801,   1789,  4440,  3238,  1790,  3151,  1346,  2609,  3517,
    1773,  0,     0,     1774,  0,     0,     0,     0,     0,     0,     0,
    0,     1782,  0,     0,     702,   702,   0,     0,     0,     0,     0,
    0,     3035,  0,     3272,  0,     0,     0,     0,     1347,  0,     1780,
    0,     0,     0,     0,     2935,  -2391, 0,     796,   0,     1346,  0,
    0,     663,   0,     0,     967,   0,     0,     796,   4504,  0,     4505,
    847,   0,     0,     4510,  4511,  0,     0,     1782,  0,     0,     0,
    0,     0,     0,     0,     801,   0,     0,     1791,  0,     1347,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     738,   0,     1348,
    0,     0,     0,     0,     801,   801,   0,     0,     0,     0,     0,
    0,     4540,  177,   0,     0,     0,     0,     0,     0,     0,     738,
    738,   738,   0,     801,   0,     796,   0,     1783,  0,     0,     1349,
    0,     1784,  0,     0,     0,     3750,  4561,  177,   0,     0,     0,
    1348,  0,     0,     4674,  0,     0,     0,     0,     0,     0,     0,
    1785,  1786,  0,     0,     0,     0,     0,     3036,  0,     0,     0,
    0,     1350,  0,     0,     1787,  0,     0,     0,     0,     753,   0,
    1349,  1792,  -2391, 0,     1793,  1794,  1795,  -2391, 1796,  1797,  1798,
    1799,  1800,  1801,  0,     0,     801,   753,   801,   801,   0,     3165,
    1351,  0,     1788,  0,     0,     0,     3262,  0,     3036,  0,     0,
    0,     0,     1350,  3272,  1789,  0,     1765,  1790,  1773,  845,   -2391,
    1774,  0,     1221,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1765,  0,     0,     3272,  0,     0,     0,     0,
    0,     1351,  0,     0,     0,     0,     0,     1780,  0,     0,     1685,
    1685,  0,     -2391, 0,     738,   4268,  672,   0,     0,     0,     1789,
    34,    0,     0,     0,     1354,  0,     4655,  0,     4271,  0,     0,
    1355,  0,     0,     0,     1782,  1716,  0,     1356,  738,   0,     0,
    1722,  0,     0,     0,     2090,  0,     0,     0,     1791,  0,     0,
    0,     0,     1221,  0,     0,     1358,  0,     0,     0,     0,     4774,
    0,     34,    1359,  0,     0,     3037,  0,     0,     1773,  0,     0,
    1774,  1355,  0,     0,     1775,  1776,  1777,  0,     1356,  1221,  0,
    3038,  0,     0,     0,     0,     2090,  4687,  177,   0,     0,     1778,
    0,     0,     3753,  -2391, 0,     0,     1358,  1780,  0,     0,     0,
    0,     4336,  1781,  1359,  1221,  1221,  1221,  0,     1221,  0,     0,
    0,     1360,  4813,  0,     0,     3039,  3616,  0,     0,     0,     0,
    0,     3038,  0,     0,     1782,  0,     1221,  0,     0,     0,     -2391,
    0,     0,     1792,  0,     -2391, 1793,  1794,  1795,  0,     1796,  1797,
    1798,  1799,  1800,  1801,  0,     3272,  0,     0,     0,     0,     0,
    814,   814,   1360,  0,     0,     0,     3039,  0,     0,     0,     0,
    738,   0,     0,     1221,  0,     0,     0,     -2391, 0,     0,     967,
    0,     0,     0,     0,     0,     0,     0,     0,     -2391, 0,     0,
    0,     3111,  0,     0,     1796,  1797,  1798,  1799,  1800,  1801,  1221,
    0,     0,     0,     1221,  1221,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     738,   738,   1982,  0,     1789,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1783,
    0,     0,     0,     702,   1784,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1785,  1786,  0,     0,     0,     0,     0,     0,
    4456,  4458,  4458,  0,     4907,  0,     0,     1787,  702,   0,     0,
    0,     0,     0,     0,     0,     814,   814,   0,     0,     0,     738,
    2104,  0,     0,     0,     0,     0,     738,   0,     0,     801,   0,
    -2391, 0,     0,     0,     0,     1788,  0,     0,     0,     4829,  177,
    0,     0,     0,     0,     0,     0,     0,     1789,  0,     847,   1790,
    738,   4843,  177,   4840,  181,   4841,  4842,  0,     738,   0,     0,
    738,   4883,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     4874,  0,     0,     0,
    0,     0,     738,   0,     0,     0,     0,     0,     0,     0,     801,
    801,   801,   801,   738,   0,     0,     0,     0,     4843,  4882,  4840,
    181,   4841,  4842,  702,   0,     0,     738,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     -2391, 2222,  0,     738,   4873,  0,
    1791,  1796,  1797,  1798,  1799,  1800,  1801,  0,     801,   801,   0,
    4562,  0,     0,     4874,  0,     0,     801,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     801,   0,     0,     0,     0,     0,
    4874,  4843,  177,   4840,  181,   4841,  4842,  0,     0,     0,     0,
    0,     0,     738,   0,     0,     0,     0,     0,     0,     0,     0,
    801,   801,   801,   801,   0,     4873,  0,     0,     0,     0,     0,
    0,     738,   0,     0,     0,     0,     0,     0,     738,   0,     0,
    2222,  0,     4873,  0,     0,     0,     0,     0,     0,     0,     796,
    0,     0,     0,     0,     0,     1792,  804,   0,     1793,  1794,  1795,
    1221,  1796,  1797,  1798,  1799,  1800,  1801,  0,     0,     0,     0,
    0,     0,     0,     3215,  0,     1371,  0,     4625,  0,     1773,  0,
    1372,  1774,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     796,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     847,   0,     0,     0,     801,   1780,  4649,  801,
    4651,  0,     0,     -2391, 0,     0,     0,     1373,  0,     801,   0,
    0,     0,     0,     0,     0,     0,     801,   801,   0,     0,     0,
    738,   0,     0,     0,     0,     1782,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1685,  0,     0,     0,     0,     0,     0,     801,
    0,     796,   0,     1374,  0,     738,   738,   0,     801,   1773,  1375,
    0,     1774,  1376,  0,     738,   1775,  1776,  1777,  0,     0,     0,
    738,   0,     0,     0,     0,     672,   672,   0,     0,     2462,  0,
    1778,  0,     1221,  3754,  1221,  0,     0,     0,     1780,  1221,  1221,
    0,     0,     0,     1781,  0,     1221,  1221,  1221,  0,     0,     0,
    1221,  847,   1221,  1221,  1221,  1221,  1221,  1221,  0,     1221,  0,
    1221,  1221,  0,     1377,  1221,  1782,  0,     4458,  0,     0,     0,
    -2391, 0,     0,     0,     0,     -2391, 0,     0,     1221,  1221,  1221,
    1221,  0,     0,     0,     801,   1221,  0,     0,     0,     1221,  0,
    0,     1221,  0,     0,     1221,  1221,  1221,  1221,  1221,  1221,  1221,
    1221,  1221,  0,     1221,  0,     0,     0,     0,     -2391, 738,   1221,
    0,     1221,  0,     0,     0,     1378,  1773,  1379,  738,   1774,  4769,
    0,     0,     1775,  1776,  1777,  0,     1380,  0,     0,     0,     0,
    0,     0,     0,     1381,  0,     0,     0,     0,     1778,  0,     0,
    0,     0,     1382,  0,     0,     1780,  0,     0,     1789,  0,     0,
    1781,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1783,  0,     0,     0,     0,     1784,  0,     0,     0,     0,     0,
    0,     0,     1782,  1383,  0,     0,     1384,  1385,  0,     0,     0,
    0,     0,     0,     0,     1785,  1786,  0,     4817,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1787,  1773,  0,
    1386,  1774,  0,     0,     0,     1775,  1776,  1777,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1773,
    1778,  -2391, 1774,  738,   0,     738,   1788,  1221,  1780,  0,     0,
    0,     0,     0,     1781,  0,     0,     0,     0,     1789,  0,     0,
    1790,  4863,  0,     0,     0,     0,     0,     0,     0,     1780,  0,
    0,     0,     0,     0,     -2391, 1782,  0,     0,     1387,  738,   0,
    0,     0,     0,     0,     0,     2670,  0,     2677,  1783,  0,     0,
    0,     0,     1784,  0,     0,     0,     1782,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1785,  1786,  804,   0,     0,     0,     0,     0,     0,     0,
    0,     672,   0,     672,   0,     1787,  -2391, 0,     0,     0,     0,
    0,     1791,  1796,  1797,  1798,  1799,  1800,  1801,  0,     1221,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     796,   0,
    801,   801,   0,     1788,  4142,  796,   0,     847,   0,     801,   0,
    801,   0,     0,     0,     801,   1789,  0,     738,   1790,  0,     0,
    1783,  0,     0,     0,     0,     1784,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     702,   0,     0,     0,     0,     0,     0,
    0,     -2391, 826,   2104,  1785,  1786,  -2391, 0,     0,     0,     2790,
    856,   0,     0,     0,     0,     2800,  0,     0,     1787,  871,   0,
    0,     738,   0,     0,     0,     0,     1792,  0,     0,     1793,  1794,
    1795,  0,     1796,  1797,  1798,  1799,  1800,  1801,  0,     -2391, 738,
    0,     3521,  0,     2842,  2842,  0,     1788,  0,     0,     1791,  0,
    0,     804,   0,     0,     0,     0,     0,     0,     1789,  0,     0,
    1790,  0,     0,     0,     0,     0,     0,     801,   0,     1371,  0,
    0,     0,     0,     0,     1372,  0,     0,     0,     0,     1789,  0,
    0,     0,     1371,  0,     0,     0,     0,     0,     1372,  0,     0,
    0,     2905,  0,     2908,  2910,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1373,  0,     0,     0,     0,     0,     0,     0,     801,   0,     0,
    0,     0,     0,     0,     1373,  801,   0,     801,   0,     0,     0,
    0,     1791,  801,   1792,  0,     0,     1793,  1794,  1795,  0,     1796,
    1797,  1798,  1799,  1800,  1801,  1221,  0,     1773,  0,     3686,  1774,
    0,     0,     -2391, 1775,  1776,  1777,  0,     1374,  2104,  0,     0,
    2842,  0,     738,   1375,  0,     2993,  1376,  0,     672,   1778,  0,
    1374,  0,     0,     0,     0,     0,     1780,  1375,  0,     0,     1376,
    0,     1781,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     2905,  0,     0,     0,     0,     0,     0,     0,     0,     801,
    3019,  0,     0,     1782,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1792,  1377,  0,     1793,  1794,
    1795,  1221,  1796,  1797,  1798,  1799,  1800,  1801,  0,     0,     0,
    1377,  3737,  0,     0,     0,     3063,  0,     -2391, 0,     0,     0,
    0,     0,     0,     1796,  1797,  1798,  1799,  1800,  1801,  801,   0,
    801,   2842,  801,   2842,  1773,  0,     0,     1774,  0,     0,     0,
    1775,  1776,  1777,  0,     0,     0,     0,     0,     0,     1378,  0,
    1379,  0,     0,     0,     1221,  0,     1778,  0,     0,     0,     1380,
    0,     0,     1378,  1780,  1379,  0,     1685,  1381,  0,     1781,  0,
    0,     0,     0,     1380,  0,     0,     1382,  0,     3035,  1783,  0,
    1381,  0,     0,     1784,  0,     0,     0,     0,     0,     0,     1382,
    1782,  0,     0,     0,     0,     1346,  880,   0,     0,     0,     0,
    915,   0,     1785,  1786,  738,   0,     0,     1440,  0,     0,     1384,
    1385,  0,     0,     796,   0,     0,     1787,  0,     0,     796,   0,
    1466,  0,     0,     1384,  1385,  1347,  0,     0,     0,     801,   0,
    0,     0,     0,     0,     1441,  1221,  0,     0,     0,     0,     1221,
    0,     0,     0,     0,     1788,  0,     0,     0,     1467,  0,     0,
    0,     0,     0,     0,     0,     0,     1789,  0,     0,     1790,  0,
    1221,  1221,  1221,  1773,  0,     1221,  1774,  0,     0,     0,     1775,
    1776,  1777,  1221,  1221,  1221,  1221,  0,     1348,  0,     0,     0,
    0,     0,     0,     0,     1221,  1778,  1783,  1221,  0,     1221,  0,
    1784,  1387,  1780,  0,     0,     0,     0,     0,     1781,  1221,  1221,
    0,     0,     1221,  0,     0,     1387,  0,     1349,  0,     0,     1785,
    1786,  0,     0,     847,   0,     1221,  0,     1221,  0,     1221,  1782,
    0,     0,     0,     1787,  0,     0,     0,     0,     0,     0,     1791,
    1106,  0,     0,     0,     3036,  0,     0,     1221,  1371,  1350,  0,
    738,   0,     0,     1372,  0,     0,     0,     3273,  0,     1221,  1221,
    1221,  1788,  0,     1228,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1789,  0,     1221,  1790,  0,     1351,  0,     0,
    1251,  0,     0,     0,     0,     0,     1221,  0,     0,     0,     1373,
    1221,  0,     0,     0,     0,     0,     1221,  0,     0,     0,     0,
    1277,  0,     0,     0,     0,     3273,  0,     0,     3311,  0,     0,
    3314,  0,     2677,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1792,  1783,  0,     1793,  1794,  1795,  1784,
    1796,  1797,  1798,  1799,  1800,  1801,  1374,  0,     34,    0,     3820,
    0,     1354,  1375,  0,     0,     1376,  0,     1791,  1355,  1785,  1786,
    1221,  0,     2842,  0,     1356,  0,     0,     1685,  0,     0,     0,
    0,     2090,  1787,  0,     0,     1397,  0,     0,     0,     0,     0,
    0,     0,     1358,  0,     0,     0,     0,     0,     0,     0,     1359,
    801,   0,     801,   801,   801,   0,     0,     0,     0,     0,     0,
    1788,  0,     0,     0,     0,     0,     1377,  0,     3038,  0,     0,
    0,     0,     1789,  0,     0,     1790,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1360,  0,
    0,     1792,  3039,  0,     1793,  1794,  1795,  0,     1796,  1797,  1798,
    1799,  1800,  1801,  0,     0,     0,     0,     3847,  1378,  0,     1379,
    0,     0,     0,     0,     0,     0,     1520,  0,     0,     1380,  0,
    0,     0,     0,     0,     0,     0,     1381,  0,     0,     0,     0,
    0,     0,     0,     0,     738,   1382,  1791,  0,     1550,  1553,  1554,
    0,     0,     0,     1773,  0,     0,     1774,  0,     0,     0,     1775,
    1776,  1777,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1778,  2072,  0,     0,     1384,  1385,
    0,     0,     1780,  0,     0,     0,     0,     0,     1781,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2073,  0,     0,     0,     0,     0,     0,     1782,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     801,   0,
    0,     0,     0,     0,     0,     2842,  2842,  0,     0,     0,     0,
    1792,  0,     0,     1793,  1794,  1795,  0,     1796,  1797,  1798,  1799,
    1800,  1801,  0,     0,     0,     0,     4108,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     738,   738,   0,     0,     0,
    1387,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    738,   0,     1228,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1685,  738,   0,     0,     0,     0,     0,
    2051,  0,     1685,  738,   738,   0,     1228,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     1783,  0,     0,     0,     738,   1784,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2052,  0,     0,     0,     0,     0,     0,     0,     0,     1785,  1786,
    0,     0,     2053,  0,     1599,  0,     0,     0,     0,     0,     0,
    0,     0,     1787,  0,     0,     2054,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     801,   0,     801,   0,
    0,     0,     801,   0,     0,     0,     0,     0,     0,     1636,  0,
    1788,  0,     0,     0,     0,     0,     1646,  796,   0,     0,     0,
    2055,  1654,  1789,  0,     0,     1790,  738,   0,     0,     0,     0,
    2056,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    738,   0,     0,     0,     0,     0,     0,     0,     0,     2057,  0,
    0,     801,   0,     2058,  0,     0,     0,     0,     1221,  1844,  0,
    0,     0,     0,     0,     0,     0,     1221,  0,     0,     0,     0,
    0,     1221,  0,     1221,  0,     0,     1221,  0,     0,     0,     0,
    1221,  1221,  1221,  1221,  0,     0,     1221,  1221,  1221,  1221,  1221,
    1221,  1221,  1221,  1221,  1221,  0,     1791,  0,     1221,  1221,  0,
    0,     0,     1980,  0,     0,     0,     0,     1221,  0,     0,     0,
    1221,  0,     0,     0,     1221,  0,     2059,  0,     0,     0,     0,
    0,     1221,  0,     0,     1221,  0,     1221,  0,     0,     0,     0,
    0,     0,     0,     0,     1221,  0,     0,     1221,  1221,  0,     0,
    0,     1221,  1221,  0,     2060,  0,     3761,  0,     1221,  0,     0,
    0,     0,     0,     0,     738,   738,   738,   796,   0,     3273,  3781,
    0,     0,     0,     3781,  0,     3795,  0,     0,     2099,  0,     0,
    1221,  203,   0,     0,     2119,  0,     1221,  1221,  1221,  0,     0,
    1792,  0,     0,     1793,  1794,  1795,  0,     1796,  1797,  1798,  1799,
    1800,  1801,  0,     0,     0,     0,     4143,  0,     0,     2152,  1221,
    0,     0,     2061,  0,     0,     0,     2158,  0,     2062,  2161,  2677,
    2063,  1221,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3853,  1685,  1685,  0,     2222,  0,     0,     2064,  0,     0,     0,
    0,     2196,  0,     2065,  0,     0,     0,     0,     0,     0,     2066,
    801,   801,   801,   801,   2211,  0,     2067,  1371,  0,     586,   0,
    0,     0,     1372,  0,     631,   0,     2223,  0,     0,     0,     0,
    0,     0,     0,     682,   0,     0,     0,     0,     0,     2068,  0,
    0,     0,     0,     0,     0,     0,     3897,  0,     0,     0,     0,
    750,   750,   0,     0,     0,     0,     0,     0,     0,     1373,  0,
    0,     0,     0,     0,     0,     0,     1773,  0,     0,     1774,  0,
    2276,  0,     1775,  1776,  1777,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1778,  0,     2310,
    0,     1773,  0,     0,     1774,  1780,  2322,  0,     1775,  1776,  1777,
    1781,  0,     0,     0,     0,     1374,  0,     0,     0,     0,     0,
    0,     1375,  0,     1778,  1376,  0,     0,     0,     0,     0,     0,
    1780,  3969,  1782,  0,     0,     0,     1781,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1782,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     738,   0,
    801,   0,     1221,  0,     0,     1377,  0,     0,     738,   0,     0,
    0,     0,     0,     4017,  0,     0,     0,     0,     0,     0,     0,
    0,     2104,  0,     809,   0,     0,     0,     0,     0,     2400,  0,
    849,   0,     0,     853,   854,   0,     857,   0,     0,     863,   738,
    865,   0,     0,     0,     0,     0,     0,     0,     0,     2905,  0,
    0,     0,     0,     0,     0,     0,     4051,  1378,  1783,  1379,  0,
    0,     0,     1784,  1228,  1228,  738,   0,     0,     1380,  2222,  0,
    0,     0,     1221,  1221,  0,     1381,  0,     0,     0,     2452,  0,
    0,     1785,  1786,  1783,  1382,  0,     0,     0,     1784,  0,     0,
    0,     2337,  0,     0,     0,     1787,  0,     0,     0,     0,     0,
    0,     0,     0,     2842,  0,     2842,  0,     1785,  1786,  0,     0,
    0,     0,     0,     0,     738,   2141,  0,     0,     1384,  1385,  0,
    1787,  0,     0,     1788,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1789,  2367,  0,     1790,  0,     2371,
    0,     1221,  2142,  0,     0,     2377,  2378,  0,     0,     1788,  0,
    0,     1221,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    1789,  0,     0,     1790,  0,     0,     2394,  2608,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     2623,  0,     0,     1221,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     1221,  1221,  0,
    0,     0,     0,     0,     1221,  1221,  0,     0,     0,     1221,  1387,
    0,     0,     0,     1221,  0,     0,     1221,  1221,  0,     1791,  0,
    1221,  4147,  0,     0,     0,     0,     1221,  738,   738,   738,   738,
    0,     0,     0,     3781,  3795,  0,     3781,  0,     0,     4158,  0,
    0,     0,     3273,  0,     1791,  0,     3273,  0,     0,     0,     0,
    0,     4173,  0,     0,     0,     0,     0,     1221,  0,     0,     0,
    0,     1221,  0,     0,     0,     0,     0,     1221,  0,     0,     0,
    0,     0,     0,     847,   0,     0,     0,     0,     0,     0,     0,
    1221,  0,     0,     3311,  0,     0,     0,     0,     2677,  0,     0,
    0,     2634,  0,     2637,  0,     0,     0,     0,     0,     1371,  672,
    0,     0,     1221,  1792,  1372,  0,     1793,  1794,  1795,  0,     1796,
    1797,  1798,  1799,  1800,  1801,  0,     0,     0,     0,     4380,  0,
    2842,  2842,  0,     0,     0,     0,     0,     1228,  0,     1792,  0,
    0,     1793,  1794,  1795,  0,     1796,  1797,  1798,  1799,  1800,  1801,
    1373,  0,     0,     4235,  4391,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     918,   0,     0,
    0,     0,     0,     0,     0,     926,   0,     0,     0,     0,     0,
    0,     939,   0,     0,     944,   945,   1221,  0,     0,     947,   0,
    0,     0,     0,     0,     0,     0,     0,     1374,  0,     964,   0,
    0,     0,     0,     1375,  801,   0,     1376,  0,     0,     0,     0,
    0,     972,   0,     0,     0,     0,     0,     801,   0,     0,     0,
    0,     0,     0,     0,     0,     1032,  0,     1036,  0,     0,     1038,
    0,     1040,  0,     0,     1044,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     2633,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1221,  0,     0,     0,     1377,  0,     0,     0,
    0,     0,     0,     796,   0,     0,     0,     0,     2104,  0,     2810,
    0,     0,     0,     0,     0,     1685,  0,     1773,  0,     0,     1774,
    0,     0,     0,     1775,  1776,  1777,  0,     0,     2837,  0,     0,
    801,   3019,  0,     0,     0,     0,     1107,  0,     0,     1778,  0,
    0,     0,     0,     0,     0,     0,     1780,  0,     0,     1378,  0,
    1379,  1781,  0,     0,     0,     0,     0,     738,   0,     0,     1380,
    0,     0,     1773,  0,     0,     1774,  0,     1381,  0,     1775,  1776,
    1777,  0,     0,     1782,  0,     0,     1382,  0,     0,     0,     0,
    0,     0,     0,     0,     1778,  0,     750,   0,     0,     0,     0,
    0,     1780,  1221,  0,     0,     0,     0,     1781,  0,     0,     0,
    1221,  0,     0,     0,     0,     0,     0,     2785,  0,     0,     1384,
    1385,  0,     0,     0,     0,     0,     1221,  1221,  0,     1782,  1221,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     796,   3781,  1386,  0,     0,     3273,  0,     0,     0,
    1337,  3273,  0,     0,     3273,  4417,  0,     2905,  0,     4421,  0,
    2989,  1221,  1221,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     3853,  0,     0,     1783,  0,
    0,     0,     0,     1784,  0,     0,     0,     0,     3853,  847,   801,
    801,   801,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1387,  1785,  1786,  0,     0,     0,     0,     0,     0,     1469,
    1773,  0,     0,     1774,  0,     0,     1787,  1775,  1776,  1777,  0,
    0,     0,     0,     1481,  1783,  0,     0,     796,   847,   1784,  0,
    0,     0,     1778,  0,     1492,  0,     1493,  0,     0,     0,     1780,
    0,     0,     0,     1496,  1788,  1781,  0,     0,     1785,  1786,  0,
    0,     0,     0,     0,     1511,  0,     1789,  1515,  0,     1790,  0,
    0,     1787,  0,     0,     0,     0,     0,     1782,  0,     0,     1685,
    1685,  0,     0,     796,   0,     0,     738,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     4017,  0,     0,     0,     1560,  1788,
    738,   0,     2842,  0,     0,     0,     0,     0,     2104,  0,     0,
    0,     1789,  0,     1371,  1790,  0,     0,     0,     0,     1372,  4051,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     801,
    738,   3853,  3128,  0,     0,     0,     0,     0,     0,     0,     1791,
    0,     0,     0,     0,     1773,  0,     0,     1774,  0,     0,     0,
    1775,  1776,  1777,  0,     0,     1373,  0,     0,     1221,  0,     0,
    1221,  0,     1221,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1783,  1780,  0,     3054,  0,     1784,  0,     1781,  0,
    0,     0,     0,     0,     1221,  1791,  0,     0,     3273,  0,     0,
    0,     4421,  0,     0,     0,     3075,  1785,  1786,  1221,  0,     0,
    1782,  1374,  0,     0,     0,     0,     4612,  0,     1375,  3084,  1787,
    1376,  3086,  3087,  0,     0,     1221,  3090,  3091,  0,     0,     0,
    1703,  0,     3095,  0,     1792,  0,     801,   1793,  1794,  1795,  738,
    1796,  1797,  1798,  1799,  1800,  1801,  0,     0,     1788,  0,     4400,
    0,     0,     1371,  0,     0,     0,     0,     0,     1372,  0,     1789,
    1221,  0,     1790,  0,     0,     0,     0,     801,   801,   801,   801,
    0,     1377,  0,     0,     0,     0,     0,     0,     0,     3255,  1792,
    1685,  0,     1793,  1794,  1795,  0,     1796,  1797,  1798,  1799,  1800,
    1801,  0,     3134,  0,     1373,  4403,  0,     0,     796,   0,     0,
    0,     0,     0,     0,     0,     0,     1783,  0,     0,     0,     0,
    1784,  0,     738,   0,     0,     0,     0,     1221,  0,     0,     0,
    0,     0,     0,     1378,  0,     1379,  0,     0,     0,     0,     1785,
    1786,  0,     0,     1791,  1380,  0,     0,     0,     0,     0,     0,
    1374,  1381,  0,     1787,  0,     0,     0,     1375,  0,     0,     1376,
    1382,  0,     0,     0,     0,     1221,  0,     0,     796,   0,     0,
    0,     0,     0,     0,     0,     0,     1221,  0,     0,     0,     0,
    1221,  1788,  1221,  0,     1221,  0,     0,     0,     0,     0,     0,
    3853,  2880,  0,     1789,  1384,  1385,  801,   0,     847,   0,     0,
    0,     0,     750,   1942,  0,     0,     0,     1221,  0,     0,     0,
    1377,  0,     0,     0,     0,     0,     0,     0,     1773,  2881,  0,
    1774,  0,     0,     0,     1775,  1776,  1777,  0,     1792,  0,     0,
    1793,  1794,  1795,  0,     1796,  1797,  1798,  1799,  1800,  1801,  1778,
    1371,  0,     0,     4451,  0,     0,     1372,  1780,  0,     801,   0,
    0,     0,     1781,  0,     796,   0,     0,     0,     0,     0,     0,
    0,     0,     1378,  0,     1379,  0,     0,     1791,  2070,  0,     0,
    0,     0,     0,     1380,  1782,  0,     1387,  0,     0,     1221,  1221,
    1381,  0,     1373,  2905,  0,     0,     0,     0,     0,     1221,  1382,
    0,     4612,  0,     0,     0,     2677,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     796,   0,     0,     0,
    0,     0,     3441,  0,     0,     0,     801,   0,     0,     0,     0,
    2919,  0,     2151,  1384,  1385,  0,     0,     0,     0,     1374,  0,
    0,     0,     2104,  0,     0,     1375,  0,     0,     1376,  0,     3853,
    3348,  0,     0,     0,     0,     796,   796,   1221,  2920,  0,     0,
    0,     1792,  0,     0,     1793,  1794,  1795,  0,     1796,  1797,  1798,
    1799,  1800,  1801,  0,     1221,  0,     0,     0,     0,     0,     1783,
    801,   0,     0,     0,     1784,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1377,  0,
    0,     0,     0,     1785,  1786,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1387,  0,     1787,  0,     3400,  0,
    3402,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     3547,  3548,  0,     2268,  0,     -127,  0,
    0,     0,     0,     0,     0,     1788,  1221,  1221,  0,     3557,  0,
    1378,  0,     1379,  0,     0,     1,     0,     1789,  0,     796,   1790,
    0,     1380,  0,     3574,  2,     0,     3,     4,     0,     1381,  796,
    796,   3583,  3585,  0,     0,     0,     0,     0,     1382,  0,     5,
    0,     0,     0,     0,     0,     0,     0,     3603,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     6,     0,     7,
    8,     0,     0,     0,     0,     9,     0,     10,    0,     3377,  0,
    0,     1384,  1385,  0,     0,     3478,  0,     11,    0,     12,    0,
    3485,  0,     0,     0,     0,     0,     2365,  0,     0,     0,     0,
    1791,  0,     0,     0,     13,    0,     3378,  14,    0,     2379,  0,
    0,     2382,  0,     2384,  0,     2385,  0,     0,     15,    0,     16,
    2387,  0,     0,     17,    0,     0,     0,     0,     0,     18,    0,
    0,     1371,  0,     0,     0,     0,     19,    1372,  20,    0,     0,
    0,     0,     0,     21,    0,     0,     0,     0,     0,     1228,  0,
    0,     0,     0,     0,     0,     0,     0,     22,    0,     0,     0,
    0,     1942,  0,     1387,  0,     1942,  0,     1942,  0,     0,     1942,
    0,     23,    0,     1373,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1792,  0,     0,     1793,  1794,  1795,
    0,     1796,  1797,  1798,  1799,  1800,  1801,  0,     0,     0,     0,
    4483,  0,     0,     0,     0,     0,     0,     24,    25,    0,     0,
    0,     0,     26,    0,     0,     0,     0,     3627,  0,     0,     1374,
    0,     0,     27,    0,     0,     0,     1375,  0,     0,     1376,  0,
    0,     0,     28,    0,     0,     0,     0,     0,     0,     0,     0,
    0,     3638,  3639,  0,     3641,  0,     3643,  3644,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     3651,  0,     0,
    0,     0,     3769,  3770,  3771,  0,     0,     0,     29,    0,     1773,
    0,     0,     1774,  0,     0,     0,     1775,  1776,  1777,  30,    1377,
    0,     0,     0,     31,    32,    0,     33,    0,     0,     0,     0,
    34,    1778,  3672,  0,     0,     35,    0,     0,     36,    1780,  0,
    0,     0,     37,    0,     1781,  0,     0,     38,    39,    0,     0,
    0,     0,     0,     0,     40,    0,     0,     0,     41,    0,     0,
    0,     1773,  0,     0,     1774,  0,     1782,  42,    1775,  1776,  1777,
    0,     1378,  0,     1379,  0,     0,     0,     0,     43,    0,     0,
    0,     0,     1380,  1778,  0,     0,     0,     0,     0,     0,     1381,
    1780,  0,     0,     0,     0,     44,    1781,  0,     0,     1382,  0,
    0,     0,     0,     0,     45,    0,     0,     0,     0,     0,     46,
    0,     0,     0,     0,     47,    0,     0,     0,     1782,  0,     0,
    0,     0,     0,     0,     0,     0,     48,    0,     0,     0,     3422,
    0,     0,     1384,  1385,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1773,  0,     49,    1774,  0,     0,     0,     1775,
    1776,  1777,  0,     0,     0,     0,     0,     3423,  50,    0,     0,
    -127,  1783,  0,     0,     0,     1778,  1784,  0,     0,     0,     0,
    0,     0,     1780,  0,     0,     0,     0,     0,     1781,  0,     0,
    0,     0,     0,     0,     0,     1785,  1786,  0,     2695,  2696,  0,
    0,     0,     2699,  2700,  0,     0,     0,     2703,  0,     1787,  1782,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2714,
    0,     0,     0,     1783,  1387,  0,     2723,  0,     1784,  0,     2726,
    2727,  0,     0,     2730,  2731,  0,     0,     1788,  0,     0,     2736,
    0,     0,     0,     0,     0,     0,     0,     1785,  1786,  1789,  0,
    2752,  1790,  2754,  0,     0,     0,     1773,  4002,  0,     1774,  0,
    1787,  0,     1775,  1776,  1777,  0,     4012,  0,     2777,  0,     0,
    0,     0,     2779,  0,     0,     0,     0,     0,     1778,  0,     0,
    0,     0,     0,     0,     2784,  1780,  0,     0,     0,     1788,  0,
    1781,  2789,  0,     2791,  0,     2793,  2796,  2798,  4033,  0,     0,
    1789,  2806,  2809,  1790,  0,     1783,  0,     0,     0,     2820,  1784,
    0,     0,     1782,  2829,  0,     0,     0,     0,     2833,  0,     0,
    0,     0,     1791,  2322,  0,     0,     0,     0,     0,     1785,  1786,
    0,     0,     0,     0,     0,     0,     0,     1773,  0,     0,     1774,
    2866,  0,     1787,  1775,  1776,  1777,  0,     0,     0,     0,     0,
    2873,  0,     2875,  0,     0,     0,     0,     2878,  0,     1778,  0,
    2879,  0,     2883,  2884,  2885,  2886,  1780,  2888,  0,     0,     0,
    1788,  1781,  2400,  0,     1791,  0,     0,     0,     0,     2912,  2913,
    2914,  0,     1789,  0,     0,     1790,  0,     0,     2922,  2923,  0,
    0,     0,     0,     1782,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1792,  1783,  0,     1793,
    1794,  1795,  1784,  1796,  1797,  1798,  1799,  1800,  1801,  0,     0,
    0,     0,     4518,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     1785,  1786,  0,     0,     0,     0,     2965,  0,     0,     0,
    0,     0,     0,     0,     0,     1787,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1791,  0,     0,     1792,  0,
    0,     1793,  1794,  1795,  0,     1796,  1797,  1798,  1799,  1800,  1801,
    0,     0,     0,     1788,  4752,  4150,  4151,  4152,  4153,  0,     0,
    0,     0,     0,     0,     0,     1789,  0,     0,     1790,  1783,  0,
    0,     0,     0,     1784,  0,     0,     0,     0,     0,     0,     0,
    0,     4078,  0,     0,     0,     0,     0,     0,     0,     4081,  4082,
    4083,  4084,  1785,  1786,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1787,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1792,  0,     0,     1793,  1794,  1795,  0,     1796,  1797,  1798,  1799,
    1800,  1801,  0,     0,     1788,  0,     4773,  0,     0,     1791,  0,
    0,     0,     0,     0,     0,     0,     1789,  0,     0,     1790,  0,
    0,     0,     0,     0,     0,     0,     1942,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1773,  0,     0,     1774,  3129,  0,     0,
    1775,  1776,  1777,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1778,  0,     0,     0,     0,
    0,     0,     0,     1780,  0,     0,     0,     0,     0,     1781,  1791,
    0,     0,     0,     1792,  0,     0,     1793,  1794,  1795,  0,     1796,
    1797,  1798,  1799,  1800,  1801,  0,     0,     0,     0,     4888,  0,
    1782,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1773,  0,     0,     1774,  0,     0,
    0,     1775,  1776,  1777,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1778,  4219,  0,     0,
    2643,  0,     0,     0,     1780,  0,     0,     0,     0,     0,     1781,
    0,     0,     0,     0,     1792,  0,     0,     1793,  1794,  1795,  0,
    1796,  1797,  1798,  1799,  1800,  1801,  0,     4237,  4238,  0,     4906,
    0,     1782,  0,     0,     0,     0,     0,     0,     598,   0,     0,
    0,     0,     0,     0,     0,     4362,  1783,  0,     0,     599,   0,
    1784,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     3292,  600,   0,     1785,
    1786,  0,     0,     0,     2644,  0,     0,     0,     0,     0,     601,
    0,     0,     0,     1787,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     602,   4275,  4276,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     603,   0,
    0,     1788,  0,     0,     3329,  3330,  0,     0,     0,     0,     0,
    0,     0,     0,     1789,  0,     0,     1790,  1783,  604,   0,     0,
    1942,  1784,  0,     0,     0,     0,     0,     0,     605,   0,     0,
    0,     0,     0,     0,     0,     606,   0,     0,     0,     0,     0,
    1785,  1786,  0,     3351,  0,     0,     607,   0,     0,     0,     0,
    608,   3355,  0,     0,     1787,  0,     609,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     3367,  3369,  0,     0,     0,
    3369,  610,   0,     0,     0,     3380,  3381,  3382,  0,     0,     0,
    4368,  0,     1788,  4369,  4370,  0,     0,     1791,  0,     0,     0,
    0,     0,     0,     1773,  1789,  0,     1774,  1790,  4374,  0,     1775,
    1776,  1777,  0,     3403,  3404,  3405,  3406,  0,     0,     0,     0,
    0,     0,     0,     611,   0,     1778,  0,     0,     0,     0,     0,
    0,     0,     1780,  0,     0,     0,     0,     0,     1781,  0,     0,
    0,     0,     0,     0,     0,     3421,  0,     3425,  3426,  3427,  0,
    0,     612,   0,     0,     4516,  0,     3440,  0,     0,     0,     1782,
    0,     613,   0,     0,     0,     1773,  0,     0,     1774,  1228,  614,
    0,     1775,  1776,  1777,  0,     0,     0,     0,     1791,  203,   0,
    0,     1792,  0,     0,     1793,  1794,  1795,  1778,  1796,  1797,  1798,
    1799,  1800,  1801,  0,     1780,  3814,  0,     0,     0,     4563,  1781,
    0,     0,     0,     615,   0,     0,     0,     0,     616,   0,     617,
    0,     0,     0,     0,     0,     618,   0,     0,     619,   3487,  0,
    0,     1782,  0,     0,     0,     0,     3491,  0,     2645,  0,     0,
    0,     0,     0,     0,     0,     3194,  0,     0,     0,     0,     3195,
    0,     0,     0,     3503,  620,   0,     0,     621,   0,     0,     0,
    622,   0,     0,     0,     0,     1783,  0,     623,   0,     624,   1784,
    0,     0,     1792,  625,   3544,  1793,  1794,  1795,  0,     1796,  1797,
    1798,  1799,  1800,  1801,  626,   0,     0,     0,     0,     1785,  1786,
    0,     0,     0,     0,     0,     0,     627,   0,     0,     0,     0,
    0,     0,     1787,  0,     798,   0,     0,     0,     4628,  0,     0,
    0,     0,     798,   821,   3581,  0,     0,     0,     3586,  0,     821,
    0,     0,     0,     0,     0,     0,     0,     1783,  0,     0,     821,
    1788,  1784,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1789,  0,     3624,  1790,  0,     0,     0,     0,     0,
    1785,  1786,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1787,  0,     0,     0,     0,     0,     0,
    0,     3637,  4579,  0,     0,     0,     0,     0,     0,     0,     0,
    4684,  0,     0,     0,     3647,  0,     0,     0,     3649,  0,     0,
    0,     0,     1788,  0,     0,     0,     0,     0,     1942,  0,     0,
    0,     0,     0,     0,     1789,  0,     0,     1790,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     1791,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     3729,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1773,  0,     0,     1774,
    4621,  0,     0,     1775,  1776,  1777,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1778,  0,
    0,     0,     1773,  0,     0,     1774,  1780,  0,     0,     1775,  1776,
    1777,  1781,  0,     0,     0,     0,     0,     0,     1791,  0,     0,
    0,     0,     4653,  0,     1778,  0,     0,     3153,  0,     0,     0,
    0,     1780,  3730,  1782,  0,     0,     0,     1781,  0,     0,     0,
    1792,  0,     0,     1793,  1794,  1795,  0,     1796,  1797,  1798,  1799,
    1800,  1801,  0,     0,     0,     0,     0,     0,     0,     1782,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1792,  0,     0,     1793,  1794,  1795,  4850,  1796,  1797,
    1798,  1799,  1800,  1801,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1783,  0,
    0,     0,     0,     1784,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1785,  1786,  1783,  0,     0,     0,     0,     1784,  3864,
    0,     3865,  0,     0,     0,     0,     1787,  0,     3867,  0,     0,
    0,     0,     0,     1773,  798,   0,     1774,  0,     1785,  1786,  1775,
    1776,  1777,  0,     3877,  0,     821,   0,     0,     0,     0,     821,
    0,     1787,  0,     0,     1788,  1778,  0,     3885,  0,     0,     821,
    0,     0,     1780,  0,     0,     0,     1789,  3896,  1781,  1790,  0,
    0,     0,     0,     0,     821,   0,     0,     0,     798,   0,     1788,
    0,     3899,  0,     1015,  0,     0,     4851,  798,   821,   0,     1782,
    0,     1789,  0,     821,   1790,  0,     0,     0,     0,     0,     0,
    0,     0,     1015,  821,   0,     0,     3928,  0,     0,     0,     0,
    821,   0,     0,     0,     0,     0,     3936,  3937,  3938,  0,     0,
    3941,  3942,  3943,  3944,  3945,  3946,  0,     0,     0,     0,     3953,
    3954,  0,     3956,  3957,  3958,  3959,  3960,  3961,  3962,  0,     1791,
    0,     0,     0,     0,     0,     0,     3970,  0,     3972,  3973,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     4857,  0,     1791,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     798,   798,   4005,  1783,  0,     0,     821,   0,     1784,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1785,  1786,
    0,     798,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1787,  0,     1792,  0,     0,     1793,  1794,  1795,  0,
    1796,  1797,  1798,  1799,  1800,  1801,  0,     1773,  0,     0,     1774,
    0,     0,     0,     1775,  1776,  1777,  0,     0,     0,     0,     1792,
    1788,  0,     1793,  1794,  1795,  0,     1796,  1797,  1798,  1799,  1800,
    1801,  0,     1789,  0,     0,     1790,  1780,  0,     0,     0,     0,
    0,     1781,  3369,  0,     0,     0,     0,     0,     0,     3167,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1773,  0,
    0,     1774,  0,     1782,  0,     1775,  1776,  1777,  1942,  1942,  1942,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     4093,  0,
    1778,  0,     0,     3199,  0,     0,     0,     0,     1780,  0,     0,
    0,     0,     0,     1781,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1791,  798,   0,     0,     0,
    0,     0,     0,     1015,  0,     1782,  0,     798,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1015,  0,     0,     0,     1773,  0,     0,     1774,  0,     1015,
    0,     1775,  1776,  1777,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1778,  0,     1783,  0,
    0,     0,     0,     1784,  1780,  0,     0,     0,     0,     0,     1781,
    0,     0,     0,     0,     0,     798,   0,     0,     0,     0,     0,
    0,     0,     -2391, -2391, 0,     0,     0,     0,     0,     0,     0,
    1792,  1782,  0,     1793,  1794,  1795,  1787,  1796,  1797,  1798,  1799,
    1800,  1801,  0,     0,     0,     0,     0,     0,     0,     1015,  0,
    1783,  0,     0,     0,     0,     1784,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     -2391, 0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1785,  1786,  1789,  0,     0,     0,     0,
    821,   0,     0,     0,     0,     0,     0,     0,     1787,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     821,   0,
    0,     0,     798,   0,     0,     0,     0,     0,     0,     4223,  821,
    0,     3204,  4224,  4225,  4226,  4227,  1788,  0,     4229,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     1783,  1789,  0,     0,
    1790,  1784,  0,     0,     0,     821,   0,     4242,  4243,  4244,  4245,
    0,     4247,  4248,  1015,  0,     821,   0,     0,     0,     0,     1791,
    1785,  1786,  4257,  4258,  0,     0,     0,     0,     0,     821,   0,
    0,     821,   0,     0,     1787,  0,     0,     0,     0,     4263,  0,
    0,     0,     798,   0,     0,     1942,  1942,  0,     1942,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1788,  0,     0,     0,     0,     0,     0,     798,   0,
    0,     1791,  0,     0,     1789,  0,     0,     1790,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     798,   798,   798,   0,     798,   0,     0,
    0,     0,     0,     0,     1792,  0,     0,     1793,  1794,  1795,  0,
    1796,  1797,  1798,  1799,  1800,  1801,  798,   0,     0,     0,     0,
    0,     0,     0,     0,     4328,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     821,   0,     0,
    0,     0,     0,     4347,  0,     821,   821,   0,     1791,  0,     0,
    0,     0,     0,     798,   1927,  0,     1792,  0,     0,     1793,  1794,
    1795,  0,     1796,  1797,  1798,  1799,  1800,  1801,  0,     0,     1773,
    4371,  0,     1774,  0,     0,     0,     1775,  1776,  1777,  0,     798,
    0,     0,     0,     798,   798,   0,     0,     0,     0,     0,     0,
    0,     1778,  0,     0,     3210,  0,     0,     0,     1015,  1780,  0,
    0,     0,     0,     1927,  1781,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1782,  0,     0,     0,     0,
    0,     0,     1792,  0,     0,     1793,  1794,  1795,  1942,  1796,  1797,
    1798,  1799,  1800,  1801,  0,     0,     0,     0,     0,     0,     883,
    0,     1942,  0,     0,     0,     1015,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     884,
    0,     0,     0,     0,     0,     0,     0,     1015,  0,     0,     0,
    0,     885,   886,   0,     0,     0,     0,     0,     0,     0,     0,
    887,   0,     0,     0,     888,   0,     0,     0,     0,     0,     0,
    0,     0,     4473,  0,     0,     0,     0,     0,     0,     0,     0,
    889,   1783,  0,     0,     0,     0,     1784,  0,     0,     4482,  0,
    0,     0,     0,     4487,  4488,  0,     0,     0,     0,     0,     890,
    0,     821,   0,     0,     0,     1785,  1786,  0,     0,     0,     891,
    0,     0,     0,     0,     0,     0,     0,     892,   0,     1787,  1015,
    0,     0,     0,     0,     0,     0,     0,     0,     893,   0,     0,
    0,     0,     894,   1015,  0,     0,     0,     0,     0,     0,     0,
    1015,  0,     0,     0,     4537,  0,     1927,  1788,  0,     0,     0,
    1015,  0,     0,     895,   0,     0,     0,     0,     0,     1789,  0,
    0,     1790,  0,     0,     0,     821,   0,     0,     0,     821,   0,
    0,     0,     0,     0,     0,     0,     896,   0,     0,     0,     821,
    0,     0,     0,     0,     0,     0,     3369,  0,     0,     0,     0,
    0,     0,     4578,  1015,  0,     897,   0,     0,     0,     0,     798,
    0,     0,     0,     0,     0,     1015,  0,     0,     0,     0,     0,
    798,   0,     0,     0,     0,     0,     1015,  0,     0,     0,     0,
    0,     0,     0,     898,   1942,  0,     0,     1015,  0,     0,     0,
    0,     0,     1791,  0,     1942,  0,     0,     0,     0,     0,     0,
    0,     899,   0,     0,     798,   0,     821,   821,   0,     0,     0,
    203,   0,     0,     0,     4614,  0,     0,     0,     821,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     1015,  0,     0,     1015,
    0,     821,   821,   0,     0,     900,   4631,  0,     0,     0,     901,
    0,     902,   821,   0,     4638,  0,     0,     903,   0,     0,     904,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1942,  0,     0,     0,     0,     0,     0,     0,
    0,     798,   0,     0,     0,     0,     905,   1792,  0,     906,   1793,
    1794,  1795,  907,   1796,  1797,  1798,  1799,  1800,  1801,  908,   0,
    909,   0,     0,     0,     0,     910,   0,     0,     0,     0,     0,
    0,     0,     798,   0,     798,   0,     0,     0,     0,     798,   798,
    0,     0,     0,     0,     0,     798,   798,   798,   911,   0,     0,
    798,   0,     798,   798,   798,   798,   798,   798,   0,     798,   0,
    798,   798,   0,     0,     798,   0,     3369,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1015,  798,   798,   798,
    798,   1927,  0,     0,     0,     798,   1942,  0,     0,     798,   0,
    0,     798,   0,     0,     798,   798,   798,   798,   798,   798,   798,
    798,   798,   0,     798,   0,     0,     0,     0,     0,     0,     798,
    0,     798,   0,     0,     0,     0,     0,     0,     4741,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1773,  4753,  0,     1774,  0,     0,     0,     1775,  1776,  1777,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1773,  0,
    0,     1774,  1778,  0,     4764,  1775,  1776,  1777,  0,     0,     1780,
    0,     0,     0,     0,     0,     1781,  0,     0,     0,     0,     0,
    1778,  0,     0,     3736,  1773,  0,     0,     1774,  1780,  0,     0,
    1775,  1776,  1777,  1781,  0,     0,     0,     1782,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     1778,  0,     0,     0,     0,
    0,     0,     0,     1780,  0,     1782,  0,     0,     0,     1781,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     4812,  0,
    0,     0,     0,     0,     0,     0,     0,     798,   0,     0,     0,
    1782,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     4827,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1015,  0,     0,     0,     1015,  1015,  0,     0,     0,     0,
    0,     0,     1783,  0,     821,   0,     0,     1784,  1927,  821,   0,
    0,     0,     821,   0,     0,     0,     0,     0,     0,     0,     821,
    1783,  0,     0,     0,     0,     1784,  1785,  1786,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     821,   187,   0,     798,   1787,
    0,     0,     0,     0,     1785,  1786,  1783,  0,     0,     798,   0,
    1784,  0,     1015,  0,     0,     798,   0,     0,     1787,  0,     0,
    0,     0,     0,     1015,  0,     0,     0,     0,     1788,  0,     1785,
    1786,  0,     0,     0,     821,   0,     0,     0,     0,     188,   1789,
    0,     0,     1790,  1787,  0,     0,     1788,  0,     0,     0,     821,
    821,   189,   0,     0,     0,     0,     0,     1015,  1789,  0,     0,
    1790,  0,     0,     0,     0,     0,     0,     0,     190,   0,     0,
    0,     1788,  0,     191,   1927,  821,   0,     0,     1927,  0,     0,
    0,     0,     0,     1789,  0,     0,     1790,  192,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     193,   0,     0,     0,
    0,     0,     0,     821,   194,   0,     0,     821,   0,     0,     0,
    0,     0,     0,     1791,  0,     195,   0,     0,     0,     0,     196,
    0,     0,     0,     821,   0,     197,   0,     0,     0,     0,     0,
    0,     1791,  0,     821,   0,     0,     0,     0,     0,     0,     3682,
    198,   0,     0,     0,     0,     821,   0,     0,     0,     0,     822,
    0,     0,     821,   0,     0,     0,     822,   1791,  0,     0,     0,
    0,     0,     0,     199,   0,     0,     822,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     200,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     798,   1015,  0,     1792,  0,     0,
    1793,  1794,  1795,  1927,  1796,  1797,  1798,  1799,  1800,  1801,  0,
    201,   0,     0,     0,     0,     0,     1792,  0,     0,     1793,  1794,
    1795,  0,     1796,  1797,  1798,  1799,  1800,  1801,  0,     202,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     203,   0,     0,
    0,     1792,  0,     0,     1793,  1794,  1795,  0,     1796,  1797,  1798,
    1799,  1800,  1801,  0,     0,     0,     0,     0,     0,     0,     1015,
    0,     0,     204,   821,   0,     0,     0,     205,   0,     206,   0,
    0,     798,   0,     0,     207,   0,     0,     208,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     209,   210,   0,     0,     211,   0,     0,     0,     212,
    0,     0,     0,     0,     0,     0,     0,     0,     213,   0,     821,
    0,     0,     214,   0,     798,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     215,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     216,   550,   0,     0,     0,     0,
    0,     0,     821,   0,     0,     0,     0,     551,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1015,  0,     0,     0,
    0,     0,     821,   0,     0,     0,     552,   0,     0,     0,     821,
    0,     0,     0,     798,   0,     0,     1015,  0,     553,   798,   0,
    0,     0,     0,     0,     0,     0,     1015,  554,   0,     0,     0,
    -775,  0,     0,     0,     0,     798,   0,     0,     0,     0,     798,
    0,     0,     0,     0,     0,     0,     0,     555,   0,     0,     0,
    0,     0,     556,   0,     0,     0,     0,     0,     0,     0,     0,
    798,   798,   798,   0,     0,     798,   557,   0,     0,     0,     0,
    0,     0,     798,   798,   798,   798,   558,   0,     0,     0,     1927,
    0,     0,     0,     559,   798,   1927,  0,     798,   0,     798,   0,
    0,     0,     0,     0,     560,   0,     0,     0,     0,     798,   798,
    561,   0,     798,   0,     562,   0,     0,     0,     0,     0,     0,
    0,     822,   0,     0,     0,     798,   822,   798,   0,     798,   -978,
    0,     0,     0,     0,     0,     0,     822,   1371,  0,     0,     0,
    0,     0,     1372,  0,     0,     0,     0,     798,   0,     0,     0,
    822,   0,     0,     0,     0,     0,     0,     798,   0,     798,   798,
    798,   0,     0,     563,   822,   1416,  0,     0,     0,     0,     822,
    0,     -517,  821,   0,     0,     798,   0,     0,     0,     1373,  822,
    0,     0,     0,     0,     0,     0,     798,   822,   0,     0,     0,
    798,   0,     0,     0,     0,     0,     798,   0,     0,     0,     564,
    0,     0,     565,   0,     0,     798,   0,     0,     0,     1417,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     566,   0,     1015,
    0,     0,     1015,  0,     1015,  1374,  0,     0,     0,     1015,  0,
    821,   1375,  0,     0,     1376,  -411,  0,     0,     0,     1371,  0,
    0,     0,     0,     0,     1372,  821,   821,   0,     0,     0,     0,
    798,   567,   0,     0,     0,     0,     0,     0,     568,   0,     0,
    0,     0,     0,     -411,  822,   0,     569,   1416,  0,     0,     821,
    0,     0,     821,   0,     0,     1015,  0,     0,     0,     0,     0,
    1373,  0,     1418,  0,     0,     1377,  0,     0,     0,     0,     0,
    1015,  0,     -411,  0,     0,     570,   571,   0,     572,   573,   0,
    0,     0,     0,     0,     0,     0,     0,     574,   0,     0,     0,
    1417,  575,   1015,  0,     0,     0,     0,     576,   0,     0,     577,
    0,     0,     578,   0,     0,     0,     1419,  1374,  1420,  0,     0,
    0,     0,     0,     1375,  -411,  0,     1376,  1421,  0,     1379,  1927,
    1927,  1927,  0,     0,     0,     0,     0,     0,     1380,  0,     0,
    0,     0,     0,     0,     0,     1381,  0,     0,     0,     0,     0,
    0,     821,   0,     1422,  1382,  0,     0,     0,     0,     0,     1015,
    0,     1015,  821,   0,     0,     0,     821,   0,     0,     0,     0,
    0,     0,     0,     0,     1418,  821,   0,     1377,  0,     0,     0,
    0,     0,     0,     0,     0,     1423,  0,     0,     1384,  1385,  1424,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1425,  0,     0,     1015,  0,     0,     1419,  0,     1420,
    0,     0,     0,     0,     0,     1426,  0,     0,     0,     1421,  0,
    1379,  0,     821,   0,     0,     0,     0,     0,     1015,  0,     1380,
    0,     0,     0,     0,     0,     0,     0,     1381,  0,     0,     0,
    0,     0,     0,     0,     0,     1422,  1382,  0,     0,     0,     1015,
    0,     0,     0,     0,     0,     1927,  1015,  0,     0,     0,     1387,
    821,   0,     821,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     821,   0,     821,   0,     2867,  0,     0,     1384,
    1385,  1424,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2868,  0,     0,     0,     0,     1015,  0,
    0,     0,     0,     0,     0,     823,   0,     1426,  0,     0,     0,
    0,     823,   0,     0,     821,   1015,  0,     822,   0,     0,     0,
    0,     823,   0,     0,     0,     0,     0,     1015,  0,     0,     0,
    0,     0,     0,     0,     0,     822,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     822,   0,     0,     0,     0,
    0,     1387,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     821,   0,     0,     0,     0,
    0,     822,   0,     0,     0,     0,     0,     798,   0,     0,     821,
    0,     822,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     822,   0,     0,     822,   0,     821,
    0,     0,     821,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     798,   0,     0,
    1015,  0,     0,     0,     0,     0,     798,   0,     0,     0,     0,
    0,     798,   0,     798,   0,     0,     798,   0,     0,     0,     1015,
    798,   798,   798,   798,   0,     0,     798,   798,   798,   798,   798,
    798,   798,   798,   798,   798,   0,     0,     0,     798,   798,   0,
    0,     0,     1015,  0,     0,     0,     0,     798,   0,     0,     0,
    798,   0,     1927,  0,     798,   0,     0,     0,     0,     0,     0,
    0,     798,   0,     0,     798,   0,     798,   0,     0,     0,     0,
    0,     0,     0,     1015,  798,   0,     0,     798,   798,   0,     0,
    0,     798,   798,   0,     822,   0,     0,     0,     798,   0,     0,
    0,     822,   822,   0,     0,     0,     0,     798,   0,     798,   0,
    1928,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    798,   0,     0,     0,     0,     0,     798,   798,   798,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     798,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1928,
    0,     798,   0,     0,     0,     0,     0,     1015,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    798,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     821,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     823,   0,     0,     0,
    0,     823,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     823,   0,     0,     0,     0,     1927,  0,     0,     0,     0,
    1927,  1015,  1927,  0,     0,     0,     823,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     823,
    0,     0,     0,     0,     0,     823,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     823,   0,     0,     0,     0,     0,
    0,     0,     823,   0,     0,     0,     821,   0,     822,   821,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1927,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1928,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     798,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     822,   0,     0,     0,     822,   0,     0,     0,     0,     823,
    0,     0,     0,     821,   821,   0,     822,   1015,  0,     0,     0,
    0,     0,     0,     0,     0,     821,   0,     821,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1015,  798,   798,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     822,   822,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     822,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     822,   822,   0,
    0,     0,     821,   0,     0,     0,     0,     0,     0,     822,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     798,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     798,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     798,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     798,   798,   0,
    1015,  0,     0,     0,     798,   798,   0,     0,     0,     798,   1015,
    0,     0,     0,     798,   0,     0,     798,   798,   0,     0,     0,
    798,   0,     0,     0,     0,     0,     798,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     798,   0,     0,     0,     798,   0,     1928,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     798,   0,     0,     0,
    0,     798,   0,     0,     0,     0,     0,     798,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    798,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     798,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     823,   0,     0,     0,     0,     0,     0,     1015,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    823,   0,     0,     0,     821,   0,     0,     1927,  0,     0,     0,
    0,     823,   0,     0,     0,     1015,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     821,   0,     0,
    0,     0,     1015,  0,     0,     0,     0,     823,   0,     821,   0,
    0,     0,     0,     0,     0,     0,     798,   823,   0,     0,     0,
    0,     0,     0,     0,     0,     821,   0,     0,     0,     0,     0,
    823,   0,     0,     823,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1015,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     821,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     798,   0,     0,     0,     0,     0,     0,     0,
    822,   0,     0,     798,   1928,  822,   0,     0,     0,     822,   0,
    0,     0,     0,     0,     0,     0,     822,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     822,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     823,
    0,     0,     1015,  0,     1015,  0,     0,     823,   823,   0,     0,
    0,     0,     0,     0,     1204,  1204,  1929,  0,     0,     0,     0,
    822,   0,     0,     0,     0,     0,     0,     0,     821,   0,     0,
    0,     0,     0,     0,     0,     0,     822,   822,   0,     0,     0,
    0,     0,     798,   1267,  0,     0,     1015,  0,     0,     0,     0,
    798,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1928,  822,   0,     0,     1928,  1929,  798,   798,   0,     0,     798,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     798,   0,     0,     0,     0,     798,   0,     0,     822,
    0,     798,   0,     822,   798,   0,     0,     0,     0,     0,     0,
    0,     798,   798,   0,     0,     0,     0,     0,     0,     0,     822,
    0,     0,     0,     0,     0,     0,     798,   0,     0,     0,     822,
    0,     0,     821,   0,     821,   0,     0,     0,     798,   0,     0,
    0,     822,   0,     0,     0,     0,     0,     0,     0,     822,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1015,  821,   0,
    0,     0,     0,     0,     0,     0,     0,     798,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1928,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1927,  0,     821,   823,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     798,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1929,  0,     822,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     798,   0,     1015,  0,     0,     0,     823,   0,     0,     0,
    823,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     823,   0,     0,     0,     0,     0,     0,     798,   1015,  0,
    798,   0,     798,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     822,   0,     0,     0,     0,
    0,     0,     0,     0,     798,   0,     0,     0,     798,   0,     0,
    0,     0,     0,     1015,  0,     0,     0,     0,     798,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     822,   0,
    0,     0,     0,     0,     0,     798,   0,     0,     823,   823,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     822,   823,
    0,     0,     0,     0,     0,     0,     822,   1927,  0,     0,     0,
    0,     0,     1015,  823,   823,   0,     1015,  1015,  0,     0,     0,
    798,   0,     0,     0,     823,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1730,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     798,   0,     0,
    1744,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1928,  798,   0,     0,     0,
    0,     1928,  0,     0,     0,     0,     1762,  1763,  1764,  0,     1766,
    0,     0,     0,     0,     0,     0,     1015,  1015,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1808,  0,     0,
    0,     0,     0,     0,     0,     798,   0,     0,     798,   0,     0,
    0,     0,     0,     0,     0,     0,     798,   0,     0,     0,     0,
    798,   0,     798,   1929,  798,   0,     0,     0,     0,     0,     0,
    798,   0,     0,     0,     0,     1845,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     798,   0,     822,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1949,  0,     0,     0,     1961,  1964,  0,     821,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     798,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     822,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     798,   798,
    0,     822,   822,   0,     0,     0,     0,     0,     0,     798,   0,
    0,     0,     0,     0,     0,     0,     821,   0,     0,     0,     1014,
    0,     0,     0,     0,     0,     0,     822,   798,   0,     822,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1014,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     798,
    0,     0,     0,     0,     0,     798,   798,   798,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     798,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1928,  1928,  1928,  0,     0,
    0,     0,     0,     0,     0,     1927,  823,   0,     0,     0,     1929,
    823,   0,     0,     0,     823,   0,     0,     0,     822,   0,     0,
    0,     823,   0,     0,     0,     0,     0,     0,     0,     822,   0,
    0,     0,     822,   0,     0,     0,     0,     0,     823,   0,     0,
    0,     822,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     798,   798,   0,     0,     0,
    0,     1927,  0,     0,     0,     0,     0,     0,     0,     798,   0,
    0,     0,     0,     0,     0,     0,     823,   0,     0,     1927,  798,
    798,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     823,   823,   0,     0,     0,     0,     0,     0,     822,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1929,  823,   0,     0,     1929,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1928,  0,     0,     0,     0,     0,     822,   0,     822,   0,
    0,     0,     0,     0,     0,     823,   0,     0,     0,     823,   822,
    0,     822,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     823,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     823,   0,     0,     0,     0,     1014,
    0,     0,     0,     0,     0,     0,     0,     823,   0,     0,     0,
    0,     0,     0,     0,     823,   0,     0,     0,     1014,  0,     0,
    822,   0,     0,     0,     0,     0,     1014,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1929,  0,     0,     0,     0,     0,
    2490,  0,     822,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     2510,  0,     2512,  0,     822,   2524,  2527,  2532,  0,
    0,     0,     0,     2538,  0,     1014,  2543,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     822,   0,     0,     822,   2550,
    2551,  2552,  2553,  0,     0,     0,     0,     2560,  0,     0,     0,
    2572,  0,     0,     2574,  0,     823,   2581,  2582,  2583,  2584,  2585,
    2586,  2587,  2588,  2589,  0,     2590,  0,     0,     0,     0,     0,
    0,     1204,  0,     2618,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1928,  0,
    0,     823,   0,     0,     0,     0,     0,     0,     0,     0,     1014,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     823,   0,     0,     0,     0,     1004,  0,
    0,     0,     0,     0,     1013,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     823,   0,     0,     0,     1004,  0,     0,
    0,     823,   0,     1013,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1267,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1929,  0,     0,     0,     0,     0,     1929,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     822,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2728,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1928,  0,     0,     0,     0,     1928,  0,     1928,  0,
    0,     0,     0,     0,     1998,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     823,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     822,   0,     0,     822,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1998,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1928,  0,
    0,     0,     823,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1014,  0,     0,     0,     823,   823,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1004,  0,
    0,     0,     0,     0,     1013,  0,     0,     0,     0,     0,     822,
    822,   823,   0,     0,     823,   0,     0,     1004,  0,     0,     0,
    0,     822,   1013,  822,   0,     1004,  0,     0,     0,     0,     0,
    1013,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1006,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1014,  0,     0,     0,     0,
    1006,  0,     0,     0,     0,     0,     0,     2957,  0,     0,     1014,
    0,     0,     0,     0,     0,     0,     0,     1998,  0,     0,     0,
    0,     1929,  1929,  1929,  0,     0,     0,     1014,  0,     0,     0,
    0,     0,     0,     0,     1004,  0,     0,     0,     0,     0,     1013,
    0,     0,     0,     823,   0,     0,     0,     0,     0,     822,   0,
    0,     0,     0,     0,     823,   0,     0,     0,     823,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     823,   0,     0,     1014,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1014,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1014,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1014,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     823,   0,     0,     0,     0,     1004,  0,
    0,     0,     0,     0,     1013,  0,     3096,  0,     0,     0,     0,
    0,     0,     0,     1014,  0,     0,     1014,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1929,  0,     0,     0,
    0,     0,     823,   0,     823,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     823,   0,     823,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     3149,  0,     0,     0,
    0,     3155,  0,     0,     0,     0,     823,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1006,  0,     0,     1766,  0,     0,     0,     0,     0,     0,
    822,   0,     0,     1928,  2532,  0,     2532,  2532,  0,     0,     1006,
    0,     1829,  0,     1014,  0,     0,     3213,  0,     1006,  3216,  0,
    3218,  0,     0,     0,     822,   0,     0,     0,     823,   0,     0,
    0,     0,     0,     0,     0,     822,   0,     0,     0,     0,     0,
    0,     823,   0,     0,     0,     0,     0,     3236,  2621,  3239,  0,
    3241,  822,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     823,   0,     1004,  823,   0,     0,     0,     0,     1013,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2618,  2618,  2618,  0,     0,     0,     0,     1006,  0,     0,     0,
    0,     0,     0,     0,     822,   0,     0,     3290,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1949,  0,     0,
    0,     0,     3300,  0,     0,     0,     0,     0,     1964,  0,     0,
    1004,  0,     0,     0,     0,     0,     1013,  0,     0,     0,     0,
    0,     0,     0,     0,     1929,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1004,  0,     0,     0,     0,     0,     1013,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     3337,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     1006,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     822,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     2680,  0,     0,
    0,     1998,  2686,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1004,  0,     0,     0,     0,     0,
    1013,  0,     0,     0,     0,     0,     0,     0,     0,     1004,  0,
    0,     0,     0,     0,     1013,  0,     1004,  0,     0,     0,     0,
    0,     1013,  0,     0,     0,     0,     1004,  0,     0,     0,     0,
    0,     1013,  0,     0,     0,     0,     0,     0,     0,     1014,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1014,
    0,     823,   0,     0,     0,     0,     0,     0,     0,     822,   0,
    822,   0,     0,     0,     0,     0,     0,     0,     0,     1004,  0,
    0,     0,     0,     0,     1013,  0,     0,     0,     0,     0,     0,
    1004,  0,     0,     1014,  0,     0,     1013,  0,     1929,  0,     0,
    0,     1004,  1929,  0,     1929,  822,   0,     1013,  0,     0,     0,
    0,     0,     1004,  0,     0,     0,     0,     0,     1013,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1006,  1928,  823,   822,   0,
    823,   0,     1004,  0,     0,     1004,  0,     0,     1013,  0,     0,
    1013,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1929,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1006,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     823,   823,   0,     0,     0,     0,
    0,     0,     1014,  0,     0,     1006,  0,     823,   0,     823,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1004,  0,     0,     1007,  0,     0,     1013,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1007,  0,     1998,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1006,  0,     0,
    0,     0,     0,     1928,  0,     0,     0,     0,     0,     0,     0,
    0,     1006,  0,     0,     823,   0,     0,     0,     0,     1006,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1006,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3683,
    0,     0,     0,     0,     0,     0,     0,     0,     3687,  0,     0,
    0,     0,     0,     3688,  0,     3689,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1006,  0,     0,     0,     0,     0,     0,     0,     0,     3713,
    3714,  0,     0,     1006,  0,     0,     0,     0,     1009,  0,     0,
    0,     0,     0,     1014,  1006,  0,     2538,  0,     0,     0,     0,
    0,     0,     0,     3739,  0,     1006,  3742,  1009,  3744,  0,     0,
    0,     0,     1014,  0,     0,     0,     3748,  0,     0,     0,     0,
    0,     0,     1014,  3755,  3756,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1006,  0,     0,     1006,  0,     0,
    0,     0,     3800,  0,     0,     0,     0,     1004,  3807,  3808,  2618,
    1004,  1004,  1013,  0,     0,     0,     1013,  1013,  0,     0,     0,
    0,     0,     0,     0,     822,   0,     0,     0,     0,     0,     0,
    0,     3823,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1267,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     823,   0,     1004,  1929,  0,
    0,     0,     0,     1013,  0,     1007,  0,     0,     0,     1004,  0,
    0,     0,     0,     0,     1013,  0,     0,     0,     0,     0,     823,
    0,     0,     822,   1007,  0,     2621,  2621,  2621,  0,     0,     0,
    823,   1007,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1004,  0,     0,     1006,  0,     823,   1013,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1998,  0,     0,     2686,  823,
    2686,  0,     0,     0,     0,     1998,  0,     0,     0,     0,     0,
    1007,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1928,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1009,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1014,  0,     0,     0,     0,     1009,  0,     0,     0,     0,
    0,     0,     0,     0,     1009,  0,     0,     1014,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1928,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1998,  0,
    0,     1004,  0,     0,     0,     1928,  0,     1013,  0,     0,     823,
    0,     0,     0,     0,     0,     1007,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1009,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     4065,  4066,  1014,  0,     1014,  0,     1006,
    0,     0,     0,     1006,  1006,  1004,  0,     0,     0,     0,     0,
    1013,  0,     1010,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1010,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     823,   0,     823,   0,     0,     0,     0,
    0,     1014,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    1006,  0,     0,     4106,  0,     0,     0,     0,     0,     0,     0,
    0,     1006,  0,     4111,  1014,  0,     0,     0,     1009,  0,     0,
    823,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     2686,  0,     0,     0,     0,
    0,     0,     2686,  0,     0,     1006,  0,     0,     0,     0,     4126,
    4128,  0,     1004,  0,     0,     0,     4132,  4133,  1013,  0,     0,
    4134,  0,     1929,  0,     823,   4137,  0,     0,     4140,  4141,  0,
    0,     1004,  4145,  0,     0,     1012,  0,     1013,  4149,  0,     1007,
    0,     1004,  0,     0,     0,     0,     0,     1013,  0,     0,     0,
    0,     0,     0,     0,     1012,  1014,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     2618,  0,
    0,     2686,  0,     2618,  0,     0,     0,     0,     0,     2618,  0,
    0,     0,     0,     1014,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     1204,  0,     0,     0,     0,     1007,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     4204,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1007,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1006,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1009,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1010,  0,     0,     0,     0,     1014,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     4260,  1929,  0,
    1010,  0,     0,     0,     0,     0,     1014,  0,     0,     1010,  0,
    0,     1007,  0,     0,     0,     0,     0,     0,     1006,  0,     0,
    0,     0,     0,     0,     0,     1007,  0,     0,     0,     1014,  1009,
    0,     0,     1007,  0,     0,     1004,  0,     0,     1004,  0,     1004,
    1013,  0,     1007,  1013,  1004,  1013,  0,     0,     0,     0,     1013,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1014,
    0,     1009,  0,     0,     0,     4305,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1010,  0,     0,
    0,     0,     0,     0,     0,     1007,  0,     0,     0,     0,     0,
    1004,  0,     0,     0,     0,     0,     1013,  1007,  0,     0,     0,
    0,     0,     0,     0,     2621,  1012,  1004,  0,     1007,  0,     0,
    0,     1013,  0,     0,     0,     0,     0,     0,     0,     1007,  0,
    0,     0,     0,     1012,  0,     1006,  0,     0,     1004,  0,     0,
    0,     1012,  0,     1013,  1009,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     1998,  1006,  0,     0,     0,     1009,  0,     0,
    0,     0,     0,     0,     1006,  1009,  0,     0,     0,     1007,  0,
    0,     1007,  0,     0,     0,     1009,  0,     0,     0,     0,     823,
    0,     0,     1010,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1004,  0,     1004,  4397,  4398,  0,
    1013,  4399,  1013,  0,     0,     0,     0,     0,     0,     0,     0,
    1012,  0,     0,     0,     0,     0,     0,     0,     1009,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1009,
    0,     0,     0,     4433,  4434,  0,     0,     0,     2686,  0,     0,
    1009,  0,     0,     0,     0,     0,     0,     0,     823,   0,     0,
    1004,  1009,  0,     0,     0,     0,     1013,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1004,  0,     0,     0,     0,     0,     1013,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1007,  0,
    0,     1009,  0,     0,     1009,  1004,  0,     0,     0,     0,     0,
    1013,  1004,  0,     0,     0,     1012,  0,     1013,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1929,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1006,  0,     0,
    1006,  0,     1006,  0,     1004,  0,     0,     1006,  0,     0,     1013,
    0,     0,     0,     1014,  0,     0,     0,     1010,  0,     0,     0,
    1004,  0,     0,     0,     0,     0,     1013,  0,     0,     0,     0,
    0,     0,     1004,  0,     0,     0,     0,     0,     1013,  0,     0,
    0,     0,     0,     1929,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1006,  0,     0,     0,     0,     1998,  0,     0,
    1929,  1009,  0,     0,     0,     0,     0,     0,     0,     1006,  0,
    0,     0,     2538,  0,     1010,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1006,  0,     0,     0,     0,     0,     4596,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1010,  0,     0,     0,     1766,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1004,  1267,  0,     0,     0,
    0,     1013,  0,     1007,  0,     0,     0,     1007,  1007,  0,     1012,
    0,     0,     0,     0,     0,     1004,  0,     0,     1006,  0,     1006,
    1013,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     4646,  0,     0,     0,     0,     0,     1004,  0,     0,
    0,     0,     0,     1013,  0,     0,     0,     1014,  0,     1010,  0,
    0,     0,     0,     0,     0,     0,     1014,  0,     0,     0,     0,
    0,     0,     1010,  0,     1007,  0,     0,     1012,  0,     1004,  1010,
    0,     0,     0,     1006,  1013,  1007,  0,     0,     0,     0,     1010,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     4685,  0,
    0,     0,     0,     0,     0,     0,     1006,  0,     0,     1012,  0,
    0,     0,     0,     2621,  0,     0,     0,     0,     2621,  1007,  0,
    0,     0,     0,     2621,  0,     0,     0,     0,     1006,  0,     0,
    0,     0,     1010,  0,     1006,  0,     1009,  0,     0,     0,     1009,
    1009,  0,     0,     0,     1010,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1010,  4433,  0,     0,     0,     0,
    0,     0,     1004,  0,     0,     0,     1010,  0,     1013,  0,     0,
    0,     0,     0,     0,     0,     1014,  0,     0,     0,     4742,  0,
    0,     1012,  0,     0,     0,     0,     0,     1006,  0,     0,     0,
    0,     0,     0,     0,     0,     1012,  0,     1009,  0,     0,     0,
    0,     1014,  1012,  1006,  0,     0,     1010,  0,     1009,  1010,  0,
    0,     0,     1012,  0,     0,     1006,  0,     0,     0,     1014,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1009,  0,     0,     0,     0,     0,     1004,  0,     0,     0,
    4791,  4791,  1013,  0,     0,     1012,  0,     0,     1007,  0,     0,
    4433,  0,     0,     0,     0,     0,     0,     1012,  1014,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1012,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1012,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1006,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     4791,  0,
    0,     1007,  0,     0,     0,     0,     1010,  0,     1006,  1012,  0,
    0,     1012,  0,     0,     0,     0,     4859,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1006,  0,     0,     0,     0,     0,     0,     0,     0,     4358,  0,
    1014,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1004,  0,     0,     0,     0,     0,     1013,  0,     0,
    1009,  1006,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1014,  0,     0,     0,     0,     0,     4791,  4899,  0,
    0,     0,     0,     0,     0,     0,     0,     1004,  0,     0,     0,
    0,     0,     1013,  0,     0,     0,     0,     0,     0,     1007,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1009,  0,     0,     0,     1007,  1012,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     1007,  0,     0,
    0,     0,     0,     0,     0,     1006,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2686,  0,     0,     0,     0,     0,     0,
    1010,  0,     0,     0,     1010,  1010,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1004,  0,     0,     0,     0,
    0,     1013,  0,     0,     0,     1004,  0,     0,     0,     0,     1006,
    1013,  1009,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1009,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1009,  1010,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1010,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2686,
    0,     0,     0,     0,     0,     0,     1010,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1007,  0,     1012,  1007,  1014,  1007,  1012,  1012,  0,     0,
    1007,  0,     0,     0,     1004,  0,     0,     0,     0,     0,     1013,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1006,  0,     0,     0,     0,     1014,
    1004,  0,     0,     0,     0,     0,     1013,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1007,  1004,  0,     0,
    0,     0,     0,     1013,  1012,  0,     0,     0,     0,     0,     0,
    0,     0,     1007,  0,     0,     1012,  0,     0,     0,     0,     1006,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1014,  0,
    0,     0,     1014,  1014,  1007,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1004,  0,     1012,  0,
    0,     0,     1013,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1009,  1010,  0,     1009,  0,     1009,  0,
    0,     0,     0,     1009,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1007,  0,     1007,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     4358,  1014,  0,     0,     0,     0,     0,     0,     1009,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1010,  0,
    0,     0,     0,     0,     0,     1009,  0,     0,     0,     1006,  1004,
    0,     0,     0,     0,     0,     1013,  0,     1007,  1006,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     1009,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1007,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1004,  0,     0,     0,     0,     0,     1013,  1012,  0,     0,
    0,     1007,  0,     0,     0,     0,     0,     0,     1007,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1009,  0,     1009,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1010,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1007,  1012,  0,     0,     0,     1010,  0,     1006,  0,     0,     0,
    0,     0,     0,     0,     0,     1010,  0,     1007,  0,     0,     1009,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1007,  0,
    0,     0,     0,     1006,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     1009,  1004,  0,     0,     0,     0,     0,     1013,  0,
    1006,  0,     0,     0,     0,     0,     0,     0,     0,     0,     1803,
    0,     0,     0,     0,     1009,  0,     0,     0,     0,     0,     0,
    1009,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1006,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1012,  0,
    0,     0,     0,     0,     0,     0,     0,     1803,  0,     0,     0,
    0,     0,     1007,  1009,  0,     0,     0,     0,     1012,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1012,  0,     1009,
    0,     1007,  0,     0,     0,     0,     0,     0,     0,     1004,  0,
    0,     1009,  0,     0,     1013,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1007,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1004,  0,     0,     0,     0,     0,     1013,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1006,  0,     0,     1007,  0,     0,     0,     1010,  0,
    0,     1010,  0,     1010,  0,     0,     0,     0,     1010,  1004,  0,
    0,     0,     0,     0,     1013,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1006,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1009,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     1010,  0,     0,     0,     1004,  0,     0,
    0,     1004,  1004,  1013,  1009,  0,     0,     1013,  1013,  0,     1010,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1007,  0,
    0,     0,     0,     0,     0,     0,     0,     1009,  0,     0,     0,
    0,     1010,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1009,  0,     0,
    0,     1012,  0,     0,     1012,  0,     1012,  0,     0,     0,     0,
    1012,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1004,  0,     0,     0,     1006,  0,     1013,  1010,  0,
    1010,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1007,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1012,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1012,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     1009,  0,     0,     1010,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1012,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1010,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1010,  0,
    0,     1006,  0,     0,     0,     1010,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1803,
    0,     1012,  0,     1012,  0,     0,     0,     1006,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     1009,  0,     0,     1007,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1010,  0,     0,
    0,     1006,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1010,  0,     0,     1012,  0,     0,     0,
    0,     0,     0,     1007,  0,     0,     1010,  0,     1803,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1012,
    1803,  0,     0,     0,     2520,  0,     0,     0,     0,     0,     0,
    1006,  0,     0,     0,     1006,  1006,  0,     1803,  1803,  1803,  0,
    1803,  1012,  0,     0,     0,     0,     0,     0,     1012,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1803,  0,
    0,     1009,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1010,
    1012,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1803,  0,     0,     1006,  0,     1012,  0,     1010,  0,
    0,     0,     1007,  0,     0,     0,     1009,  0,     0,     1012,  0,
    0,     1007,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1010,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1010,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1803,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1803,  0,     0,
    1803,  0,     1012,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1007,  1012,  0,     0,     0,     1009,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     1009,  0,     1010,  0,     0,     0,     0,
    0,     0,     0,     0,     1012,  0,     0,     1007,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1007,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1012,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1007,  0,     0,     0,     0,     0,     0,     0,
    1010,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1009,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1012,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1009,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1009,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1007,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1009,  0,     0,     0,     0,
    0,     0,     0,     1012,  0,     0,     1010,  0,     1007,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1010,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1009,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1007,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1012,  0,
    1009,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1010,
    0,     0,     0,     1012,  0,     0,     0,     0,     0,     1010,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1007,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1803,  0,
    0,     0,     1009,  0,     0,     0,     0,     0,     0,     0,     0,
    1007,  0,     0,     0,     0,     0,     0,     1803,  0,     1803,  0,
    0,     2520,  2520,  0,     3190,  0,     2520,  0,     0,     0,     1803,
    0,     0,     1803,  0,     0,     0,     0,     1803,  0,     0,     0,
    0,     0,     1803,  0,     0,     1007,  0,     1803,  1010,  0,     0,
    0,     0,     1012,  1803,  1803,  1803,  1803,  0,     0,     0,     2520,
    2520,  1012,  1803,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1803,  1010,  1803,  0,     0,     0,     0,     0,
    0,     1803,  1803,  1803,  1803,  1803,  1803,  1803,  1803,  1803,  1803,
    0,     1010,  0,     0,     1007,  0,     0,     0,     1007,  1007,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     1009,  0,     0,
    0,     0,     0,     0,     0,     1803,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1009,  0,     0,     0,     0,     0,     0,     0,
    1010,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1009,  0,     0,
    1012,  0,     0,     0,     0,     0,     0,     0,     0,     1007,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1012,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1012,  1803,  0,     1009,  0,     0,     0,
    1009,  1009,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1010,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1012,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1010,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1009,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1012,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1010,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1012,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1803,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1010,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1012,
    0,     0,     0,     0,     0,     0,     0,     0,     1010,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1803,
    0,     0,     1010,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1803,  0,     0,
    0,     1010,  0,     1803,  0,     1010,  1010,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     1012,  0,     0,     3190,  3190,  0,
    0,     2520,  2520,  2520,  2520,  0,     0,     2520,  2520,  2520,  2520,
    2520,  2520,  2520,  2520,  2520,  2520,  3190,  0,     0,     0,     0,
    1012,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1803,  0,     0,     1803,  0,
    1803,  0,     0,     3190,  3190,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1012,  0,     1803,  2520,  2520,  1803,
    0,     1803,  0,     0,     0,     0,     1010,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1012,  0,     1803,  0,     1012,  1012,  0,
    0,     0,     0,     0,     0,     1803,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1803,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1012,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2520,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1803,  0,     0,     0,     1803,  1803,  1803,  0,
    0,     0,     0,     0,     3190,  3190,  3190,  3190,  0,     0,     0,
    0,     3190,  3190,  3190,  3190,  3190,  3190,  3190,  3190,  3190,  3190,
    1803,  1803,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1803,  0,     0,     1803,  0,     1803,  0,
    0,     0,     1803,  0,     0,     3190,  3190,  0,     0,     1803,  1803,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1803,
    0,     0,     0,     0,     0,     0,     1803,  1803,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1803,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     3190,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1803,  1803,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1803,  0,     0,
    0,     0,     1803,  2520,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1803,  0,     1803,  0,     0,
    0,     1803,  1803,  1803,  0,     0,     1803,  0,     0,     1803,  1803,
    0,     0,     0,     1803,  0,     0,     0,     1803,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1803,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1803,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1803,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     3190,  2520,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1803,  1803,  1803,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1803,  1803,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     3190,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1803,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1803,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1803,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1803,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1803,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     771,   1122,  593,   1123,  1124,
    1125,  646,   1126,  0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   2612,  229,   230,   231,
    0,     0,     1803,  0,     1127,  0,     0,     232,   233,   0,     234,
    235,   772,   236,   237,   238,   239,   1128,  773,   1129,  1130,  0,
    243,   244,   245,   246,   247,   1131,  1132,  248,   249,   1133,  1134,
    252,   0,     253,   254,   255,   256,   1135,  0,     1136,  1803,  258,
    259,   260,   261,   775,   262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     776,   271,   272,   273,   1137,  1138,  1139,
    1140,  1141,  1142,  1143,  274,   275,   276,   277,   278,   279,   1144,
    1145,  282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   2613,  0,     292,   293,   985,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   1146,  308,   309,   310,   1147,  1148,  312,   0,     313,   314,
    1149,  316,   0,     317,   0,     318,   778,   0,     779,   319,   320,
    321,   0,     322,   1150,  0,     1151,  325,   0,     326,   327,   328,
    329,   330,   780,   331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   781,   342,   343,   344,   345,   346,
    1152,  1153,  0,     1154,  0,     350,   782,   783,   351,   784,   352,
    353,   354,   355,   356,   0,     0,     357,   1155,  785,   359,   786,
    0,     360,   361,   362,   1156,  1157,  363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   1158,
    787,   1159,  380,   381,   382,   1160,  383,   384,   788,   385,   1161,
    1162,  387,   1163,  389,   390,   391,   0,     392,   0,     0,     1164,
    394,   395,   0,     0,     396,   397,   789,   398,   790,   1165,  400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   1166,  410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   1167,  424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    791,   441,   442,   443,   1168,  445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   1169,  458,   459,
    460,   461,   462,   792,   463,   464,   1170,  466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   1171,  0,
    479,   480,   0,     481,   793,   482,   483,   484,   485,   486,   0,
    1172,  1173,  0,     0,     489,   490,   1174,  492,   1175,  1176,  494,
    495,   496,   497,   498,   499,   500,   0,     1177,  501,   502,   503,
    504,   505,   1178,  0,     506,   507,   508,   509,   510,   511,   1179,
    2614,  513,   794,   514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   1180,  1181,  1182,
    1183,  1184,  1185,  1186,  1187,  534,   535,   536,   1188,  0,     0,
    0,     0,     0,     0,     1189,  1190,  2615,  0,     0,     0,     0,
    0,     0,     1192,  2616,  771,   1122,  593,   1123,  1124,  1125,  646,
    1126,  0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     1127,  0,     0,     232,   233,   0,     234,   235,   772,
    236,   237,   238,   239,   1128,  773,   1129,  1130,  0,     243,   244,
    245,   246,   247,   1131,  1132,  248,   249,   1133,  1134,  252,   0,
    253,   254,   255,   256,   1135,  0,     1136,  0,     258,   259,   260,
    261,   775,   262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     776,   271,   272,   273,   1137,  1138,  1139,  1140,  1141,
    1142,  1143,  274,   275,   276,   277,   278,   279,   1144,  1145,  282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   985,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   1146,
    308,   309,   310,   1147,  1148,  312,   0,     313,   314,   1149,  316,
    0,     317,   0,     318,   778,   0,     779,   319,   320,   321,   0,
    322,   1150,  0,     1151,  325,   0,     326,   327,   328,   329,   330,
    780,   331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   781,   342,   343,   344,   345,   346,   1152,  1153,
    0,     1154,  0,     350,   782,   783,   351,   784,   352,   353,   354,
    355,   356,   0,     0,     357,   1155,  785,   359,   786,   0,     360,
    361,   362,   1156,  1157,  363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   1158,  787,   1159,
    380,   381,   382,   1160,  383,   384,   788,   385,   1161,  1162,  387,
    1163,  389,   390,   391,   0,     392,   0,     0,     1164,  394,   395,
    0,     0,     396,   397,   789,   398,   790,   1165,  400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   1166,  410,   411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    1167,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   791,   441,
    442,   443,   1168,  445,   446,   447,   448,   449,   450,   451,   452,
    39,    453,   454,   455,   456,   457,   1169,  458,   459,   460,   461,
    462,   792,   463,   464,   1170,  466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   1171,  0,     479,   480,
    43,    481,   793,   482,   483,   484,   485,   486,   0,     1172,  1173,
    0,     0,     489,   490,   1174,  492,   1175,  1176,  494,   495,   496,
    497,   498,   499,   500,   0,     1177,  501,   502,   503,   504,   505,
    1178,  0,     506,   507,   508,   509,   510,   1058,  1179,  0,     513,
    794,   514,   515,   516,   517,   0,     0,     518,   0,     48,    519,
    520,   521,   522,   523,   524,   525,   1180,  1181,  1182,  1183,  1184,
    1185,  1186,  1187,  534,   535,   536,   1188,  0,     49,    0,     0,
    0,     0,     1189,  1190,  0,     0,     0,     0,     0,     0,     0,
    1192,  4608,  771,   1122,  593,   1123,  1124,  1125,  646,   1126,  0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    1127,  0,     0,     232,   233,   0,     234,   235,   772,   236,   237,
    238,   239,   1128,  773,   1129,  1130,  0,     243,   244,   245,   246,
    247,   1131,  1132,  248,   249,   1133,  1134,  252,   0,     253,   254,
    255,   256,   1135,  0,     1136,  0,     258,   259,   260,   261,   775,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    776,   271,   272,   273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,
    274,   275,   276,   277,   278,   279,   1144,  1145,  282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   985,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   1146,  308,   309,
    310,   1147,  1148,  312,   0,     313,   314,   1149,  316,   0,     317,
    0,     318,   778,   0,     779,   319,   320,   321,   0,     322,   1150,
    0,     1151,  325,   0,     326,   327,   328,   329,   330,   780,   331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   781,   342,   343,   344,   345,   346,   1152,  1153,  0,     1154,
    0,     350,   782,   783,   351,   784,   352,   353,   354,   355,   356,
    0,     0,     357,   1155,  785,   359,   786,   0,     360,   361,   362,
    1156,  1157,  363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   1158,  787,   1159,  380,   381,
    382,   1160,  383,   384,   788,   385,   1161,  1162,  387,   1163,  389,
    390,   391,   0,     392,   0,     0,     1164,  394,   395,   0,     0,
    396,   397,   789,   398,   790,   1165,  400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   1166,  410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   1167,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   791,   441,   442,   443,
    1168,  445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   1169,  458,   459,   460,   461,   462,   792,
    463,   464,   1170,  466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   1171,  0,     479,   480,   0,     481,
    793,   482,   483,   484,   485,   486,   0,     1172,  1173,  0,     0,
    489,   490,   1174,  492,   1175,  1176,  494,   495,   496,   497,   498,
    499,   500,   0,     1177,  501,   502,   503,   504,   505,   1178,  0,
    506,   507,   508,   509,   510,   511,   1179,  0,     513,   794,   514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,
    1187,  534,   535,   536,   1188,  0,     0,     0,     0,     0,     0,
    1189,  1190,  0,     0,     0,     0,     0,     0,     0,     1192,  2522,
    771,   1122,  593,   1123,  1124,  1125,  646,   1126,  0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     1127,  0,
    0,     232,   233,   0,     234,   235,   772,   236,   237,   238,   239,
    1128,  773,   1129,  1130,  0,     243,   244,   245,   246,   247,   1131,
    1132,  248,   249,   1133,  1134,  252,   0,     253,   254,   255,   256,
    1135,  0,     1136,  0,     258,   259,   260,   261,   775,   262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     776,   271,
    272,   273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,   275,
    276,   277,   278,   279,   1144,  1145,  282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   985,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   1146,  308,   309,   310,   1147,
    1148,  312,   0,     313,   314,   1149,  316,   0,     317,   0,     318,
    778,   0,     779,   319,   320,   321,   0,     322,   1150,  0,     1151,
    325,   0,     326,   327,   328,   329,   330,   780,   331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   781,
    342,   343,   344,   345,   346,   1152,  1153,  0,     1154,  0,     350,
    782,   783,   351,   784,   352,   353,   354,   355,   356,   0,     0,
    357,   1155,  785,   359,   786,   0,     360,   361,   362,   1156,  1157,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   1158,  787,   1159,  380,   381,   382,   1160,
    383,   384,   788,   385,   1161,  1162,  387,   1163,  389,   390,   391,
    0,     392,   0,     0,     1164,  394,   395,   0,     0,     396,   397,
    789,   398,   790,   1165,  400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   1166,  410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   1167,  424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   791,   441,   442,   443,   1168,  445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   1169,  458,   459,   460,   461,   462,   792,   463,   464,
    1170,  466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   1171,  0,     479,   480,   0,     481,   793,   482,
    483,   484,   485,   486,   0,     1172,  1173,  0,     0,     489,   490,
    1174,  492,   1175,  1176,  494,   495,   496,   497,   498,   499,   500,
    0,     1177,  501,   502,   503,   504,   505,   1178,  0,     506,   507,
    508,   509,   510,   511,   1179,  0,     513,   794,   514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,
    535,   536,   1188,  0,     0,     0,     0,     0,     0,     1189,  1190,
    0,     0,     0,     0,     0,     0,     0,     1192,  3691,  771,   1122,
    593,   1123,  1124,  1125,  646,   1126,  0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     1127,  0,     0,     232,
    233,   0,     234,   235,   772,   236,   237,   238,   239,   1128,  773,
    1129,  1130,  0,     243,   244,   245,   246,   247,   1131,  1132,  248,
    249,   1133,  1134,  252,   0,     253,   254,   255,   256,   1135,  0,
    1136,  0,     258,   259,   260,   261,   775,   262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     776,   271,   272,   273,
    1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,   275,   276,   277,
    278,   279,   1144,  1145,  282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   985,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   1146,  308,   309,   310,   1147,  1148,  312,
    0,     313,   314,   1149,  316,   0,     317,   0,     318,   778,   0,
    779,   319,   320,   321,   0,     322,   1150,  0,     1151,  325,   0,
    326,   327,   328,   329,   330,   780,   331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   781,   342,   343,
    344,   345,   346,   1152,  1153,  0,     1154,  0,     350,   782,   783,
    351,   784,   352,   353,   354,   355,   356,   0,     0,     357,   1155,
    785,   359,   786,   0,     360,   361,   362,   1156,  1157,  363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   1158,  787,   1159,  380,   381,   382,   1160,  383,   384,
    788,   385,   1161,  1162,  387,   1163,  389,   390,   391,   0,     392,
    0,     0,     1164,  394,   395,   0,     0,     396,   397,   789,   398,
    790,   1165,  400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   1166,  410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   1167,  424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   791,   441,   442,   443,   1168,  445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    1169,  458,   459,   460,   461,   462,   792,   463,   464,   1170,  466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   1171,  0,     479,   480,   0,     481,   793,   482,   483,   484,
    485,   486,   0,     1172,  1173,  0,     0,     489,   490,   1174,  492,
    1175,  1176,  494,   495,   496,   497,   498,   499,   500,   0,     1177,
    501,   502,   503,   504,   505,   1178,  0,     506,   507,   508,   509,
    510,   511,   1179,  0,     513,   794,   514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,   535,   536,
    1188,  0,     0,     219,   0,     0,     0,     1189,  1190,  0,     0,
    0,     0,     0,     0,     0,     1192,  3762,  220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     3778,  0,     232,   233,   0,     234,   235,   0,     236,
    237,   238,   239,   240,   0,     241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     0,     0,     258,   259,   260,   261,
    0,     262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     -1577, 271,   272,   273,   0,     0,     0,     0,     0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   0,     0,     -1577, 319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   330,   0,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   -1577, 342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   0,     0,     351,   -1577, 352,   353,   354,   355,
    356,   0,     0,     357,   358,   -1577, 359,   0,     0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   -1577, 379,   380,
    381,   382,   0,     383,   384,   0,     385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   0,     398,   0,     399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   -1577, 441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   0,     458,   459,   460,   461,   462,
    0,     463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   0,     482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   0,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     0,     0,     977,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1274,  220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   772,   236,   237,   238,   0,     978,   773,   979,
    980,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    981,   982,   252,   0,     253,   254,   255,   256,   0,     0,     774,
    0,     258,   259,   260,   261,   775,   262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     776,   271,   272,   273,   0,
    0,     0,     777,   0,     0,     0,     274,   275,   276,   277,   278,
    279,   983,   984,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   985,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     308,   309,   310,   0,     0,     312,   0,
    313,   314,   986,   316,   0,     317,   0,     318,   778,   0,     779,
    319,   320,   321,   0,     322,   0,     0,     0,     325,   0,     326,
    327,   328,   329,   330,   780,   331,   332,   333,   334,   1984,  335,
    336,   337,   338,   339,   340,   0,     341,   781,   1985,  343,   344,
    345,   346,   988,   989,   0,     990,   0,     350,   782,   783,   351,
    784,   352,   353,   354,   355,   356,   0,     0,     357,   0,     785,
    359,   786,   0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   991,   787,   992,   380,   381,   0,     0,     383,   384,   788,
    385,   0,     0,     387,   993,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   1987,  789,   398,   790,
    0,     400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    0,     410,   0,     412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   994,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   791,   441,   442,   443,   0,     445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   0,
    458,   459,   1988,  461,   462,   792,   463,   464,   996,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    0,     0,     479,   480,   0,     481,   793,   482,   483,   484,   485,
    486,   0,     997,   998,   0,     0,     489,   490,   0,     492,   0,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    0,     999,   1989,  513,   794,   514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   977,   0,
    0,     0,     0,     0,     0,     0,     0,     534,   535,   536,   0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     2093,  0,     0,     0,     0,     232,
    233,   0,     234,   235,   772,   236,   237,   238,   0,     978,   773,
    979,   980,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   981,   982,   252,   0,     253,   254,   255,   256,   0,     0,
    774,   0,     258,   259,   260,   261,   775,   262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     776,   271,   272,   273,
    0,     0,     0,     777,   0,     0,     0,     274,   275,   276,   277,
    278,   279,   983,   984,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   985,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   0,     308,   309,   310,   0,     0,     312,
    0,     313,   314,   986,   316,   0,     317,   0,     318,   778,   0,
    779,   319,   320,   321,   0,     322,   0,     0,     0,     325,   0,
    326,   327,   328,   329,   330,   780,   331,   332,   333,   334,   1984,
    335,   336,   337,   338,   339,   340,   0,     341,   781,   1985,  343,
    344,   345,   346,   988,   989,   0,     990,   0,     350,   782,   783,
    351,   784,   352,   353,   354,   355,   356,   0,     0,     357,   0,
    785,   359,   786,   0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   991,   787,   992,   380,   381,   0,     0,     383,   384,
    788,   385,   0,     0,     387,   993,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   1987,  789,   398,
    790,   0,     400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   0,     410,   0,     412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   994,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   791,   441,   442,   443,   0,     445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   1988,  461,   462,   792,   463,   464,   996,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   0,     0,     479,   480,   0,     481,   793,   482,   483,   484,
    485,   486,   0,     997,   998,   0,     0,     489,   490,   0,     492,
    0,     0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   0,     999,   1989,  513,   794,   514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   771,
    1122,  593,   1123,  1124,  1125,  646,   1126,  0,     534,   535,   536,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     3031,  0,     1127,  0,     0,
    232,   233,   0,     234,   235,   772,   236,   237,   238,   239,   1128,
    773,   1129,  1130,  0,     243,   244,   245,   246,   247,   1131,  1132,
    248,   249,   1133,  1134,  252,   0,     253,   254,   255,   256,   1135,
    0,     1136,  0,     258,   259,   260,   261,   775,   262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     776,   271,   272,
    273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,   275,   276,
    277,   278,   279,   1144,  1145,  282,   1266,  283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    985,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   1146,  308,   309,   310,   1147,  1148,
    312,   0,     313,   314,   1149,  316,   0,     317,   0,     318,   778,
    0,     779,   319,   320,   321,   0,     322,   1150,  0,     1151,  325,
    0,     326,   327,   328,   329,   330,   780,   331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   781,   342,
    343,   344,   345,   346,   1152,  1153,  0,     1154,  0,     350,   782,
    783,   351,   784,   352,   353,   354,   355,   356,   0,     0,     357,
    1155,  785,   359,   786,   0,     360,   361,   362,   1156,  1157,  363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   1158,  787,   1159,  380,   381,   382,   1160,  383,
    384,   788,   385,   1161,  1162,  387,   1163,  389,   390,   391,   0,
    392,   0,     0,     1164,  394,   395,   0,     0,     396,   397,   789,
    398,   790,   1165,  400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   1166,  410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1167,  424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   791,   441,   442,   443,   1168,  445,   446,
    447,   448,   449,   450,   451,   452,   39,    453,   454,   455,   456,
    457,   1169,  458,   459,   460,   461,   462,   792,   463,   464,   1170,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   1171,  0,     479,   480,   43,    481,   793,   482,   483,
    484,   485,   486,   0,     1172,  1173,  0,     0,     489,   490,   1174,
    492,   1175,  1176,  494,   495,   496,   497,   498,   499,   500,   0,
    1177,  501,   502,   503,   504,   505,   1178,  0,     506,   507,   508,
    509,   510,   1058,  1179,  0,     513,   794,   514,   515,   516,   517,
    0,     0,     518,   0,     48,    519,   520,   521,   522,   523,   524,
    525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,   535,
    536,   1188,  0,     49,    0,     0,     0,     0,     1189,  1190,  0,
    0,     0,     0,     0,     0,     0,     1192,  771,   1122,  593,   1123,
    1124,  1125,  646,   1126,  0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     1127,  0,     0,     232,   233,   0,
    234,   235,   772,   236,   237,   238,   239,   1128,  773,   1129,  1130,
    0,     243,   244,   245,   246,   247,   1131,  1132,  248,   249,   1133,
    1134,  252,   0,     253,   254,   255,   256,   1135,  0,     1136,  0,
    258,   259,   260,   261,   775,   262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     776,   271,   272,   273,   1137,  1138,
    1139,  1140,  1141,  1142,  1143,  274,   275,   276,   277,   278,   279,
    1144,  1145,  282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   985,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   1146,  308,   309,   310,   1147,  1148,  312,   0,     313,
    314,   1149,  316,   0,     317,   0,     318,   778,   0,     779,   319,
    320,   321,   0,     322,   1150,  0,     1151,  325,   0,     326,   327,
    328,   329,   330,   780,   331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   781,   342,   343,   344,   345,
    346,   1152,  1153,  0,     1154,  0,     350,   782,   783,   351,   784,
    352,   353,   354,   355,   356,   0,     0,     357,   1155,  785,   359,
    786,   0,     360,   361,   362,   1156,  1157,  363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    1158,  787,   1159,  380,   381,   382,   1160,  383,   384,   788,   385,
    1161,  1162,  387,   1163,  389,   390,   391,   0,     392,   0,     0,
    1164,  394,   395,   0,     0,     396,   397,   789,   398,   790,   1165,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   1166,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   1167,  424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   791,   441,   442,   443,   1168,  445,   446,   447,   448,   449,
    450,   451,   452,   39,    453,   454,   455,   456,   457,   1169,  458,
    459,   460,   461,   462,   792,   463,   464,   1170,  466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   1171,
    0,     479,   480,   43,    481,   793,   482,   483,   484,   485,   486,
    0,     1172,  1173,  0,     0,     489,   490,   1174,  492,   1175,  1176,
    494,   495,   496,   497,   498,   499,   500,   0,     1177,  501,   502,
    503,   504,   505,   1178,  0,     506,   507,   508,   509,   510,   1058,
    1179,  0,     513,   794,   514,   515,   516,   517,   0,     0,     518,
    0,     48,    519,   520,   521,   522,   523,   524,   525,   1180,  1181,
    1182,  1183,  1184,  1185,  1186,  1187,  534,   535,   536,   1188,  0,
    49,    0,     0,     0,     0,     1189,  1190,  0,     0,     0,     0,
    0,     0,     0,     1192,  771,   1122,  593,   1123,  1124,  1125,  646,
    1126,  0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     1127,  0,     0,     232,   233,   0,     234,   235,   772,
    236,   237,   238,   239,   1128,  773,   1129,  1130,  2528,  243,   244,
    245,   246,   247,   1131,  1132,  248,   249,   1133,  1134,  252,   0,
    253,   254,   255,   256,   1135,  0,     1136,  0,     258,   259,   260,
    261,   775,   262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     776,   271,   272,   273,   1137,  1138,  1139,  1140,  1141,
    1142,  1143,  274,   275,   276,   277,   278,   279,   1144,  1145,  282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   985,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   1146,
    308,   309,   310,   1147,  1148,  312,   0,     313,   314,   1149,  316,
    0,     317,   0,     318,   778,   2529,  779,   319,   320,   321,   0,
    322,   1150,  0,     1151,  325,   0,     326,   327,   328,   329,   330,
    780,   331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   781,   342,   343,   344,   345,   346,   1152,  1153,
    0,     1154,  0,     350,   782,   783,   351,   784,   352,   353,   354,
    355,   356,   0,     2530,  357,   1155,  785,   359,   786,   0,     360,
    361,   362,   1156,  1157,  363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   1158,  787,   1159,
    380,   381,   382,   1160,  383,   384,   788,   385,   1161,  1162,  387,
    1163,  389,   390,   391,   0,     392,   0,     0,     1164,  394,   395,
    0,     0,     396,   397,   789,   398,   790,   1165,  400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   1166,  410,   411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    1167,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   791,   441,
    442,   443,   1168,  445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   1169,  458,   459,   460,   461,
    462,   792,   463,   464,   1170,  466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   1171,  0,     479,   480,
    0,     481,   793,   482,   483,   484,   485,   486,   0,     1172,  1173,
    0,     2531,  489,   490,   1174,  492,   1175,  1176,  494,   495,   496,
    497,   498,   499,   500,   0,     1177,  501,   502,   503,   504,   505,
    1178,  0,     506,   507,   508,   509,   510,   511,   1179,  0,     513,
    794,   514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   525,   1180,  1181,  1182,  1183,  1184,
    1185,  1186,  1187,  534,   535,   536,   1188,  0,     0,     0,     0,
    0,     0,     1189,  1190,  0,     0,     0,     0,     0,     0,     0,
    1192,  771,   1122,  593,   1123,  1124,  1125,  646,   1126,  0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     1127,
    0,     0,     232,   233,   0,     234,   235,   772,   236,   237,   238,
    239,   1128,  773,   1129,  1130,  0,     243,   244,   245,   246,   247,
    1131,  1132,  248,   249,   1133,  1134,  252,   0,     253,   254,   255,
    256,   1135,  0,     1136,  0,     258,   259,   260,   261,   775,   262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     776,
    271,   272,   273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,
    275,   276,   277,   278,   279,   1144,  1145,  282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   985,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   1146,  308,   309,   310,
    1147,  1148,  312,   0,     313,   314,   1149,  316,   0,     317,   0,
    318,   778,   0,     779,   319,   320,   321,   0,     322,   1150,  0,
    1151,  325,   0,     326,   327,   328,   329,   330,   780,   331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    781,   342,   343,   344,   345,   346,   1152,  1153,  0,     1154,  0,
    350,   782,   783,   351,   784,   352,   353,   354,   355,   356,   0,
    0,     357,   1155,  785,   359,   786,   0,     360,   361,   362,   1156,
    1157,  363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   1158,  787,   1159,  380,   381,   382,
    1160,  383,   384,   788,   385,   1161,  1162,  387,   1163,  389,   390,
    391,   0,     392,   0,     0,     1164,  394,   395,   0,     0,     396,
    397,   789,   398,   790,   1165,  400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   1166,  410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   1167,  424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   791,   441,   442,   443,   1168,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   1169,  458,   459,   460,   461,   462,   792,   463,
    464,   1170,  466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   1171,  0,     479,   480,   0,     481,   793,
    482,   483,   484,   485,   486,   0,     1172,  1173,  0,     0,     489,
    490,   1174,  492,   1175,  1176,  494,   495,   496,   497,   498,   499,
    500,   0,     1177,  501,   502,   503,   504,   505,   1178,  0,     506,
    507,   508,   509,   510,   511,   1179,  0,     513,   794,   514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,
    534,   535,   536,   1188,  0,     0,     0,     0,     0,     0,     1189,
    1190,  0,     0,     0,     0,     0,     1727,  2483,  1192,  771,   1122,
    593,   1123,  1124,  1125,  646,   1126,  0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     1127,  0,     0,     232,
    233,   0,     234,   235,   772,   236,   237,   238,   239,   1128,  773,
    1129,  1130,  0,     243,   244,   245,   246,   247,   1131,  1132,  248,
    249,   1133,  1134,  252,   0,     253,   254,   255,   256,   1135,  0,
    1136,  0,     258,   259,   260,   261,   775,   262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     776,   271,   272,   273,
    1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,   275,   276,   277,
    278,   279,   1144,  1145,  282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   985,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   1146,  308,   309,   310,   1147,  1148,  312,
    0,     313,   314,   1149,  316,   0,     317,   0,     318,   778,   0,
    779,   319,   320,   321,   0,     322,   1150,  0,     1151,  325,   0,
    326,   327,   328,   329,   330,   780,   331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   781,   342,   343,
    344,   345,   346,   1152,  1153,  0,     1154,  0,     350,   782,   783,
    351,   784,   352,   353,   354,   355,   356,   0,     0,     357,   1155,
    785,   359,   786,   0,     360,   361,   362,   1156,  1157,  363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   1158,  787,   1159,  380,   381,   382,   1160,  383,   384,
    788,   385,   1161,  1162,  387,   1163,  389,   390,   391,   0,     392,
    0,     0,     1164,  394,   395,   0,     0,     396,   397,   789,   398,
    790,   1165,  400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   1166,  410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   1167,  424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   791,   441,   442,   443,   1168,  445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    1169,  458,   459,   460,   461,   462,   792,   463,   464,   1170,  466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   1171,  0,     479,   480,   0,     481,   793,   482,   483,   484,
    485,   486,   0,     1172,  1173,  0,     0,     489,   490,   1174,  492,
    1175,  1176,  494,   495,   496,   497,   498,   499,   500,   0,     1177,
    501,   502,   503,   504,   505,   1178,  0,     506,   507,   508,   509,
    510,   511,   1179,  0,     513,   794,   514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,   535,   536,
    1188,  0,     0,     0,     0,     0,     0,     1189,  1190,  1191,  0,
    0,     0,     0,     0,     0,     1192,  771,   1122,  593,   1123,  1124,
    1125,  646,   1126,  0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     1127,  0,     0,     232,   233,   0,     234,
    235,   772,   236,   237,   238,   239,   1128,  773,   1129,  1130,  0,
    243,   244,   245,   246,   247,   1131,  1132,  248,   249,   1133,  1134,
    252,   0,     253,   254,   255,   256,   1135,  0,     1136,  0,     258,
    259,   260,   261,   775,   262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     776,   271,   272,   273,   1137,  1138,  1139,
    1140,  1141,  1142,  1143,  274,   275,   276,   277,   278,   279,   1144,
    1145,  282,   1266,  283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   985,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   1146,  308,   309,   310,   1147,  1148,  312,   0,     313,   314,
    1149,  316,   0,     317,   0,     318,   778,   0,     779,   319,   320,
    321,   0,     322,   1150,  0,     1151,  325,   0,     326,   327,   328,
    329,   330,   780,   331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   781,   342,   343,   344,   345,   346,
    1152,  1153,  0,     1154,  0,     350,   782,   783,   351,   784,   352,
    353,   354,   355,   356,   0,     0,     357,   1155,  785,   359,   786,
    0,     360,   361,   362,   1156,  1157,  363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   1158,
    787,   1159,  380,   381,   382,   1160,  383,   384,   788,   385,   1161,
    1162,  387,   1163,  389,   390,   391,   0,     392,   0,     0,     1164,
    394,   395,   0,     0,     396,   397,   789,   398,   790,   1165,  400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   1166,  410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   1167,  424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    791,   441,   442,   443,   1168,  445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   1169,  458,   459,
    460,   461,   462,   792,   463,   464,   1170,  466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   1171,  0,
    479,   480,   0,     481,   793,   482,   483,   484,   485,   486,   0,
    1172,  1173,  0,     0,     489,   490,   1174,  492,   1175,  1176,  494,
    495,   496,   497,   498,   499,   500,   0,     1177,  501,   502,   503,
    504,   505,   1178,  0,     506,   507,   508,   509,   510,   511,   1179,
    0,     513,   794,   514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   1180,  1181,  1182,
    1183,  1184,  1185,  1186,  1187,  534,   535,   536,   1188,  0,     0,
    0,     0,     0,     0,     1189,  1190,  0,     0,     0,     0,     0,
    0,     0,     1192,  771,   1122,  593,   1123,  1124,  1125,  646,   1126,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   1959,  229,   230,   231,   0,     0,     0,
    0,     1127,  0,     0,     232,   233,   0,     234,   235,   772,   236,
    237,   238,   239,   1128,  773,   1129,  1130,  0,     243,   244,   245,
    246,   247,   1131,  1132,  248,   249,   1133,  1134,  252,   0,     253,
    254,   255,   256,   1135,  0,     1136,  0,     258,   259,   260,   261,
    775,   262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     776,   271,   272,   273,   1137,  1138,  1139,  1140,  1141,  1142,
    1143,  274,   275,   276,   277,   278,   279,   1144,  1145,  282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   985,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   1146,  308,
    309,   310,   1147,  1148,  312,   0,     313,   314,   1149,  316,   0,
    317,   0,     318,   778,   0,     779,   319,   320,   321,   0,     322,
    1150,  0,     1151,  325,   0,     326,   327,   328,   329,   330,   780,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   781,   342,   343,   344,   345,   346,   1152,  1153,  0,
    1154,  0,     350,   782,   783,   351,   784,   352,   353,   354,   355,
    356,   0,     0,     357,   1155,  785,   359,   786,   0,     360,   361,
    362,   1156,  1157,  363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   1158,  787,   1159,  380,
    381,   382,   1160,  383,   384,   788,   385,   1161,  1162,  387,   1163,
    389,   390,   391,   0,     392,   0,     0,     1164,  394,   395,   0,
    0,     396,   397,   789,   398,   790,   1165,  400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   1166,  410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1167,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   791,   441,   442,
    443,   1168,  445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   1169,  458,   459,   460,   461,   462,
    792,   463,   464,   1170,  466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   1171,  0,     479,   480,   0,
    481,   793,   482,   483,   484,   485,   486,   0,     1172,  1173,  0,
    0,     489,   490,   1174,  492,   1175,  1176,  494,   495,   496,   497,
    498,   499,   500,   0,     1177,  501,   502,   503,   504,   505,   1178,
    0,     506,   507,   508,   509,   510,   511,   1179,  0,     513,   794,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   1180,  1181,  1182,  1183,  1184,  1185,
    1186,  1187,  534,   535,   536,   1188,  0,     0,     0,     0,     0,
    0,     1189,  1190,  0,     0,     0,     0,     0,     0,     0,     1192,
    771,   1122,  593,   1123,  1124,  1125,  646,   1126,  0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     1127,  0,
    0,     232,   233,   0,     234,   235,   772,   236,   237,   238,   239,
    1128,  773,   1129,  1130,  0,     243,   244,   245,   246,   247,   1131,
    1132,  248,   249,   1133,  1134,  252,   0,     253,   254,   255,   256,
    1135,  0,     1136,  0,     258,   259,   260,   261,   775,   262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     776,   271,
    272,   273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,   275,
    276,   277,   278,   279,   1144,  1145,  282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   985,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   1146,  308,   309,   310,   1147,
    1148,  312,   0,     313,   314,   1149,  316,   0,     317,   0,     318,
    778,   2529,  779,   319,   320,   321,   0,     322,   1150,  0,     1151,
    325,   0,     326,   327,   328,   329,   330,   780,   331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   781,
    342,   343,   344,   345,   346,   1152,  1153,  0,     1154,  0,     350,
    782,   783,   351,   784,   352,   353,   354,   355,   356,   0,     0,
    357,   1155,  785,   359,   786,   0,     360,   361,   362,   1156,  1157,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   1158,  787,   1159,  380,   381,   382,   1160,
    383,   384,   788,   385,   1161,  1162,  387,   1163,  389,   390,   391,
    0,     392,   0,     0,     1164,  394,   395,   0,     0,     396,   397,
    789,   398,   790,   1165,  400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   1166,  410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   1167,  424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   791,   441,   442,   443,   1168,  445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   1169,  458,   459,   460,   461,   462,   792,   463,   464,
    1170,  466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   1171,  0,     479,   480,   0,     481,   793,   482,
    483,   484,   485,   486,   0,     1172,  1173,  0,     0,     489,   490,
    1174,  492,   1175,  1176,  494,   495,   496,   497,   498,   499,   500,
    0,     1177,  501,   502,   503,   504,   505,   1178,  0,     506,   507,
    508,   509,   510,   511,   1179,  0,     513,   794,   514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,
    535,   536,   1188,  0,     0,     0,     0,     0,     0,     1189,  1190,
    0,     0,     0,     0,     0,     0,     0,     1192,  771,   1122,  593,
    1123,  1124,  1125,  646,   1126,  0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     1127,  0,     0,     232,   233,
    0,     234,   235,   772,   236,   237,   238,   239,   1128,  773,   1129,
    1130,  0,     243,   244,   245,   246,   247,   1131,  1132,  248,   249,
    1133,  1134,  252,   0,     253,   254,   255,   256,   1135,  0,     1136,
    0,     258,   259,   260,   261,   775,   262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     776,   271,   272,   273,   1137,
    1138,  1139,  1140,  1141,  1142,  1143,  274,   275,   276,   277,   278,
    279,   1144,  1145,  282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   985,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   1146,  308,   309,   310,   1147,  1148,  312,   0,
    313,   314,   1149,  316,   0,     317,   0,     318,   778,   0,     779,
    319,   320,   321,   0,     322,   1150,  0,     1151,  325,   0,     326,
    327,   328,   329,   330,   780,   331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   781,   342,   343,   344,
    345,   346,   1152,  1153,  0,     1154,  0,     350,   782,   783,   351,
    784,   352,   353,   354,   355,   356,   0,     0,     357,   1155,  785,
    359,   786,   0,     360,   361,   362,   1156,  1157,  363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   1158,  787,   1159,  380,   381,   382,   1160,  383,   384,   788,
    385,   1161,  1162,  387,   1163,  389,   390,   391,   0,     392,   0,
    0,     1164,  394,   395,   0,     0,     396,   397,   789,   398,   790,
    1165,  400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    1166,  410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   1167,  424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   791,   441,   442,   443,   1168,  445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   1169,
    458,   459,   460,   461,   462,   792,   463,   464,   1170,  466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    1171,  0,     479,   480,   0,     481,   793,   482,   483,   484,   485,
    486,   0,     1172,  1173,  0,     0,     489,   490,   1174,  492,   1175,
    1176,  494,   495,   496,   497,   498,   499,   500,   0,     1177,  501,
    502,   503,   504,   505,   1178,  0,     506,   507,   508,   509,   510,
    511,   1179,  3809,  513,   794,   514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   1180,
    1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,   535,   536,   1188,
    0,     0,     0,     0,     0,     0,     1189,  1190,  0,     0,     0,
    0,     0,     0,     0,     1192,  771,   1122,  593,   1123,  1124,  1125,
    646,   1126,  0,     0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     1127,  0,     0,     232,   233,   0,     234,   235,
    772,   236,   237,   238,   239,   1128,  773,   1129,  1130,  0,     243,
    244,   245,   246,   247,   1131,  1132,  248,   249,   1133,  1134,  252,
    0,     253,   254,   255,   256,   1135,  0,     1136,  0,     258,   259,
    260,   261,   775,   262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     776,   271,   272,   273,   1137,  1138,  1139,  1140,
    1141,  1142,  1143,  274,   275,   276,   277,   278,   279,   1144,  1145,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   985,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    1146,  308,   309,   310,   1147,  1148,  312,   0,     313,   314,   1149,
    316,   0,     317,   0,     318,   778,   0,     779,   319,   320,   321,
    0,     322,   1150,  0,     1151,  325,   0,     326,   327,   328,   329,
    330,   780,   331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   781,   342,   343,   344,   345,   346,   1152,
    1153,  0,     1154,  0,     350,   782,   783,   351,   784,   352,   353,
    354,   355,   356,   0,     0,     357,   1155,  785,   359,   786,   0,
    360,   361,   362,   1156,  1157,  363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   1158,  787,
    1159,  380,   381,   382,   1160,  383,   384,   788,   385,   1161,  1162,
    387,   1163,  389,   390,   391,   0,     392,   0,     0,     1164,  394,
    395,   0,     0,     396,   397,   789,   398,   790,   1165,  400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   1166,  410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   1167,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   791,
    441,   442,   443,   1168,  445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   1169,  458,   459,   460,
    461,   462,   792,   463,   464,   1170,  466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   1171,  0,     479,
    480,   0,     481,   793,   482,   483,   484,   485,   486,   0,     1172,
    1173,  0,     0,     489,   490,   1174,  492,   1175,  1176,  494,   495,
    496,   497,   498,   499,   500,   0,     1177,  501,   502,   503,   504,
    505,   1178,  0,     506,   507,   508,   509,   510,   511,   1179,  0,
    513,   794,   514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   1180,  1181,  1182,  1183,
    1184,  1185,  1186,  1187,  534,   535,   536,   1188,  0,     0,     0,
    0,     0,     0,     1189,  1190,  0,     0,     0,     0,     0,     0,
    0,     1192,  771,   1122,  593,   1123,  1124,  1125,  646,   1126,  0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    1127,  0,     0,     232,   233,   0,     234,   235,   772,   236,   237,
    238,   239,   1128,  773,   1129,  1130,  0,     243,   244,   245,   246,
    247,   1131,  1132,  248,   249,   1133,  1134,  252,   0,     253,   254,
    255,   256,   1135,  0,     1136,  0,     258,   259,   260,   261,   775,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    776,   271,   272,   3822,  1137,  1138,  1139,  1140,  1141,  1142,  1143,
    274,   275,   276,   277,   278,   279,   1144,  1145,  282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   985,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   1146,  308,   309,
    310,   1147,  1148,  312,   0,     313,   314,   1149,  316,   0,     317,
    0,     318,   778,   0,     779,   319,   320,   321,   0,     322,   1150,
    0,     1151,  325,   0,     326,   327,   328,   329,   330,   780,   331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   781,   342,   343,   344,   345,   346,   1152,  1153,  0,     1154,
    0,     350,   782,   783,   351,   784,   352,   353,   354,   355,   356,
    0,     0,     357,   1155,  785,   359,   786,   0,     360,   361,   362,
    1156,  1157,  363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   1158,  787,   1159,  380,   381,
    382,   1160,  383,   384,   788,   385,   1161,  1162,  387,   1163,  389,
    390,   391,   0,     392,   0,     0,     1164,  394,   395,   0,     0,
    396,   397,   789,   398,   790,   1165,  400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   1166,  410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   1167,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   791,   441,   442,   443,
    1168,  445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   1169,  458,   459,   460,   461,   462,   792,
    463,   464,   1170,  466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   1171,  0,     479,   480,   0,     481,
    793,   482,   483,   484,   485,   486,   0,     1172,  1173,  0,     0,
    489,   490,   1174,  492,   1175,  1176,  494,   495,   496,   497,   498,
    499,   500,   0,     1177,  501,   502,   503,   504,   505,   1178,  0,
    506,   507,   508,   509,   510,   511,   1179,  0,     513,   794,   514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,
    1187,  534,   535,   536,   1188,  0,     0,     0,     0,     0,     0,
    1189,  1190,  0,     0,     0,     0,     0,     0,     0,     1192,  771,
    1122,  593,   1123,  1124,  1125,  646,   1126,  0,     0,     0,     0,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     0,     0,     1127,  0,     0,
    232,   233,   0,     234,   235,   772,   236,   237,   238,   239,   1128,
    773,   1129,  1130,  0,     243,   244,   245,   246,   247,   1131,  1132,
    248,   249,   1133,  1134,  252,   0,     253,   254,   255,   256,   1135,
    0,     1136,  0,     258,   259,   260,   261,   775,   262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     776,   271,   272,
    273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,   275,   276,
    277,   278,   279,   1144,  1145,  282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    985,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   1146,  308,   309,   310,   1147,  1148,
    312,   0,     313,   314,   1149,  316,   0,     317,   0,     318,   778,
    0,     779,   319,   320,   321,   0,     322,   1150,  0,     1151,  325,
    0,     326,   327,   328,   329,   330,   780,   331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   781,   342,
    343,   344,   345,   346,   1152,  1153,  0,     1154,  0,     350,   782,
    783,   351,   784,   352,   353,   354,   355,   356,   0,     0,     357,
    1155,  785,   359,   786,   0,     360,   361,   362,   1156,  1157,  363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   1158,  787,   1159,  380,   381,   382,   1160,  383,
    384,   788,   385,   1161,  1162,  387,   1163,  389,   390,   391,   0,
    392,   0,     0,     1164,  394,   395,   0,     0,     396,   397,   789,
    398,   790,   1165,  400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   1166,  410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1167,  424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   791,   441,   442,   443,   1168,  445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   1169,  458,   459,   460,   461,   462,   792,   463,   464,   1170,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   1171,  0,     479,   480,   0,     481,   793,   482,   483,
    484,   485,   486,   0,     1172,  1173,  0,     0,     489,   490,   1174,
    492,   1175,  1176,  494,   495,   496,   497,   498,   499,   500,   0,
    1177,  501,   502,   503,   504,   505,   1178,  0,     506,   507,   508,
    509,   510,   511,   1179,  0,     513,   794,   514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    4118,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,   535,
    536,   1188,  0,     0,     0,     0,     0,     0,     1189,  1190,  0,
    0,     0,     0,     0,     0,     0,     1192,  771,   1122,  593,   1123,
    1124,  1125,  646,   1126,  0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     1127,  0,     0,     232,   233,   0,
    234,   235,   772,   236,   237,   238,   239,   1128,  773,   1129,  1130,
    0,     243,   244,   245,   246,   247,   1131,  1132,  248,   249,   1133,
    1134,  252,   0,     253,   254,   255,   256,   1135,  0,     1136,  0,
    258,   259,   260,   261,   775,   262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     776,   271,   272,   273,   1137,  1138,
    1139,  1140,  1141,  1142,  1143,  274,   275,   276,   277,   278,   279,
    1144,  1145,  282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   985,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   1146,  308,   309,   310,   1147,  1148,  312,   0,     313,
    314,   1149,  316,   0,     317,   0,     318,   778,   0,     779,   319,
    320,   321,   0,     322,   1150,  0,     1151,  325,   0,     326,   327,
    328,   329,   330,   780,   331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   781,   342,   343,   344,   345,
    346,   1152,  1153,  0,     1154,  0,     350,   782,   783,   351,   784,
    352,   353,   354,   355,   356,   0,     0,     357,   1155,  785,   359,
    786,   0,     360,   361,   362,   1156,  1157,  363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    1158,  787,   1159,  380,   4127,  382,   1160,  383,   384,   788,   385,
    1161,  1162,  387,   1163,  389,   390,   391,   0,     392,   0,     0,
    1164,  394,   395,   0,     0,     396,   397,   789,   398,   790,   1165,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   1166,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   1167,  424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   791,   441,   442,   443,   1168,  445,   446,   447,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   1169,  458,
    459,   460,   461,   462,   792,   463,   464,   1170,  466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   1171,
    0,     479,   480,   0,     481,   793,   482,   483,   484,   485,   486,
    0,     1172,  1173,  0,     0,     489,   490,   1174,  492,   1175,  1176,
    494,   495,   496,   497,   498,   499,   500,   0,     1177,  501,   502,
    503,   504,   505,   1178,  0,     506,   507,   508,   509,   510,   511,
    1179,  0,     513,   794,   514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   1180,  1181,
    1182,  1183,  1184,  1185,  1186,  1187,  534,   535,   536,   1188,  0,
    0,     0,     0,     0,     0,     1189,  1190,  0,     0,     0,     0,
    0,     0,     0,     1192,  771,   1122,  593,   1123,  1124,  1125,  646,
    1126,  0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     1127,  0,     0,     232,   233,   0,     234,   235,   772,
    236,   237,   238,   239,   1128,  773,   1129,  1130,  0,     243,   244,
    245,   246,   247,   1131,  1132,  248,   249,   1133,  1134,  252,   0,
    253,   254,   255,   256,   1135,  0,     1136,  0,     258,   259,   260,
    261,   775,   262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     776,   271,   4423,  273,   1137,  1138,  1139,  1140,  1141,
    1142,  1143,  274,   275,   276,   277,   278,   279,   1144,  1145,  282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   985,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   1146,
    308,   309,   310,   1147,  1148,  312,   0,     313,   314,   1149,  316,
    0,     317,   0,     318,   778,   0,     779,   319,   320,   321,   0,
    322,   1150,  0,     4424,  325,   0,     326,   327,   328,   329,   330,
    780,   331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   781,   342,   343,   344,   345,   346,   1152,  1153,
    0,     1154,  0,     350,   782,   783,   351,   784,   352,   353,   354,
    355,   356,   0,     0,     357,   1155,  785,   359,   786,   0,     360,
    361,   362,   1156,  1157,  363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   1158,  787,   1159,
    380,   381,   382,   1160,  383,   384,   788,   385,   1161,  1162,  387,
    1163,  389,   390,   391,   0,     392,   0,     0,     1164,  394,   395,
    0,     0,     396,   397,   789,   398,   790,   1165,  400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   1166,  410,   411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    1167,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   791,   441,
    442,   4425,  1168,  445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   1169,  458,   459,   460,   461,
    462,   792,   463,   464,   1170,  466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   1171,  0,     479,   480,
    0,     481,   793,   482,   483,   484,   485,   486,   0,     1172,  1173,
    0,     0,     489,   490,   1174,  492,   1175,  1176,  494,   495,   496,
    497,   498,   499,   500,   0,     1177,  501,   502,   503,   504,   505,
    1178,  0,     506,   507,   508,   509,   510,   511,   1179,  0,     513,
    794,   514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   525,   1180,  1181,  1182,  1183,  1184,
    1185,  1186,  1187,  534,   535,   536,   1188,  0,     0,     0,     0,
    0,     0,     1189,  1190,  0,     0,     0,     0,     0,     0,     0,
    4426,  771,   1122,  593,   1123,  1124,  1125,  646,   1126,  0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     1127,
    0,     0,     232,   233,   0,     234,   235,   772,   236,   237,   238,
    4788,  1128,  773,   1129,  1130,  0,     243,   244,   245,   246,   247,
    1131,  1132,  248,   249,   1133,  1134,  252,   0,     253,   254,   255,
    256,   1135,  0,     1136,  0,     258,   259,   260,   261,   775,   262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     776,
    271,   272,   4789,  1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,
    275,   276,   277,   278,   279,   1144,  1145,  282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   985,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   1146,  308,   309,   310,
    1147,  1148,  312,   0,     313,   314,   1149,  316,   0,     317,   0,
    318,   778,   0,     779,   319,   320,   321,   0,     322,   1150,  0,
    1151,  325,   0,     326,   327,   328,   329,   330,   780,   331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    781,   342,   343,   344,   345,   346,   1152,  1153,  0,     1154,  0,
    350,   782,   783,   351,   784,   352,   353,   354,   355,   356,   0,
    0,     357,   1155,  785,   359,   786,   0,     360,   361,   362,   1156,
    1157,  363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   1158,  787,   1159,  380,   381,   382,
    1160,  383,   384,   788,   385,   1161,  1162,  387,   1163,  389,   390,
    391,   0,     392,   0,     0,     1164,  394,   395,   0,     0,     396,
    397,   789,   398,   790,   1165,  400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   1166,  410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   1167,  424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   791,   441,   442,   443,   1168,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   1169,  458,   459,   460,   461,   462,   792,   463,
    464,   1170,  466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   1171,  0,     479,   480,   0,     481,   793,
    482,   483,   484,   485,   486,   0,     1172,  1173,  0,     0,     489,
    490,   1174,  492,   1175,  1176,  494,   495,   496,   497,   4790,  499,
    500,   0,     1177,  501,   502,   503,   504,   505,   1178,  0,     506,
    507,   508,   509,   510,   511,   1179,  0,     513,   794,   514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,
    534,   535,   536,   1188,  0,     0,     0,     0,     0,     0,     1189,
    1190,  0,     0,     0,     0,     0,     0,     0,     1192,  771,   1122,
    593,   1123,  1124,  1125,  646,   1126,  0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     1127,  0,     0,     232,
    233,   0,     234,   235,   772,   236,   237,   238,   239,   1128,  773,
    1129,  1130,  0,     243,   244,   245,   246,   247,   1131,  1132,  248,
    249,   1133,  1134,  252,   0,     253,   254,   255,   256,   1135,  0,
    1136,  0,     258,   259,   260,   261,   775,   262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     776,   271,   272,   4789,
    1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,   275,   276,   277,
    278,   279,   1144,  1145,  282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   985,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   1146,  308,   309,   310,   1147,  1148,  312,
    0,     313,   314,   1149,  316,   0,     317,   0,     318,   778,   0,
    779,   319,   320,   321,   0,     322,   1150,  0,     1151,  325,   0,
    326,   327,   328,   329,   330,   780,   331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   781,   342,   343,
    344,   345,   346,   1152,  1153,  0,     1154,  0,     350,   782,   783,
    351,   784,   352,   353,   354,   355,   356,   0,     0,     357,   1155,
    785,   359,   786,   0,     360,   361,   362,   1156,  1157,  363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   1158,  787,   1159,  380,   381,   382,   1160,  383,   384,
    788,   385,   1161,  1162,  387,   1163,  389,   390,   391,   0,     392,
    0,     0,     1164,  394,   395,   0,     0,     396,   397,   789,   398,
    790,   1165,  400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   1166,  410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   1167,  424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   791,   441,   442,   443,   1168,  445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    1169,  458,   459,   460,   461,   462,   792,   463,   464,   1170,  466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   1171,  0,     479,   480,   0,     481,   793,   482,   483,   484,
    485,   486,   0,     1172,  1173,  0,     0,     489,   490,   1174,  492,
    1175,  1176,  494,   495,   496,   497,   4790,  499,   500,   0,     1177,
    501,   502,   503,   504,   505,   1178,  0,     506,   507,   508,   509,
    510,   511,   1179,  0,     513,   794,   514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,   535,   536,
    1188,  0,     0,     0,     0,     0,     0,     1189,  1190,  0,     0,
    0,     0,     0,     0,     0,     1192,  771,   1122,  593,   1123,  1124,
    1125,  646,   1126,  0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     1127,  0,     0,     232,   233,   0,     234,
    235,   772,   236,   237,   238,   239,   1128,  773,   1129,  1130,  0,
    243,   244,   245,   246,   247,   1131,  1132,  248,   249,   1133,  1134,
    252,   0,     253,   254,   255,   256,   1135,  0,     1136,  0,     258,
    259,   260,   261,   775,   262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     776,   271,   272,   273,   1137,  1138,  1139,
    1140,  1141,  1142,  1143,  274,   275,   276,   277,   278,   279,   1144,
    1145,  282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   985,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   1146,  308,   309,   310,   1147,  1148,  312,   0,     313,   314,
    1149,  316,   0,     317,   0,     318,   778,   0,     779,   319,   320,
    321,   0,     322,   1150,  0,     1151,  325,   0,     326,   327,   328,
    329,   330,   780,   331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   781,   342,   343,   344,   345,   346,
    1152,  1153,  0,     1154,  0,     350,   782,   783,   351,   784,   352,
    353,   354,   355,   356,   0,     0,     357,   1155,  785,   359,   786,
    0,     360,   361,   362,   1156,  1157,  363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   1158,
    787,   1159,  380,   381,   382,   0,     383,   384,   788,   385,   1161,
    1162,  387,   1163,  389,   390,   391,   0,     392,   0,     0,     1164,
    394,   395,   0,     0,     396,   397,   789,   398,   790,   1165,  400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   1166,  410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   1167,  424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    791,   441,   442,   443,   2514,  445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   1169,  458,   459,
    460,   461,   462,   792,   463,   464,   1170,  466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   1171,  0,
    479,   480,   0,     481,   793,   482,   483,   484,   485,   486,   0,
    1172,  1173,  0,     0,     489,   490,   1174,  492,   1175,  1176,  494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   1178,  0,     506,   507,   508,   509,   510,   511,   1179,
    0,     513,   794,   514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   1180,  1181,  1182,
    1183,  1184,  1185,  1186,  1187,  534,   535,   536,   0,     0,     0,
    0,     0,     0,     0,     2515,  2516,  0,     0,     0,     0,     0,
    0,     0,     2517,  771,   1122,  593,   1123,  1124,  1125,  646,   1126,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     1127,  0,     0,     232,   233,   0,     234,   235,   772,   236,
    237,   238,   -2391, 1128,  773,   1129,  1130,  0,     243,   244,   245,
    246,   247,   1131,  1132,  248,   249,   1133,  1134,  252,   0,     253,
    254,   255,   256,   1135,  0,     1136,  0,     258,   259,   260,   261,
    775,   262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     776,   271,   272,   4789,  1137,  1138,  1139,  1140,  1141,  1142,
    1143,  274,   275,   276,   277,   278,   279,   1144,  1145,  282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   985,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   1146,  308,
    309,   310,   1147,  1148,  312,   0,     313,   314,   1149,  316,   0,
    317,   0,     318,   778,   0,     779,   319,   320,   321,   0,     322,
    1150,  0,     1151,  325,   0,     326,   327,   328,   329,   330,   -2391,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   781,   342,   343,   344,   345,   346,   1152,  1153,  0,
    1154,  0,     350,   0,     0,     351,   784,   352,   353,   354,   355,
    356,   0,     0,     357,   1155,  785,   359,   -2391, 0,     360,   361,
    362,   1156,  1157,  363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   1158,  787,   1159,  380,
    381,   382,   1160,  383,   384,   0,     385,   1161,  1162,  387,   1163,
    389,   390,   391,   0,     392,   0,     0,     1164,  394,   395,   0,
    0,     396,   397,   789,   398,   790,   1165,  400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   1166,  410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1167,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   791,   441,   442,
    443,   1168,  445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   1169,  458,   459,   460,   461,   462,
    -2391, 463,   464,   1170,  466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   1171,  0,     479,   480,   0,
    481,   793,   482,   483,   484,   485,   486,   0,     1172,  1173,  0,
    0,     489,   490,   1174,  492,   1175,  1176,  494,   495,   496,   497,
    4790,  499,   500,   0,     1177,  501,   502,   503,   504,   505,   1178,
    0,     506,   507,   508,   509,   510,   511,   1179,  0,     513,   794,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   1180,  1181,  1182,  1183,  1184,  1185,
    1186,  1187,  534,   535,   536,   -2391, 0,     0,     0,     0,     0,
    0,     1189,  1190,  0,     0,     0,     0,     0,     0,     0,     1192,
    771,   1122,  593,   1123,  1124,  1125,  646,   1126,  0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     1127,  0,
    0,     232,   233,   0,     234,   235,   772,   236,   237,   238,   239,
    1128,  773,   1129,  1130,  0,     243,   244,   245,   246,   247,   1131,
    1132,  248,   249,   1133,  1134,  252,   0,     253,   254,   255,   256,
    1135,  0,     1136,  0,     258,   259,   260,   261,   775,   262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     776,   271,
    272,   273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,   275,
    276,   277,   278,   279,   1144,  1145,  282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   985,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   1146,  308,   309,   310,   1147,
    1148,  312,   0,     313,   314,   1149,  316,   0,     317,   0,     318,
    778,   0,     779,   319,   320,   321,   0,     322,   1150,  0,     1151,
    325,   0,     326,   327,   328,   329,   330,   780,   331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   781,
    342,   343,   344,   345,   346,   1152,  1153,  0,     1154,  0,     350,
    0,     783,   351,   784,   352,   353,   354,   355,   356,   0,     0,
    357,   1155,  785,   359,   786,   0,     360,   361,   362,   1156,  1157,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   1158,  787,   1159,  380,   381,   382,   0,
    383,   384,   788,   385,   1161,  1162,  387,   1163,  389,   390,   391,
    0,     392,   0,     0,     1164,  394,   395,   0,     0,     396,   397,
    789,   398,   790,   1165,  400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   1166,  410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   1167,  424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   791,   441,   442,   443,   2514,  445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   1169,  458,   459,   460,   461,   462,   792,   463,   464,
    1170,  466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   1171,  0,     479,   480,   0,     481,   793,   482,
    483,   484,   485,   486,   0,     1172,  1173,  0,     0,     489,   490,
    1174,  492,   1175,  1176,  494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   1178,  0,     506,   507,
    508,   509,   510,   511,   1179,  0,     513,   794,   514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,
    535,   536,   0,     0,     0,     0,     0,     0,     0,     2515,  2516,
    0,     0,     771,   1122,  593,   1123,  1124,  2517,  646,   1126,  0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    1127,  0,     0,     232,   233,   0,     234,   235,   772,   236,   237,
    238,   239,   1128,  773,   1129,  1130,  0,     243,   244,   245,   246,
    247,   1131,  1132,  248,   249,   1133,  1134,  252,   0,     253,   254,
    255,   256,   1135,  0,     1136,  0,     258,   259,   260,   261,   775,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    776,   271,   272,   273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,
    274,   275,   276,   277,   278,   279,   1144,  1145,  282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   985,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   1146,  308,   309,
    310,   1147,  1148,  312,   0,     313,   314,   1149,  316,   0,     317,
    0,     318,   778,   0,     779,   319,   320,   321,   0,     322,   1150,
    0,     1151,  325,   0,     326,   327,   328,   329,   330,   780,   331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   781,   342,   343,   344,   345,   346,   1152,  1153,  0,     1154,
    0,     350,   782,   783,   351,   784,   352,   353,   354,   355,   356,
    0,     0,     357,   1155,  785,   359,   786,   0,     360,   361,   362,
    1156,  1157,  363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   1158,  787,   1159,  380,   381,
    382,   0,     383,   384,   788,   385,   1161,  1162,  387,   1163,  389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   789,   398,   790,   1165,  400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   1166,  410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   1167,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   791,   441,   442,   443,
    2514,  445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   1169,  458,   459,   460,   461,   462,   792,
    463,   464,   1170,  466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   1171,  0,     479,   480,   0,     481,
    793,   482,   483,   484,   485,   486,   0,     1172,  1173,  0,     0,
    489,   490,   1174,  492,   1175,  1176,  494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   1178,  0,
    506,   507,   508,   509,   510,   511,   1179,  0,     513,   794,   514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,
    1187,  534,   535,   536,   0,     0,     771,   1122,  593,   1123,  1124,
    0,     646,   1126,  0,     0,     0,     0,     0,     0,     2517,  220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     1127,  0,     0,     232,   233,   0,     234,
    235,   772,   236,   237,   238,   239,   1128,  773,   1129,  1130,  0,
    3724,  244,   245,   246,   247,   1131,  1132,  248,   249,   1133,  1134,
    252,   0,     253,   254,   255,   256,   1135,  0,     1136,  0,     258,
    259,   260,   261,   775,   262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     776,   271,   272,   273,   1137,  1138,  1139,
    1140,  1141,  1142,  1143,  274,   275,   276,   277,   278,   279,   1144,
    1145,  282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   985,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   1146,  308,   309,   310,   1147,  1148,  312,   0,     313,   314,
    1149,  316,   0,     317,   0,     318,   778,   0,     779,   319,   320,
    321,   0,     322,   1150,  0,     1151,  325,   0,     326,   327,   328,
    329,   330,   780,   331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   781,   342,   343,   344,   345,   346,
    1152,  1153,  0,     1154,  0,     350,   782,   783,   351,   784,   352,
    353,   354,   355,   356,   0,     0,     357,   1155,  785,   359,   786,
    0,     360,   361,   362,   1156,  1157,  363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   1158,
    787,   1159,  380,   381,   382,   0,     383,   384,   788,   385,   1161,
    1162,  387,   1163,  389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   789,   398,   790,   1165,  400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   1166,  410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   1167,  424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    791,   441,   442,   443,   2514,  445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   1169,  458,   459,
    460,   461,   462,   792,   463,   464,   1170,  466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   1171,  0,
    479,   480,   0,     481,   793,   482,   483,   484,   485,   486,   0,
    1172,  1173,  0,     0,     489,   490,   1174,  492,   1175,  1176,  494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   1178,  0,     506,   507,   508,   509,   510,   511,   1179,
    0,     513,   794,   514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   1180,  1181,  1182,
    1183,  1184,  1185,  1186,  1187,  534,   535,   536,   0,     0,     771,
    1122,  593,   1123,  1124,  1125,  646,   1126,  0,     0,     0,     0,
    0,     0,     2517,  220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     0,     0,     1127,  0,     0,
    232,   233,   0,     234,   235,   772,   236,   237,   238,   0,     1128,
    773,   1129,  1130,  0,     243,   244,   245,   246,   247,   1131,  1132,
    248,   249,   1133,  1134,  252,   0,     253,   254,   255,   256,   1135,
    0,     1136,  0,     258,   259,   260,   261,   775,   262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     776,   271,   272,
    273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,   275,   276,
    277,   278,   279,   1144,  1145,  282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    985,   295,   296,   0,     297,   298,   299,   0,     300,   0,     302,
    0,     303,   304,   305,   306,   1146,  308,   309,   310,   1147,  1148,
    312,   0,     313,   314,   1149,  316,   0,     317,   0,     318,   778,
    0,     779,   319,   320,   321,   0,     322,   1150,  0,     1151,  325,
    0,     326,   327,   328,   329,   330,   0,     331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   781,   342,
    343,   344,   345,   346,   1152,  1153,  0,     1154,  0,     350,   0,
    0,     351,   784,   352,   353,   354,   355,   356,   0,     0,     357,
    1155,  785,   359,   0,     0,     360,   361,   362,   1156,  1157,  363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   1158,  787,   1159,  380,   381,   382,   1160,  383,
    384,   0,     385,   1161,  1162,  387,   1163,  389,   390,   391,   0,
    392,   0,     0,     1164,  394,   395,   0,     0,     396,   397,   789,
    398,   790,   1165,  400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   1166,  410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1167,  424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   791,   441,   442,   443,   1168,  445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   1169,  458,   459,   460,   461,   462,   0,     463,   464,   1170,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   1171,  0,     479,   480,   0,     481,   793,   482,   483,
    484,   485,   486,   0,     1172,  1173,  0,     0,     489,   490,   1174,
    492,   1175,  1176,  494,   495,   496,   497,   498,   499,   500,   0,
    1177,  501,   502,   503,   504,   505,   1178,  0,     506,   507,   508,
    509,   510,   511,   1179,  0,     513,   794,   514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,   535,
    536,   0,     0,     771,   0,     0,     0,     0,     1189,  1190,  0,
    0,     0,     0,     0,     0,     0,     1192,  220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   772,   236,
    237,   238,   239,   240,   773,   241,   242,   0,     243,   244,   245,
    246,   247,   0,     1132,  248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   1135,  0,     1136,  0,     258,   259,   260,   261,
    775,   262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     776,   271,   272,   273,   1137,  1138,  1139,  1140,  1141,  1142,
    1143,  274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   1147,  0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   778,   0,     779,   319,   320,   321,   0,     322,
    1150,  0,     324,   325,   0,     326,   327,   328,   329,   330,   780,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   781,   342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   782,   783,   351,   784,   352,   353,   354,   355,
    356,   3259,  0,     357,   1155,  785,   359,   786,   0,     360,   361,
    362,   1156,  1157,  363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   787,   379,   380,
    381,   382,   0,     383,   384,   788,   385,   0,     1162,  387,   388,
    389,   390,   391,   0,     392,   0,     735,   393,   394,   395,   0,
    0,     396,   397,   789,   398,   790,   1165,  400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   1166,  410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   791,   441,   442,
    443,   444,   3260,  446,   447,   448,   449,   450,   451,   452,   39,
    453,   454,   455,   456,   457,   1169,  458,   459,   460,   461,   462,
    792,   463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   1171,  0,     479,   480,   43,
    481,   793,   482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   1174,  492,   1175,  0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   1178,
    0,     506,   507,   508,   509,   510,   1058,  512,   0,     513,   794,
    514,   515,   516,   517,   0,     0,     518,   0,     48,    519,   520,
    521,   522,   523,   524,   525,   1180,  1181,  1182,  1183,  1184,  1185,
    1186,  1187,  534,   535,   536,   0,     0,     49,    771,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3261,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   772,   236,   237,   238,   239,   240,   773,   241,
    242,   0,     243,   244,   245,   246,   247,   0,     1132,  248,   249,
    250,   251,   252,   0,     253,   254,   255,   256,   1135,  0,     1136,
    0,     258,   259,   260,   261,   775,   262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     776,   271,   272,   273,   1137,
    1138,  1139,  1140,  1141,  1142,  1143,  274,   275,   276,   277,   278,
    279,   280,   281,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   307,   308,   309,   310,   1147,  0,     312,   0,
    313,   314,   315,   316,   0,     317,   0,     318,   778,   0,     779,
    319,   320,   321,   0,     322,   1150,  0,     324,   325,   0,     326,
    327,   328,   329,   330,   780,   331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   781,   342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   782,   783,   351,
    784,   352,   353,   354,   355,   356,   3259,  0,     357,   1155,  785,
    359,   786,   0,     360,   361,   362,   1156,  1157,  363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   787,   379,   380,   381,   382,   0,     383,   384,   788,
    385,   0,     1162,  387,   388,   389,   390,   391,   0,     392,   0,
    735,   393,   394,   395,   0,     0,     396,   397,   789,   398,   790,
    1165,  400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    1166,  410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   791,   441,   442,   443,   444,   3260,  446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   1169,
    458,   459,   460,   461,   462,   792,   463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    1171,  0,     479,   480,   0,     481,   793,   482,   483,   484,   485,
    486,   0,     487,   488,   0,     0,     489,   490,   1174,  492,   1175,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   1178,  0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   794,   514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   1180,
    1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,   535,   536,   0,
    0,     771,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     3261,  220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   772,   236,   237,   238,
    239,   240,   773,   241,   242,   0,     243,   244,   245,   246,   247,
    0,     1132,  248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   1135,  0,     1136,  0,     258,   259,   260,   261,   775,   262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     776,
    271,   272,   273,   1137,  1138,  1139,  1140,  1141,  1142,  1143,  274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    1147,  0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   778,   0,     779,   319,   320,   321,   0,     322,   1150,  0,
    324,   325,   0,     326,   327,   328,   329,   330,   780,   331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    781,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   782,   783,   351,   784,   352,   353,   354,   355,   356,   0,
    0,     357,   1155,  785,   359,   786,   0,     360,   361,   362,   1156,
    1157,  363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   787,   379,   380,   381,   382,
    0,     383,   384,   788,   385,   0,     1162,  387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   789,   398,   790,   1165,  400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   1166,  410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   791,   441,   442,   443,   444,
    3260,  446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   1169,  458,   459,   460,   461,   462,   792,   463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   1171,  0,     479,   480,   0,     481,   793,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   1174,  492,   1175,  0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   1178,  0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   794,   514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,
    534,   535,   536,   0,     0,     771,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     50,    220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    772,   236,   237,   238,   239,   240,   773,   241,   242,   0,     243,
    244,   245,   246,   247,   0,     1132,  248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   1135,  0,     1136,  0,     258,   259,
    260,   261,   775,   262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     776,   271,   272,   273,   1137,  1138,  1139,  1140,
    1141,  1142,  1143,  274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   1147,  0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   778,   0,     779,   319,   320,   321,
    0,     322,   1150,  0,     324,   325,   0,     326,   327,   328,   329,
    330,   780,   331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   781,   342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   782,   783,   351,   784,   352,   353,
    354,   355,   356,   0,     0,     357,   1155,  785,   359,   786,   0,
    360,   361,   362,   1156,  1157,  363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   787,
    379,   380,   381,   382,   0,     383,   384,   788,   385,   0,     1162,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   789,   398,   790,   1165,  400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   1166,  410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   791,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   1169,  458,   459,   460,
    461,   462,   792,   463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   1171,  0,     479,
    480,   0,     481,   793,   482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   1174,  492,   1175,  0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   1178,  0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   794,   514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   1180,  1181,  1182,  1183,
    1184,  1185,  1186,  1187,  534,   535,   536,   0,     0,     815,   1391,
    593,   0,     0,     0,     646,   0,     0,     0,     0,     0,     0,
    0,     3848,  220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   772,   236,   237,   238,   239,   240,   773,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    774,   0,     258,   259,   260,   261,   775,   262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     776,   271,   272,   273,
    0,     0,     0,     777,   0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   1660,  312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   778,   0,
    779,   319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   330,   780,   331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   781,   342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   782,   783,
    351,   784,   352,   353,   354,   355,   356,   0,     0,     357,   358,
    785,   359,   786,   0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   787,   379,   380,   381,   382,   0,     383,   384,
    788,   385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    1661,  0,     393,   394,   395,   0,     0,     396,   397,   789,   398,
    790,   399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   791,   441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   460,   461,   462,   792,   463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   793,   482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   1662,  494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   794,   514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    0,     0,     815,   0,     0,     0,     0,     658,   1392,  4287,  0,
    0,     0,     0,     0,     0,     4288,  220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   3,     4,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   772,   236,   237,
    238,   239,   240,   773,   241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   250,   251,   252,   0,     253,   254,
    255,   256,   257,   0,     774,   0,     258,   259,   260,   261,   775,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    776,   271,   272,   273,   0,     0,     0,     777,   0,     0,     0,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    0,     318,   778,   0,     779,   319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   330,   780,   331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   781,   342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   782,   783,   351,   784,   352,   353,   354,   355,   356,
    0,     0,     357,   358,   785,   359,   786,   0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   787,   379,   380,   381,
    382,   0,     383,   384,   788,   385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   789,   398,   790,   399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   791,   441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   39,    453,
    454,   455,   456,   457,   0,     458,   459,   460,   461,   462,   792,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   43,    481,
    793,   482,   483,   484,   485,   486,   0,     487,   488,   0,     0,
    489,   490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   1058,  512,   0,     513,   794,   514,
    515,   516,   517,   0,     0,     518,   0,     48,    519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   0,     0,     49,    771,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     50,    0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   772,   236,   237,   238,   239,   240,   773,   241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   250,
    251,   252,   0,     253,   254,   255,   256,   257,   0,     774,   0,
    258,   259,   260,   261,   775,   262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     776,   271,   272,   273,   0,     0,
    0,     777,   0,     0,     0,     274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   0,     312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   778,   0,     779,   319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   330,   780,   331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   781,   342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   782,   783,   351,   784,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   785,   359,
    786,   0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   787,   379,   380,   381,   382,   0,     383,   384,   788,   385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     0,     396,   397,   789,   398,   790,   399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   791,   441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   0,     458,
    459,   460,   461,   462,   792,   463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   793,   482,   483,   484,   485,   486,
    0,     487,   488,   0,     0,     489,   490,   491,   492,   493,   0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   794,   514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     0,
    219,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     4475,  220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     236,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   0,     253,   254,   255,   256,
    257,   0,     0,     0,     258,   259,   260,   261,   0,     262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   314,   315,   316,   0,     317,   0,     318,
    0,     0,     0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   330,   0,     331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   0,     379,   380,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   39,    453,   454,   455,
    456,   457,   0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   43,    481,   0,     482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   1058,  512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     48,    519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   0,     0,     49,    219,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     50,    0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    0,     236,   237,   238,   239,   240,   0,     241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     0,     0,     258,   259,
    260,   261,   0,     262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     0,     271,   272,   273,   0,     0,     0,     0,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   0,     0,     0,     319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    330,   0,     331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     0,     357,   358,   0,     359,   0,     0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   0,
    379,   380,   381,   382,   0,     383,   384,   0,     385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   0,     398,   0,     399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   0,     463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   0,     482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   0,     514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     0,     219,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1250,  220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   0,     236,   237,   238,   239,   240,   0,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    0,     0,     258,   259,   260,   261,   0,     262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     0,     271,   272,   273,
    0,     0,     0,     0,     0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   0,     0,
    0,     319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   330,   0,     331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     0,     357,   358,
    0,     359,   0,     0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   0,     379,   380,   381,   382,   0,     383,   384,
    0,     385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   397,   0,     398,
    0,     399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   460,   461,   462,   0,     463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   0,     482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   0,     514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    0,     0,     219,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     2671,  220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   0,     236,   237,
    238,   239,   240,   0,     241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   250,   251,   252,   0,     253,   254,
    255,   256,   257,   0,     0,     0,     258,   259,   260,   261,   0,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    0,     271,   272,   273,   0,     0,     0,     0,     0,     0,     0,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    0,     318,   0,     0,     0,     319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   330,   0,     331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,
    0,     0,     357,   358,   0,     359,   0,     0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   0,     379,   380,   381,
    382,   0,     383,   384,   0,     385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   0,     398,   0,     399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   0,     458,   459,   460,   461,   462,   0,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   0,     481,
    0,     482,   483,   484,   485,   486,   0,     487,   488,   0,     0,
    489,   490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   511,   512,   0,     513,   0,     514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   0,     0,     219,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     3759,  220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   0,     236,   237,   238,   239,   240,   0,     241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     0,     0,     258,
    259,   260,   261,   0,     262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     0,     271,   272,   273,   0,     0,     0,
    0,     0,     0,     0,     274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   0,     0,     0,     319,   320,
    321,   0,     322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   330,   0,     331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     0,     357,   358,   0,     359,   0,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    0,     379,   380,   381,   382,   0,     383,   384,   0,     385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   0,     398,   0,     399,   400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   0,     458,   459,
    460,   461,   462,   0,     463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   0,     482,   483,   484,   485,   486,   0,
    487,   488,   0,     0,     489,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   0,     514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   0,     0,     0,
    0,     0,     977,   1391,  593,   0,     0,     829,   646,   0,     0,
    0,     0,     4172,  830,   831,   832,   220,   221,   222,   223,   224,
    225,   226,   227,   1847,  229,   230,   231,   1848,  1849,  1850,  1851,
    1852,  1853,  1854,  232,   233,   1855,  234,   235,   772,   236,   237,
    238,   0,     978,   773,   979,   980,   1856,  243,   244,   245,   246,
    247,   1857,  1858,  248,   249,   981,   982,   252,   1859,  253,   254,
    255,   256,   0,     1860,  774,   1861,  258,   259,   260,   261,   775,
    262,   263,   264,   1862,  265,   266,   267,   268,   269,   270,   1863,
    776,   271,   272,   273,   1864,  1865,  1866,  777,   1867,  1868,  1869,
    274,   275,   276,   277,   278,   279,   983,   984,   282,   1870,  283,
    1871,  284,   285,   286,   287,   288,   1872,  289,   290,   291,   1873,
    1874,  292,   293,   985,   295,   296,   1875,  297,   298,   299,   1876,
    300,   301,   302,   1877,  303,   304,   305,   306,   0,     308,   309,
    310,   0,     1878,  312,   1879,  313,   314,   986,   316,   1880,  317,
    1881,  318,   778,   1882,  779,   319,   320,   321,   1883,  322,   0,
    1884,  0,     325,   1885,  326,   327,   328,   329,   330,   780,   331,
    332,   333,   334,   1886,  335,   336,   337,   338,   339,   340,   1887,
    341,   781,   0,     343,   344,   345,   346,   988,   989,   1888,  990,
    1889,  350,   782,   783,   351,   784,   352,   353,   354,   355,   356,
    1890,  1891,  357,   0,     785,   359,   786,   1892,  360,   361,   362,
    1893,  1894,  363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   991,   787,   992,   380,   381,
    0,     1895,  383,   384,   788,   385,   1896,  0,     387,   993,   389,
    390,   391,   1897,  392,   1898,  1899,  3510,  394,   395,   1900,  1901,
    396,   0,     789,   398,   790,   0,     400,   401,   402,   403,   404,
    405,   406,   1902,  407,   408,   0,     410,   0,     412,   413,   414,
    1903,  415,   416,   417,   418,   419,   420,   421,   422,   994,   424,
    425,   426,   427,   1904,  428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   1905,  439,   440,   791,   441,   442,   443,
    0,     445,   446,   447,   448,   449,   450,   451,   452,   1906,  453,
    454,   455,   456,   457,   1907,  458,   459,   1988,  461,   462,   792,
    463,   464,   996,   466,   1908,  467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   0,     1909,  479,   480,   1910,  481,
    793,   482,   483,   484,   485,   486,   1911,  997,   998,   1912,  1913,
    489,   490,   0,     492,   0,     1914,  494,   495,   496,   497,   498,
    499,   500,   1915,  1916,  501,   502,   503,   504,   505,   1917,  1918,
    506,   507,   508,   509,   510,   0,     999,   1919,  513,   794,   514,
    515,   516,   517,   1920,  1921,  518,   1922,  1923,  519,   520,   521,
    522,   523,   524,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     534,   535,   536,   0,     219,   0,     835,   836,   837,   829,
    3511,  3512,  840,   841,   842,   843,   830,   831,   832,   220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    0,     236,   237,   238,   239,   240,   0,     241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   833,   255,   256,   257,   0,     0,     0,     258,   259,
    260,   261,   0,     262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     0,     271,   272,   273,   0,     0,     0,     0,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     834,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   0,     0,     0,     319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    330,   0,     331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     0,     357,   358,   0,     359,   0,     0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   0,
    379,   380,   381,   382,   0,     383,   384,   0,     385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   0,     398,   0,     399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   0,     463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   0,     482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   0,     514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     219,   0,     835,
    836,   837,   829,   838,   839,   840,   841,   842,   843,   830,   831,
    832,   220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   0,     236,   237,   238,   239,   240,   0,     241,
    242,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    250,   251,   252,   0,     253,   935,   255,   256,   257,   0,     0,
    0,     258,   259,   260,   261,   0,     262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     0,     271,   272,   273,   0,
    0,     0,     0,     0,     0,     0,     274,   275,   276,   277,   278,
    279,   280,   281,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   307,   308,   309,   310,   311,   0,     936,   0,
    313,   314,   315,   316,   0,     317,   0,     318,   0,     0,     0,
    319,   320,   321,   0,     322,   323,   0,     324,   325,   0,     326,
    327,   328,   329,   330,   0,     331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,
    0,     352,   353,   354,   355,   356,   0,     0,     357,   358,   0,
    359,   0,     0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   0,     379,   380,   381,   382,   0,     383,   384,   0,
    385,   0,     386,   387,   388,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   397,   0,     398,   0,
    399,   400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    409,   410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   0,
    458,   459,   460,   461,   462,   0,     463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    478,   0,     479,   480,   0,     481,   0,     482,   483,   484,   485,
    486,   0,     487,   488,   0,     0,     489,   490,   491,   492,   493,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   0,     514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   526,
    527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    219,   0,     835,   836,   837,   829,   838,   839,   840,   841,   842,
    843,   830,   831,   832,   220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     236,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   0,     253,   1026,  255,   256,
    257,   0,     0,     0,     258,   259,   260,   261,   0,     262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     1027,  0,     313,   314,   315,   316,   0,     317,   0,     318,
    0,     0,     0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   1028,  0,     331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   0,     379,   380,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   0,     482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   0,     219,   0,     835,   836,   837,   829,   838,   839,
    840,   841,   842,   843,   830,   831,   832,   220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   0,     236,
    237,   238,   239,   240,   0,     241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    1489,  255,   256,   257,   0,     0,     0,     258,   259,   260,   261,
    0,     262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     0,     271,   272,   273,   0,     0,     0,     0,     0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     1490,  0,     313,   314,   315,   316,   0,
    317,   0,     318,   0,     0,     0,     319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   330,   0,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     0,     357,   358,   0,     359,   0,     0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   0,     379,   380,
    381,   382,   0,     383,   384,   0,     385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   0,     398,   0,     399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   0,     458,   459,   460,   461,   462,
    0,     463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   0,     482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   0,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     219,   0,     835,   836,   837,
    829,   838,   839,   840,   841,   842,   843,   830,   831,   832,   220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   0,     236,   237,   238,   239,   240,   0,     241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     0,     0,     258,
    259,   260,   261,   0,     262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     0,     271,   272,   273,   0,     0,     0,
    0,     0,     0,     0,     274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   0,     0,     0,     319,   320,
    321,   0,     322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   330,   0,     331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     0,     357,   358,   0,     359,   0,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    0,     379,   380,   381,   382,   0,     383,   384,   0,     385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   0,     398,   0,     399,   400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   0,     458,   459,
    460,   461,   462,   0,     463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   0,     482,   483,   484,   485,   486,   0,
    487,   488,   0,     0,     489,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   0,     514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   0,     219,   0,
    835,   836,   837,   829,   838,   839,   840,   841,   842,   843,   830,
    831,   832,   220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   0,     236,   237,   238,   239,   240,   0,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   2749,  255,   256,   257,   0,
    0,     0,     258,   259,   260,   261,   0,     262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     0,     271,   272,   273,
    0,     0,     0,     0,     0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     2750,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   0,     0,
    0,     319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   330,   0,     331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     0,     357,   358,
    0,     359,   0,     0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   0,     379,   380,   381,   382,   0,     383,   384,
    0,     385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   397,   0,     398,
    0,     399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   460,   461,   462,   0,     463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   0,     482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   0,     514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    0,     219,   0,     835,   836,   837,   829,   838,   839,   840,   841,
    842,   843,   830,   831,   832,   220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   0,     236,   237,   238,
    239,   240,   0,     241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     0,     0,     258,   259,   260,   261,   0,     262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     0,
    271,   272,   273,   0,     0,     0,     0,     0,     0,     0,     274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   0,     0,     0,     319,   320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   330,   0,     331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    0,     357,   358,   0,     359,   0,     0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   0,     379,   380,   381,   382,
    0,     383,   384,   0,     385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     4454,  394,   395,   0,     0,     396,
    397,   0,     398,   0,     399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   0,     458,   459,   460,   461,   462,   0,     463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   0,     481,   0,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   0,     514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   1846,  0,     0,     835,   836,   837,   0,     838,
    839,   840,   841,   842,   843,   0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   1847,  229,   230,   231,   1848,  1849,  1850,
    1851,  1852,  1853,  1854,  232,   233,   1855,  234,   235,   772,   236,
    237,   238,   239,   240,   773,   241,   242,   1856,  243,   244,   245,
    246,   247,   1857,  1858,  248,   249,   250,   251,   252,   1859,  253,
    254,   255,   256,   257,   1860,  774,   1861,  258,   259,   260,   261,
    775,   262,   263,   264,   1862,  265,   266,   267,   268,   269,   270,
    1863,  776,   271,   272,   273,   1864,  1865,  1866,  777,   1867,  1868,
    1869,  274,   275,   276,   277,   278,   279,   280,   281,   282,   1870,
    283,   1871,  284,   285,   286,   287,   288,   1872,  289,   290,   291,
    1873,  1874,  292,   293,   294,   295,   296,   1875,  297,   298,   299,
    1876,  300,   301,   302,   1877,  303,   304,   305,   306,   307,   308,
    309,   310,   311,   1878,  312,   1879,  313,   314,   315,   316,   1880,
    317,   1881,  318,   778,   1882,  779,   319,   320,   321,   1883,  322,
    323,   1884,  324,   325,   1885,  326,   327,   328,   329,   330,   780,
    331,   332,   333,   334,   1886,  335,   336,   337,   338,   339,   340,
    1887,  341,   781,   342,   343,   344,   345,   346,   347,   348,   1888,
    349,   1889,  350,   782,   783,   351,   784,   352,   353,   354,   355,
    356,   1890,  1891,  357,   358,   785,   359,   786,   1892,  360,   361,
    362,   1893,  1894,  363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   787,   379,   380,
    381,   382,   1895,  383,   384,   788,   385,   1896,  386,   387,   388,
    389,   390,   391,   1897,  392,   1898,  1899,  393,   394,   395,   1900,
    1901,  396,   397,   789,   398,   790,   399,   400,   401,   402,   403,
    404,   405,   406,   1902,  407,   408,   409,   410,   411,   412,   413,
    414,   1903,  415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   1904,  428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   1905,  439,   440,   791,   441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   1906,
    453,   454,   455,   456,   457,   1907,  458,   459,   460,   461,   462,
    792,   463,   464,   465,   466,   1908,  467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   1909,  479,   480,   1910,
    481,   793,   482,   483,   484,   485,   486,   1911,  487,   488,   1912,
    1913,  489,   490,   491,   492,   493,   1914,  494,   495,   496,   497,
    498,   499,   500,   1915,  1916,  501,   502,   503,   504,   505,   1917,
    1918,  506,   507,   508,   509,   510,   511,   512,   1919,  513,   794,
    514,   515,   516,   517,   1920,  1921,  518,   1922,  1923,  519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   219,   0,     0,     0,     0,     0,
    0,     0,     0,     1924,  0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    0,     236,   237,   238,   239,   240,   0,     241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     0,     0,     258,   259,
    260,   261,   0,     262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     0,     271,   272,   273,   0,     0,     0,     0,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   0,     0,     0,     319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    330,   0,     331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     0,     357,   358,   0,     359,   0,     0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   0,
    379,   380,   381,   382,   0,     383,   384,   0,     385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   0,     398,   0,     399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   0,     463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   0,     482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   0,     514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   977,   0,     0,     0,
    0,     0,     0,     0,     0,     740,   0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   772,   236,   237,   238,   0,     978,   773,   979,   980,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   981,
    982,   252,   0,     253,   254,   255,   256,   0,     0,     774,   0,
    258,   259,   260,   261,   775,   262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     776,   271,   272,   273,   0,     0,
    0,     777,   0,     0,     0,     274,   275,   276,   277,   278,   279,
    983,   984,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   985,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   0,     308,   309,   310,   0,     0,     312,   0,     313,
    314,   986,   316,   0,     317,   0,     318,   778,   0,     779,   319,
    320,   321,   0,     322,   0,     0,     0,     325,   0,     326,   327,
    328,   329,   330,   780,   331,   332,   333,   334,   1984,  335,   336,
    337,   338,   339,   340,   0,     341,   781,   1985,  343,   344,   345,
    346,   988,   989,   0,     990,   0,     350,   782,   783,   351,   784,
    352,   353,   354,   355,   356,   0,     0,     357,   0,     785,   359,
    786,   0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    991,   787,   992,   380,   381,   0,     0,     383,   384,   788,   385,
    0,     0,     387,   993,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     1986,  396,   1987,  789,   398,   790,   0,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   0,
    410,   0,     412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   994,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   791,   441,   442,   443,   0,     445,   446,   447,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   0,     458,
    459,   1988,  461,   462,   792,   463,   464,   996,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   0,
    0,     479,   480,   0,     481,   793,   482,   483,   484,   485,   486,
    0,     997,   998,   0,     0,     489,   490,   0,     492,   0,     0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   0,
    999,   1989,  513,   794,   514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   0,     0,     0,
    0,     0,     0,     0,     2252,  0,     534,   535,   536,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     1990,  220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   772,
    236,   237,   238,   0,     978,   773,   979,   980,   0,     243,   244,
    245,   246,   247,   0,     0,     248,   249,   981,   982,   252,   0,
    253,   254,   255,   256,   0,     0,     774,   0,     258,   259,   260,
    261,   775,   262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     776,   271,   272,   273,   0,     0,     0,     777,   0,
    0,     0,     274,   275,   276,   277,   278,   279,   983,   984,   282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   985,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    308,   309,   310,   0,     0,     312,   0,     313,   314,   986,   316,
    0,     317,   0,     318,   778,   0,     779,   319,   320,   321,   0,
    322,   0,     0,     0,     325,   0,     326,   327,   328,   329,   330,
    780,   331,   332,   333,   334,   1984,  335,   336,   337,   338,   339,
    340,   0,     341,   781,   1985,  343,   344,   345,   346,   988,   989,
    0,     990,   0,     350,   782,   783,   351,   784,   352,   353,   354,
    355,   356,   0,     0,     357,   0,     785,   359,   786,   0,     360,
    361,   362,   0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   991,   787,   992,
    380,   381,   0,     0,     383,   384,   788,   385,   0,     0,     387,
    993,   389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     1986,  396,   1987,  789,   398,   790,   0,     400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   0,     410,   0,     412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    994,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   791,   441,
    442,   443,   0,     445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   0,     458,   459,   1988,  461,
    462,   792,   463,   464,   996,   466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   0,     0,     479,   480,
    0,     481,   793,   482,   483,   484,   485,   486,   0,     997,   998,
    0,     0,     489,   490,   0,     492,   0,     0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   503,   504,   505,
    0,     0,     506,   507,   508,   509,   510,   0,     999,   1989,  513,
    794,   514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   0,     0,     0,     0,     0,     0,
    0,     219,   0,     534,   535,   536,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     1990,  220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   0,     236,   237,   238,
    239,   240,   0,     241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     0,     0,     258,   259,   260,   261,   0,     262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     0,
    271,   272,   273,   0,     0,     0,     0,     0,     0,     0,     274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   0,     0,     0,     319,   320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   330,   0,     331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    0,     357,   358,   0,     359,   0,     0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   0,     379,   380,   381,   382,
    0,     383,   384,   0,     385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   0,     398,   0,     399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   0,     458,   459,   460,   461,   462,   0,     463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   0,     481,   0,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   0,     514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   815,   1391,  593,   0,     0,     0,     646,   0,
    0,     4508,  0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   772,   236,
    237,   238,   239,   240,   773,   241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     774,   0,     258,   259,   260,   261,
    775,   262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     776,   271,   272,   273,   0,     0,     0,     777,   0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   1836,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   1660,  312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   778,   0,     779,   319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   330,   780,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   781,   342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   782,   783,   351,   784,   352,   353,   354,   355,
    356,   0,     0,     357,   358,   785,   359,   786,   0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   787,   379,   380,
    381,   382,   0,     383,   384,   788,   385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   1661,  0,     393,   394,   395,   0,
    0,     396,   397,   789,   398,   790,   399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   791,   441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   0,     458,   459,   460,   461,   462,
    792,   463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   793,   482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   1662,  494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   794,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   815,   1391,  593,   0,     0,     0,
    646,   658,   1392,  0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    772,   236,   237,   238,   239,   240,   773,   241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     774,   0,     258,   259,
    260,   261,   775,   262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     776,   271,   272,   273,   0,     0,     0,     777,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   1841,  283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   1660,  312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   778,   0,     779,   319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    330,   780,   331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   781,   342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   782,   783,   351,   784,   352,   353,
    354,   355,   356,   0,     0,     357,   358,   785,   359,   786,   0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   787,
    379,   380,   381,   382,   0,     383,   384,   788,   385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   1661,  0,     393,   394,
    395,   0,     0,     396,   397,   789,   398,   790,   399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   791,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   792,   463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   793,   482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   1662,  494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   794,   514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   815,   1391,  593,   0,
    0,     0,     646,   658,   1392,  0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   772,   236,   237,   238,   239,   240,   773,   241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   250,
    251,   252,   0,     253,   254,   255,   256,   257,   0,     774,   0,
    258,   259,   260,   261,   775,   262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     776,   271,   272,   273,   0,     0,
    0,     777,   0,     0,     0,     274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   1660,  312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   778,   0,     779,   319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   330,   780,   331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   781,   342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   782,   783,   351,   784,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   785,   359,
    786,   0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   787,   379,   380,   381,   382,   0,     383,   384,   788,   385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   1661,  0,
    393,   394,   395,   0,     0,     396,   397,   789,   398,   790,   399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   791,   441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   0,     458,
    459,   460,   461,   462,   792,   463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   793,   482,   483,   484,   485,   486,
    0,     487,   488,   0,     0,     489,   490,   491,   492,   493,   1662,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   794,   514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   815,   0,
    593,   0,     0,     0,     646,   658,   1392,  0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   772,   236,   237,   238,   239,   240,   773,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    774,   0,     258,   259,   260,   261,   775,   262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     776,   271,   272,   273,
    0,     0,     0,     777,   0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   2704,  283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   1660,  312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   778,   0,
    779,   319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   330,   780,   331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   781,   342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   782,   783,
    351,   784,   352,   353,   354,   355,   356,   0,     0,     357,   358,
    785,   359,   786,   0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   787,   379,   380,   381,   382,   0,     383,   384,
    788,   385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    1661,  0,     393,   394,   395,   0,     0,     396,   397,   789,   398,
    790,   399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   791,   441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   460,   461,   462,   792,   463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   793,   482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   1662,  494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   794,   514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    219,   0,     0,     0,     0,     0,     646,   658,   659,   0,     0,
    0,     0,     0,     0,     220,   647,   222,   223,   224,   225,   226,
    227,   648,   229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     649,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   0,     253,   254,   255,   256,
    257,   0,     0,     0,     258,   259,   260,   261,   0,     262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   650,   315,   316,   0,     317,   0,     651,
    0,     652,   0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   330,   0,     331,   332,   333,
    334,   653,   335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   654,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   0,     379,   655,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     656,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   657,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   0,     482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   1846,  4870,  593,   0,     0,     0,     646,   658,   659,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   1847,  229,   230,   231,   1848,  1849,  1850,  1851,
    1852,  1853,  1854,  232,   233,   1855,  234,   235,   772,   236,   237,
    238,   239,   240,   773,   241,   242,   1856,  243,   244,   245,   246,
    247,   1857,  1858,  248,   249,   250,   251,   252,   1859,  253,   254,
    255,   256,   257,   1860,  774,   1861,  258,   259,   260,   261,   775,
    262,   263,   264,   1862,  265,   266,   267,   268,   269,   270,   1863,
    776,   271,   272,   273,   1864,  1865,  1866,  777,   1867,  1868,  1869,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   1870,  283,
    1871,  284,   285,   286,   287,   288,   1872,  289,   290,   291,   1873,
    1874,  292,   293,   294,   295,   296,   1875,  297,   298,   299,   1876,
    300,   301,   302,   1877,  303,   304,   305,   306,   307,   308,   309,
    310,   311,   1878,  312,   1879,  313,   314,   315,   316,   1880,  317,
    1881,  318,   778,   1882,  779,   319,   320,   321,   1883,  322,   323,
    1884,  324,   325,   1885,  326,   327,   328,   329,   330,   780,   331,
    332,   333,   334,   1886,  335,   336,   337,   338,   339,   340,   1887,
    341,   781,   342,   343,   344,   345,   346,   347,   348,   1888,  349,
    1889,  350,   782,   783,   351,   784,   352,   353,   354,   355,   356,
    1890,  1891,  357,   358,   785,   359,   786,   1892,  360,   361,   362,
    1893,  1894,  363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   787,   379,   380,   381,
    382,   1895,  383,   384,   788,   385,   1896,  386,   387,   388,   389,
    390,   391,   1897,  392,   1898,  1899,  393,   394,   395,   1900,  1901,
    396,   397,   789,   398,   790,   399,   400,   401,   402,   403,   404,
    405,   406,   1902,  407,   408,   409,   410,   411,   412,   413,   414,
    1903,  415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   1904,  428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   1905,  439,   440,   791,   441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   1906,  453,
    454,   455,   456,   457,   1907,  458,   459,   460,   461,   462,   792,
    463,   464,   465,   466,   1908,  467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   1909,  479,   480,   1910,  481,
    793,   482,   483,   484,   485,   486,   1911,  487,   488,   1912,  1913,
    489,   490,   491,   492,   493,   1914,  494,   495,   496,   497,   498,
    499,   500,   1915,  1916,  501,   502,   503,   504,   505,   1917,  1918,
    506,   507,   508,   509,   510,   511,   512,   1919,  513,   794,   514,
    515,   516,   517,   1920,  1921,  518,   1922,  1923,  519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   1846,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   1847,  229,   230,   231,   1848,  1849,
    1850,  1851,  1852,  1853,  1854,  232,   233,   1855,  234,   235,   772,
    236,   237,   238,   239,   240,   773,   241,   242,   1856,  243,   244,
    245,   246,   247,   1857,  1858,  248,   249,   250,   251,   252,   1859,
    253,   254,   255,   256,   257,   1860,  774,   1861,  258,   259,   260,
    261,   775,   262,   263,   264,   1862,  265,   266,   267,   268,   269,
    270,   1863,  776,   271,   272,   273,   1864,  1865,  1866,  777,   1867,
    1868,  1869,  274,   275,   276,   277,   278,   279,   280,   281,   282,
    1870,  283,   1871,  284,   285,   286,   287,   288,   1872,  289,   290,
    291,   1873,  1874,  292,   293,   294,   295,   296,   1875,  297,   298,
    299,   1876,  300,   301,   302,   1877,  303,   304,   305,   306,   307,
    308,   309,   310,   311,   1878,  312,   1879,  313,   314,   315,   316,
    1880,  317,   1881,  318,   778,   1882,  779,   319,   320,   321,   1883,
    322,   323,   1884,  324,   325,   1885,  326,   327,   328,   329,   330,
    780,   331,   332,   333,   334,   1886,  335,   336,   337,   338,   339,
    340,   1887,  341,   781,   342,   343,   344,   345,   346,   347,   348,
    1888,  349,   1889,  350,   782,   783,   351,   784,   352,   353,   354,
    355,   356,   1890,  1891,  357,   358,   785,   359,   786,   1892,  360,
    361,   362,   1893,  1894,  363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   787,   379,
    380,   381,   382,   1895,  383,   384,   788,   385,   1896,  386,   387,
    388,   389,   390,   391,   1897,  392,   1898,  1899,  393,   394,   395,
    1900,  1901,  396,   397,   789,   398,   790,   399,   400,   401,   402,
    403,   404,   405,   406,   1902,  407,   408,   409,   410,   411,   412,
    413,   414,   1903,  415,   416,   417,   418,   419,   420,   421,   422,
    423,   424,   425,   426,   427,   1904,  428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   1905,  439,   440,   791,   441,
    442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
    1906,  453,   454,   455,   456,   457,   1907,  458,   459,   460,   461,
    462,   792,   463,   464,   465,   466,   1908,  467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   478,   1909,  479,   480,
    1910,  481,   793,   482,   483,   484,   485,   486,   1911,  487,   488,
    1912,  1913,  489,   490,   491,   492,   493,   1914,  494,   495,   496,
    497,   498,   499,   500,   1915,  1916,  501,   502,   503,   504,   505,
    1917,  1918,  506,   507,   508,   509,   510,   511,   512,   1919,  513,
    794,   514,   515,   516,   517,   1920,  1921,  518,   1922,  1923,  519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
    531,   532,   533,   534,   535,   536,   1846,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   2811,  225,   226,   227,   1847,  229,   230,   231,
    1848,  1849,  1850,  1851,  1852,  1853,  1854,  232,   233,   1855,  234,
    235,   772,   236,   237,   238,   239,   240,   773,   241,   242,   1856,
    243,   244,   245,   246,   247,   1857,  1858,  248,   249,   250,   251,
    252,   1859,  253,   254,   255,   256,   257,   1860,  774,   1861,  258,
    259,   260,   261,   775,   262,   263,   264,   1862,  265,   266,   267,
    268,   269,   270,   1863,  776,   271,   272,   273,   1864,  1865,  1866,
    777,   1867,  1868,  1869,  274,   275,   276,   277,   278,   279,   280,
    281,   282,   1870,  283,   1871,  284,   285,   286,   287,   288,   1872,
    289,   290,   291,   1873,  1874,  292,   293,   294,   2812,  296,   1875,
    297,   298,   299,   1876,  300,   301,   302,   1877,  303,   304,   305,
    306,   307,   308,   309,   310,   311,   1878,  312,   1879,  313,   314,
    315,   316,   1880,  317,   1881,  318,   778,   1882,  779,   319,   320,
    321,   1883,  322,   323,   1884,  324,   325,   1885,  326,   327,   328,
    329,   330,   780,   331,   332,   333,   334,   1886,  335,   336,   337,
    338,   339,   340,   1887,  341,   781,   342,   343,   344,   345,   346,
    347,   348,   1888,  349,   1889,  350,   782,   783,   351,   784,   352,
    353,   354,   355,   356,   1890,  1891,  357,   358,   785,   359,   786,
    1892,  360,   361,   362,   1893,  1894,  363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    787,   379,   380,   381,   382,   1895,  383,   384,   788,   385,   1896,
    386,   387,   388,   389,   390,   391,   1897,  392,   1898,  1899,  393,
    394,   395,   1900,  1901,  396,   397,   789,   398,   790,   399,   400,
    401,   402,   403,   404,   405,   406,   1902,  407,   408,   409,   410,
    411,   412,   413,   414,   1903,  415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   1904,  428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   1905,  439,   440,
    791,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   1906,  453,   454,   455,   456,   457,   1907,  2813,  459,
    460,   461,   462,   792,   463,   464,   465,   466,   1908,  467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   1909,
    479,   480,   1910,  481,   793,   482,   483,   484,   485,   486,   1911,
    487,   488,   1912,  1913,  489,   490,   491,   492,   493,   1914,  494,
    495,   496,   497,   498,   499,   500,   1915,  1916,  501,   502,   503,
    504,   505,   1917,  1918,  506,   507,   508,   509,   510,   511,   512,
    1919,  513,   794,   514,   515,   516,   517,   1920,  1921,  518,   1922,
    1923,  519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   771,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   772,   236,   237,   238,   239,   240,   773,   241,
    242,   0,     243,   244,   245,   246,   247,   0,     1132,  248,   249,
    250,   251,   252,   0,     253,   254,   255,   256,   1135,  0,     1136,
    0,     258,   259,   260,   261,   775,   262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     776,   271,   272,   273,   1137,
    1138,  1139,  1140,  1141,  1142,  1143,  274,   275,   276,   277,   278,
    279,   280,   281,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   307,   308,   309,   310,   1147,  0,     312,   0,
    313,   314,   315,   316,   0,     317,   0,     318,   778,   0,     779,
    319,   320,   321,   0,     322,   1150,  0,     324,   325,   0,     326,
    327,   328,   329,   330,   780,   331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   781,   342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   782,   783,   351,
    784,   352,   353,   354,   355,   356,   0,     0,     357,   1155,  785,
    359,   786,   0,     360,   361,   362,   1156,  1157,  363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   787,   379,   380,   381,   382,   0,     383,   384,   788,
    385,   0,     1162,  387,   388,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   397,   789,   398,   790,
    1165,  400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    1166,  410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   791,   441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   1169,
    458,   459,   460,   461,   462,   792,   463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    1171,  0,     479,   480,   0,     481,   793,   482,   483,   484,   485,
    486,   0,     487,   488,   0,     0,     489,   490,   1174,  492,   1175,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   1178,  0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   794,   514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   1180,
    1181,  1182,  1183,  1184,  1185,  1186,  1187,  534,   535,   536,   815,
    0,     593,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     0,     0,     0,     0,     0,
    232,   233,   0,     234,   235,   772,   236,   237,   238,   239,   240,
    773,   241,   242,   0,     243,   244,   245,   246,   247,   0,     0,
    248,   249,   250,   251,   252,   0,     253,   254,   255,   256,   257,
    0,     774,   0,     258,   259,   260,   261,   775,   262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     776,   271,   272,
    273,   0,     0,     0,     777,   0,     0,     0,     274,   275,   276,
    277,   278,   279,   280,   281,   282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    294,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   307,   308,   309,   310,   311,   1660,
    312,   0,     313,   314,   315,   316,   0,     317,   0,     318,   778,
    0,     779,   319,   320,   321,   0,     322,   323,   0,     324,   325,
    0,     326,   327,   328,   329,   330,   780,   331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   781,   342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   782,
    783,   351,   784,   352,   353,   354,   355,   356,   0,     0,     357,
    358,   785,   359,   786,   0,     360,   361,   362,   0,     0,     363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   787,   379,   380,   381,   382,   0,     383,
    384,   788,   385,   0,     386,   387,   388,   389,   390,   391,   0,
    392,   1661,  0,     393,   394,   395,   0,     0,     396,   397,   789,
    398,   790,   399,   400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   409,   410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   791,   441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   0,     458,   459,   460,   461,   462,   792,   463,   464,   465,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   478,   0,     479,   480,   0,     481,   793,   482,   483,
    484,   485,   486,   0,     487,   488,   0,     0,     489,   490,   491,
    492,   493,   1662,  494,   495,   496,   497,   498,   499,   500,   0,
    0,     501,   502,   503,   504,   505,   0,     0,     506,   507,   508,
    509,   510,   511,   512,   0,     513,   794,   514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   815,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   850,   229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   772,   236,   237,   238,
    239,   240,   773,   241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     774,   0,     258,   259,   260,   261,   775,   262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     776,
    271,   272,   273,   0,     0,     0,     777,   0,     0,     816,   274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   778,   0,     779,   319,   320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   330,   780,   331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    781,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   782,   783,   351,   784,   352,   353,   354,   355,   356,   0,
    0,     357,   358,   785,   359,   786,   0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   787,   379,   380,   381,   382,
    0,     383,   384,   788,   385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   789,   398,   790,   399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   791,   441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   817,   458,   459,   460,   461,   462,   792,   463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   0,     481,   793,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   794,   514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   815,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   772,   236,
    237,   238,   239,   240,   773,   241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     774,   0,     258,   259,   260,   261,
    775,   262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     776,   271,   272,   273,   0,     0,     0,     777,   0,     0,
    816,   274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   778,   0,     779,   319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   330,   780,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   781,   342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   782,   783,   351,   784,   352,   353,   354,   355,
    356,   0,     0,     357,   358,   785,   359,   786,   0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   787,   379,   380,
    381,   382,   0,     383,   384,   788,   385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   789,   398,   790,   399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   791,   441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   817,   458,   459,   460,   461,   462,
    792,   463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   793,   482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   2206,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   794,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   815,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    772,   236,   237,   238,   239,   240,   773,   241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     774,   0,     258,   259,
    260,   261,   775,   262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     776,   271,   272,   273,   0,     0,     0,     777,
    0,     0,     816,   274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   778,   0,     779,   319,   320,   321,
    0,     322,   323,   3108,  324,   325,   0,     326,   327,   328,   329,
    330,   780,   331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   781,   342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   782,   783,   351,   784,   352,   353,
    354,   355,   356,   0,     0,     357,   358,   785,   359,   786,   0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   787,
    379,   380,   381,   382,   0,     383,   384,   788,   385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   789,   398,   790,   399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   791,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   817,   458,   459,   460,
    461,   462,   792,   463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   793,   482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   794,   514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   815,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   772,   236,   237,   238,   239,   240,   773,   241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   250,
    251,   252,   0,     253,   254,   255,   256,   257,   0,     774,   0,
    258,   259,   260,   261,   775,   262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     776,   271,   272,   273,   0,     0,
    0,     777,   0,     0,     816,   274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   0,     312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   778,   0,     779,   319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   330,   780,   331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   781,   342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   782,   783,   351,   784,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   785,   359,
    786,   0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   787,   379,   380,   381,   382,   0,     383,   384,   788,   385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     0,     396,   397,   789,   398,   790,   399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   791,   441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   817,   458,
    459,   460,   461,   462,   792,   463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   793,   482,   483,   484,   485,   486,
    0,     487,   488,   0,     0,     489,   490,   491,   492,   493,   0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   794,   514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   815,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   772,   236,   237,   238,   239,   240,   773,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    774,   0,     258,   259,   260,   261,   775,   262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     776,   271,   272,   273,
    0,     0,     0,     777,   0,     0,     816,   274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   778,   0,
    779,   319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   330,   780,   331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   781,   342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   782,   783,
    351,   784,   352,   353,   354,   355,   356,   0,     0,     357,   358,
    785,   359,   786,   0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   867,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   787,   379,   380,   381,   382,   0,     383,   384,
    788,   385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   397,   789,   398,
    790,   399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   791,   441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    817,   458,   459,   460,   461,   462,   792,   463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   793,   482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   794,   514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    815,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   772,   236,   237,   238,   239,
    240,   773,   241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   0,     253,   254,   255,   256,
    257,   0,     774,   0,     258,   259,   260,   261,   775,   262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     776,   271,
    272,   273,   0,     0,     0,     777,   0,     0,     816,   274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   314,   315,   316,   0,     317,   0,     318,
    778,   0,     779,   319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   330,   780,   331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   781,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    782,   783,   351,   784,   352,   353,   354,   355,   356,   0,     0,
    357,   358,   785,   359,   786,   0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   949,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   787,   379,   380,   381,   382,   0,
    383,   384,   788,   385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    789,   398,   790,   399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   791,   441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   817,   458,   459,   460,   461,   462,   792,   463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   793,   482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   794,   514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   815,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   772,   236,   237,
    238,   239,   240,   773,   241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   250,   251,   252,   0,     253,   254,
    255,   256,   257,   0,     774,   0,     258,   259,   260,   261,   775,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    776,   271,   272,   273,   0,     0,     0,     777,   0,     0,     816,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    0,     318,   778,   0,     779,   319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   1021,  780,   331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   781,   342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   782,   783,   351,   784,   352,   353,   354,   355,   356,
    0,     0,     357,   358,   785,   359,   786,   0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   787,   379,   380,   381,
    382,   0,     383,   384,   788,   385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   789,   398,   790,   399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   791,   441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   817,   458,   459,   460,   461,   462,   792,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   0,     481,
    793,   482,   483,   484,   485,   486,   0,     487,   488,   0,     0,
    489,   490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   511,   512,   0,     513,   794,   514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   815,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   772,
    236,   237,   238,   239,   240,   773,   241,   242,   0,     243,   244,
    245,   246,   247,   0,     0,     248,   249,   250,   251,   252,   0,
    253,   254,   255,   256,   257,   0,     774,   0,     258,   259,   260,
    261,   775,   262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     776,   271,   272,   273,   0,     0,     0,     777,   0,
    0,     816,   274,   275,   276,   277,   278,   279,   280,   281,   282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   294,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   307,
    308,   309,   310,   311,   0,     312,   0,     313,   314,   315,   316,
    0,     317,   0,     318,   778,   0,     779,   319,   320,   321,   0,
    322,   323,   0,     324,   325,   0,     326,   327,   328,   329,   1033,
    780,   331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   781,   342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   782,   783,   351,   784,   352,   353,   354,
    355,   356,   0,     0,     357,   358,   785,   359,   786,   0,     360,
    361,   362,   0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   787,   379,
    380,   381,   382,   0,     383,   384,   788,   385,   0,     386,   387,
    388,   389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     0,     396,   397,   789,   398,   790,   399,   400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   409,   410,   411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   791,   441,
    442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   817,   458,   459,   460,   461,
    462,   792,   463,   464,   465,   466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   478,   0,     479,   480,
    0,     481,   793,   482,   483,   484,   485,   486,   0,     487,   488,
    0,     0,     489,   490,   491,   492,   493,   0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   503,   504,   505,
    0,     0,     506,   507,   508,   509,   510,   511,   512,   0,     513,
    794,   514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
    531,   532,   533,   534,   535,   536,   815,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   772,   236,   237,   238,   239,   240,   773,   241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     774,   0,     258,
    259,   260,   261,   775,   262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     776,   271,   272,   273,   0,     0,     0,
    777,   0,     0,     816,   274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   778,   0,     779,   319,   320,
    321,   0,     322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   1047,  780,   331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   781,   342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   782,   783,   351,   784,   352,
    353,   354,   355,   356,   0,     0,     357,   358,   785,   359,   786,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   1048,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    787,   379,   380,   381,   382,   0,     383,   384,   788,   385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   789,   398,   790,   399,   400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    791,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   817,   458,   459,
    460,   461,   462,   792,   463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   793,   482,   483,   484,   485,   486,   0,
    487,   488,   0,     0,     489,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   794,   514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   815,   0,     593,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   772,   236,   237,   238,   239,   240,   773,   241,
    242,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    250,   251,   252,   0,     253,   254,   255,   256,   257,   0,     774,
    0,     258,   259,   260,   261,   775,   262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     776,   271,   272,   273,   0,
    0,     0,     777,   0,     0,     0,     274,   275,   276,   277,   278,
    279,   280,   281,   282,   1821,  283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   307,   308,   309,   310,   311,   0,     312,   0,
    313,   314,   315,   316,   0,     317,   0,     318,   778,   0,     779,
    319,   320,   321,   0,     322,   323,   0,     324,   325,   0,     326,
    327,   328,   329,   330,   780,   331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   781,   342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   782,   783,   351,
    784,   352,   353,   354,   355,   356,   0,     0,     357,   358,   785,
    359,   786,   0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   787,   379,   380,   381,   382,   0,     383,   384,   788,
    385,   0,     386,   387,   388,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   397,   789,   398,   790,
    399,   400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    409,   410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   791,   441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   0,
    458,   459,   460,   461,   462,   792,   463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    478,   0,     479,   480,   0,     481,   793,   482,   483,   484,   485,
    486,   0,     487,   488,   0,     0,     489,   490,   491,   492,   493,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   794,   514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   526,
    527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   815,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   3,     4,     0,     0,     0,     0,     0,
    232,   233,   0,     234,   235,   772,   236,   237,   238,   239,   240,
    773,   241,   242,   0,     243,   244,   245,   246,   247,   0,     0,
    248,   249,   250,   251,   252,   0,     253,   254,   255,   256,   257,
    0,     774,   0,     258,   259,   260,   261,   775,   262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     776,   271,   272,
    273,   0,     0,     0,     777,   0,     0,     0,     274,   275,   276,
    277,   278,   279,   280,   281,   282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    294,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   307,   308,   309,   310,   311,   0,
    312,   0,     313,   314,   315,   316,   0,     317,   0,     318,   778,
    0,     779,   319,   320,   321,   0,     322,   323,   0,     324,   325,
    0,     326,   327,   328,   329,   330,   780,   331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   781,   342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   782,
    783,   351,   784,   352,   353,   354,   355,   356,   0,     0,     357,
    358,   785,   359,   786,   0,     360,   361,   362,   0,     0,     363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   787,   379,   380,   381,   382,   0,     383,
    384,   788,   385,   0,     386,   387,   388,   389,   390,   391,   0,
    392,   0,     0,     393,   394,   395,   0,     0,     396,   397,   789,
    398,   790,   399,   400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   409,   410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   791,   441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   0,     458,   459,   460,   461,   462,   792,   463,   464,   465,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   478,   0,     479,   480,   0,     481,   793,   482,   483,
    484,   485,   486,   0,     487,   488,   0,     0,     489,   490,   491,
    492,   493,   0,     494,   495,   496,   497,   498,   499,   500,   0,
    0,     501,   502,   503,   504,   505,   0,     0,     506,   507,   508,
    509,   510,   511,   512,   0,     513,   794,   514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   815,   0,     593,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   772,   236,   237,   238,
    239,   240,   773,   241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     774,   0,     258,   259,   260,   261,   775,   262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     776,
    271,   272,   273,   0,     0,     0,     777,   0,     0,     0,     274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   778,   0,     779,   319,   320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   330,   780,   331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    781,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   782,   783,   351,   784,   352,   353,   354,   355,   356,   0,
    0,     357,   358,   785,   359,   786,   0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   787,   379,   380,   381,   382,
    0,     383,   384,   788,   385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   789,   398,   790,   399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   791,   441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   0,     458,   459,   460,   461,   462,   792,   463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   0,     481,   793,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   794,   514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   815,   0,     593,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   772,   236,
    237,   238,   239,   240,   773,   241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     774,   0,     258,   259,   260,   261,
    775,   262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     776,   271,   272,   273,   0,     0,     0,     777,   0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   778,   0,     779,   319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   1650,  780,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   781,   342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   782,   783,   351,   784,   352,   353,   354,   355,
    356,   0,     0,     357,   358,   785,   359,   786,   0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   787,   379,   380,
    381,   382,   0,     383,   384,   788,   385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   789,   398,   790,   399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   791,   441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   0,     458,   459,   460,   461,   462,
    792,   463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   793,   482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   794,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   771,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    772,   236,   237,   238,   239,   240,   773,   241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     774,   0,     258,   259,
    260,   261,   775,   262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     776,   271,   272,   273,   0,     0,     0,     777,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   778,   0,     779,   319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    330,   780,   331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   781,   342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   782,   783,   351,   784,   352,   353,
    354,   355,   356,   0,     0,     357,   358,   785,   359,   786,   0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   787,
    379,   380,   381,   382,   0,     383,   384,   788,   385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   789,   398,   790,   399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   791,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   792,   463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   793,   482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   794,   514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   771,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   772,   236,   237,   238,   239,   240,   773,   241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   250,
    251,   252,   0,     253,   254,   255,   256,   257,   0,     774,   0,
    258,   259,   260,   261,   775,   262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     776,   271,   272,   273,   0,     0,
    0,     777,   0,     0,     0,     274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   0,     312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   778,   0,     779,   319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   970,   780,   331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   781,   342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   782,   783,   351,   784,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   785,   359,
    786,   0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   787,   379,   380,   381,   382,   0,     383,   384,   788,   385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     0,     396,   397,   789,   398,   790,   399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   791,   441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   0,     458,
    459,   460,   461,   462,   792,   463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   793,   482,   483,   484,   485,   486,
    0,     487,   488,   0,     0,     489,   490,   491,   492,   493,   0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   794,   514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   771,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   772,   236,   237,   238,   239,   240,   773,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    774,   0,     258,   259,   260,   261,   775,   262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     776,   271,   272,   273,
    0,     0,     0,     777,   0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   778,   0,
    779,   319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   1019,  780,   331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   781,   342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   782,   783,
    351,   784,   352,   353,   354,   355,   356,   0,     0,     357,   358,
    785,   359,   786,   0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   787,   379,   380,   381,   382,   0,     383,   384,
    788,   385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   397,   789,   398,
    790,   399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   791,   441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   460,   461,   462,   792,   463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   793,   482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   794,   514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    219,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     236,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   2026,  253,   254,   255,   256,
    257,   0,     0,     2100,  258,   259,   260,   261,   0,     262,   263,
    264,   2027,  265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     2101,  304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   314,   315,   316,   0,     317,   2029,  318,
    0,     0,     0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   330,   0,     331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   0,     379,   380,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   2030,  415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   0,     482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     2031,  501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   219,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   0,     236,   237,
    238,   239,   240,   0,     241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   250,   251,   252,   2026,  253,   254,
    255,   256,   257,   0,     0,     0,     258,   259,   260,   261,   0,
    262,   263,   264,   2027,  265,   266,   267,   268,   269,   270,   0,
    0,     271,   272,   273,   0,     0,     0,     0,     0,     0,     0,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     2101,  304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    2029,  318,   0,     0,     0,     319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   330,   0,     331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,
    0,     0,     357,   358,   0,     359,   2973,  0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   0,     379,   380,   381,
    382,   0,     383,   384,   0,     385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   0,     398,   0,     399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    2030,  415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   0,     458,   459,   460,   461,   462,   0,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   0,     481,
    0,     482,   483,   484,   485,   486,   0,     487,   488,   0,     0,
    489,   490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     2031,  501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   511,   512,   0,     513,   0,     514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   219,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   703,   226,   227,   665,   229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   0,
    236,   237,   238,   239,   240,   0,     241,   242,   0,     243,   244,
    245,   246,   247,   0,     0,     248,   249,   250,   251,   252,   0,
    253,   254,   255,   256,   257,   0,     0,     0,     258,   259,   260,
    261,   0,     262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   666,   0,     271,   272,   273,   0,     0,     0,     0,     0,
    0,     0,     274,   275,   276,   277,   278,   279,   280,   281,   282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   294,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   307,
    308,   309,   310,   311,   0,     312,   0,     313,   314,   315,   316,
    0,     317,   0,     318,   0,     0,     0,     319,   320,   321,   704,
    322,   323,   0,     324,   325,   0,     326,   327,   328,   329,   330,
    0,     331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,
    355,   356,   0,     0,     357,   358,   0,     359,   0,     0,     360,
    361,   362,   0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   0,     379,
    380,   381,   382,   0,     383,   384,   0,     385,   0,     386,   387,
    388,   389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     0,     396,   397,   0,     398,   0,     399,   400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   409,   410,   411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    423,   424,   425,   426,   427,   667,   428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,
    442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
    668,   453,   454,   455,   456,   457,   0,     458,   459,   460,   461,
    462,   0,     463,   464,   465,   466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   478,   0,     479,   480,
    0,     481,   0,     482,   483,   484,   485,   486,   0,     487,   488,
    0,     0,     489,   490,   491,   492,   493,   0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   503,   504,   505,
    0,     0,     506,   507,   508,   509,   510,   511,   512,   0,     513,
    0,     514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
    531,   532,   533,   534,   535,   536,   219,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   665,   229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   0,     236,   237,   238,   239,   240,   0,     241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     0,     0,     258,
    259,   260,   261,   0,     262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   666,   0,     271,   272,   273,   0,     0,     0,
    0,     0,     0,     0,     274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   0,     0,     0,     319,   320,
    321,   2711,  322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   330,   0,     331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     0,     357,   358,   0,     359,   0,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    0,     379,   380,   381,   382,   0,     383,   384,   0,     385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   0,     398,   0,     399,   400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   667,   428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   668,   453,   454,   455,   456,   457,   0,     458,   459,
    460,   461,   462,   0,     463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   0,     482,   483,   484,   485,   486,   0,
    487,   488,   0,     0,     489,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   0,     514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   219,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   0,     236,   237,   238,   239,   240,   0,     241,
    242,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    250,   251,   252,   2026,  253,   254,   255,   256,   257,   0,     0,
    0,     258,   259,   260,   261,   0,     262,   263,   264,   2027,  265,
    266,   267,   268,   269,   270,   0,     0,     271,   272,   273,   0,
    0,     0,     0,     0,     0,     0,     274,   275,   276,   277,   278,
    279,   280,   281,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     2101,
    304,   305,   306,   307,   308,   309,   310,   311,   0,     312,   0,
    313,   314,   315,   316,   0,     317,   2029,  318,   0,     0,     0,
    319,   320,   321,   0,     322,   323,   0,     324,   325,   0,     326,
    327,   328,   329,   330,   0,     331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,
    0,     352,   353,   354,   355,   356,   0,     0,     357,   358,   0,
    359,   0,     0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   0,     379,   380,   381,   382,   0,     383,   384,   0,
    385,   0,     386,   387,   388,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   397,   0,     398,   0,
    399,   400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    409,   410,   411,   412,   413,   414,   2030,  415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   0,
    458,   459,   460,   461,   462,   0,     463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    478,   0,     479,   480,   0,     481,   0,     482,   483,   484,   485,
    486,   0,     487,   488,   0,     0,     489,   490,   491,   492,   493,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     2031,  501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   0,     514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   526,
    527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   219,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    665,   229,   230,   231,   0,     0,     0,     0,     0,     0,     0,
    232,   233,   0,     234,   235,   0,     236,   237,   238,   239,   240,
    0,     241,   242,   0,     243,   244,   245,   246,   247,   0,     0,
    248,   249,   250,   251,   252,   0,     253,   254,   255,   256,   257,
    0,     0,     0,     258,   259,   260,   261,   0,     262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   666,   0,     271,   272,
    273,   0,     0,     0,     0,     0,     0,     0,     274,   275,   276,
    277,   278,   279,   280,   281,   282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    294,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   307,   308,   309,   310,   311,   0,
    312,   0,     313,   314,   315,   316,   0,     317,   0,     318,   0,
    0,     0,     319,   320,   321,   0,     322,   323,   0,     324,   325,
    0,     326,   327,   328,   329,   330,   0,     331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,
    0,     351,   0,     352,   353,   354,   355,   356,   0,     0,     357,
    358,   0,     359,   0,     0,     360,   361,   362,   0,     0,     363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   0,     379,   380,   381,   382,   0,     383,
    384,   0,     385,   0,     386,   387,   388,   389,   390,   391,   0,
    392,   0,     0,     393,   394,   395,   0,     0,     396,   397,   0,
    398,   0,     399,   400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   409,   410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    667,   428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   452,   668,   453,   454,   455,   456,
    457,   0,     458,   459,   460,   461,   462,   0,     463,   464,   465,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   478,   0,     479,   480,   0,     481,   0,     482,   483,
    484,   485,   486,   0,     487,   488,   0,     0,     489,   490,   491,
    492,   493,   0,     494,   495,   496,   497,   498,   499,   500,   0,
    0,     501,   502,   503,   504,   505,   0,     0,     506,   507,   508,
    509,   510,   511,   512,   0,     513,   0,     514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   219,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   1687,  229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   0,     236,   237,   238,
    239,   240,   0,     241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     0,     0,     258,   259,   260,   261,   0,     262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     0,
    271,   272,   273,   0,     0,     0,     0,     0,     0,     0,     274,
    275,   276,   1688,  278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   1689,  294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   1690,
    318,   0,     0,     0,     1691,  320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   330,   0,     331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   1692,  1693,  356,   0,
    0,     357,   358,   0,     359,   0,     0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   0,     379,   380,   381,   382,
    0,     383,   384,   0,     385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   0,     398,   0,     399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   1694,  449,   450,   451,   452,   0,     1695,  454,
    455,   456,   457,   0,     458,   459,   460,   461,   462,   0,     463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   1696,  481,   0,
    1697,  483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   1698,  497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   0,     514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   219,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   0,     236,
    237,   238,   239,   240,   0,     241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     0,     0,     258,   259,   260,   261,
    0,     262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    666,   0,     271,   272,   273,   0,     0,     0,     0,     0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   0,     0,     0,     319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   330,   0,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     0,     357,   358,   0,     359,   0,     0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   0,     379,   380,
    381,   382,   0,     383,   384,   0,     385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   0,     398,   0,     399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   667,   428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   668,
    453,   454,   455,   456,   457,   0,     458,   459,   460,   461,   462,
    0,     463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   0,     482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   0,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   219,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   860,   229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    0,     236,   237,   238,   239,   240,   0,     241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     0,     0,     258,   259,
    260,   261,   0,     262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     0,     271,   272,   273,   0,     0,     0,     0,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   0,     0,     0,     319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    861,   0,     331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     0,     357,   358,   0,     359,   0,     0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   0,
    379,   380,   381,   382,   0,     383,   384,   0,     385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     735,   393,   394,
    395,   0,     0,     396,   397,   0,     398,   0,     399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   0,     463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   0,     482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   0,     514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   219,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   3,     4,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   0,     236,   237,   238,   239,   240,   0,     241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   250,
    251,   252,   0,     253,   254,   255,   256,   257,   0,     0,     0,
    258,   259,   260,   261,   0,     262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     0,     271,   272,   273,   0,     0,
    0,     0,     0,     0,     0,     274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   0,     312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   0,     0,     0,     319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   330,   0,     331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   0,     359,
    0,     0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   0,     379,   380,   381,   382,   0,     383,   384,   0,     385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     0,     396,   397,   0,     398,   0,     399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   0,     458,
    459,   460,   461,   462,   0,     463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   0,     482,   483,   484,   485,   486,
    0,     487,   488,   0,     0,     489,   490,   491,   492,   493,   0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   0,     514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   219,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   2794,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   0,     236,   237,   238,   239,   240,   0,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    0,     0,     258,   259,   260,   261,   0,     262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     0,     271,   272,   273,
    0,     0,     0,     0,     0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   0,     0,
    0,     319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   330,   0,     331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     0,     357,   358,
    0,     359,   0,     0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   0,     379,   380,   381,   382,   0,     383,   384,
    0,     385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   397,   0,     398,
    0,     399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   460,   461,   462,   0,     463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   0,     482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   2795,  0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   0,     514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    219,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   2807,  229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     236,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   0,     253,   254,   255,   256,
    257,   0,     0,     0,     258,   259,   260,   261,   0,     262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   314,   315,   316,   0,     317,   0,     318,
    0,     0,     0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   330,   0,     331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   0,     379,   380,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   0,     482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   2808,  0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   219,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   228,   229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   0,     236,   237,
    238,   239,   240,   0,     241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   250,   251,   252,   0,     253,   254,
    255,   256,   257,   0,     0,     0,     258,   259,   260,   261,   0,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    0,     271,   272,   273,   0,     0,     0,     0,     0,     0,     0,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    0,     318,   0,     0,     0,     319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   330,   0,     331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,
    0,     0,     357,   358,   0,     359,   0,     0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   0,     379,   380,   381,
    382,   0,     383,   384,   0,     385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   0,     398,   0,     399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   0,     458,   459,   460,   461,   462,   0,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   0,     481,
    0,     482,   483,   484,   485,   486,   0,     487,   488,   0,     0,
    489,   490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   511,   512,   0,     513,   0,     514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   219,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   584,   229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   0,
    236,   237,   238,   239,   240,   0,     241,   242,   0,     243,   244,
    245,   246,   247,   0,     0,     248,   249,   250,   251,   252,   0,
    253,   254,   255,   256,   257,   0,     0,     0,     258,   259,   260,
    261,   0,     262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     0,     271,   272,   273,   0,     0,     0,     0,     0,
    0,     0,     274,   275,   276,   277,   278,   279,   280,   281,   282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   294,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   307,
    308,   309,   310,   311,   0,     312,   0,     313,   314,   315,   316,
    0,     317,   0,     318,   0,     0,     0,     319,   320,   321,   0,
    322,   323,   0,     324,   325,   0,     326,   327,   328,   329,   330,
    0,     331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,
    355,   356,   0,     0,     357,   358,   0,     359,   0,     0,     360,
    361,   362,   0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   0,     379,
    380,   381,   382,   0,     383,   384,   0,     385,   0,     386,   387,
    388,   389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     0,     396,   397,   0,     398,   0,     399,   400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   409,   410,   411,   412,
    585,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,
    442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   0,     458,   459,   460,   461,
    462,   0,     463,   464,   465,   466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   478,   0,     479,   480,
    0,     481,   0,     482,   483,   484,   485,   486,   0,     487,   488,
    0,     0,     489,   490,   491,   492,   493,   0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   503,   504,   505,
    0,     0,     506,   507,   508,   509,   510,   511,   512,   0,     513,
    0,     514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
    531,   532,   533,   534,   535,   536,   219,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   695,   229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   0,     236,   237,   238,   239,   240,   0,     241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     0,     0,     258,
    259,   260,   261,   0,     262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     0,     271,   272,   273,   0,     0,     0,
    0,     0,     0,     0,     274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   0,     0,     0,     319,   320,
    321,   0,     322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   330,   0,     331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     0,     357,   358,   0,     359,   0,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    0,     379,   380,   381,   382,   0,     383,   384,   0,     385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   0,     398,   0,     399,   400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   696,   0,     458,   459,
    460,   461,   462,   0,     463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   0,     482,   483,   484,   485,   486,   0,
    697,   488,   0,     0,     698,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   0,     514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   219,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   729,   229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   0,     236,   237,   238,   239,   240,   0,     241,
    242,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    250,   251,   252,   0,     253,   254,   255,   256,   257,   0,     0,
    0,     258,   259,   260,   261,   0,     262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     0,     271,   272,   273,   0,
    0,     0,     0,     0,     0,     0,     274,   275,   276,   277,   278,
    279,   280,   281,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   307,   308,   309,   310,   311,   0,     312,   0,
    313,   314,   315,   316,   0,     317,   0,     318,   0,     0,     0,
    319,   320,   321,   0,     322,   323,   0,     324,   325,   0,     326,
    327,   328,   329,   330,   0,     331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,
    0,     352,   353,   354,   355,   356,   0,     0,     357,   358,   0,
    359,   0,     0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   0,     379,   380,   381,   382,   0,     383,   384,   0,
    385,   0,     386,   387,   388,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   397,   0,     398,   0,
    399,   400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    409,   410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   730,   0,
    458,   459,   460,   461,   462,   0,     463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    478,   0,     479,   480,   0,     481,   0,     482,   483,   484,   485,
    486,   0,     731,   488,   0,     0,     732,   490,   491,   492,   493,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   0,     514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   526,
    527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   219,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     0,     0,     0,     0,     0,
    232,   233,   0,     234,   235,   0,     236,   237,   238,   239,   240,
    0,     241,   242,   0,     243,   244,   245,   246,   247,   0,     0,
    248,   249,   250,   251,   252,   0,     253,   254,   255,   256,   257,
    0,     0,     0,     258,   259,   260,   261,   0,     262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     0,     271,   272,
    273,   0,     0,     0,     0,     0,     0,     0,     274,   275,   276,
    277,   278,   279,   280,   281,   282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    294,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   307,   308,   309,   310,   311,   0,
    312,   0,     313,   314,   315,   316,   0,     317,   0,     318,   0,
    0,     0,     319,   320,   321,   0,     322,   323,   0,     324,   325,
    0,     326,   327,   328,   329,   330,   0,     331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,
    0,     351,   0,     352,   353,   354,   355,   356,   0,     0,     357,
    358,   0,     359,   0,     0,     360,   361,   362,   0,     0,     363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   0,     379,   380,   381,   382,   0,     383,
    384,   0,     385,   0,     386,   387,   388,   389,   390,   391,   0,
    392,   0,     735,   393,   394,   395,   0,     0,     396,   397,   0,
    398,   0,     399,   400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   409,   410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   0,     458,   459,   460,   461,   462,   0,     463,   464,   465,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   478,   0,     479,   480,   0,     481,   0,     482,   483,
    484,   485,   486,   0,     487,   488,   0,     0,     489,   490,   491,
    492,   493,   0,     494,   495,   496,   497,   498,   499,   500,   0,
    0,     501,   502,   503,   504,   505,   0,     0,     506,   507,   508,
    509,   510,   511,   512,   0,     513,   0,     514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   219,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   824,   229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   0,     236,   237,   238,
    239,   240,   0,     241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     0,     0,     258,   259,   260,   261,   0,     262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     0,
    271,   272,   273,   0,     0,     0,     0,     0,     0,     0,     274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   0,     0,     0,     319,   320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   825,   0,     331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    0,     357,   358,   0,     359,   0,     0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   0,     379,   380,   381,   382,
    0,     383,   384,   0,     385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   0,     398,   0,     399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   0,     458,   459,   460,   461,   462,   0,     463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   0,     481,   0,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   0,     514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   219,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   963,   229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   0,     236,
    237,   238,   239,   240,   0,     241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     0,     0,     258,   259,   260,   261,
    0,     262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     0,     271,   272,   273,   0,     0,     0,     0,     0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   0,     0,     0,     319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   330,   0,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     0,     357,   358,   0,     359,   0,     0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   0,     379,   380,
    381,   382,   0,     383,   384,   0,     385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   0,     398,   0,     399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   0,     458,   459,   460,   461,   462,
    0,     463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   0,     482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   0,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   219,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   1225,  229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    0,     236,   237,   238,   239,   240,   0,     241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     0,     0,     258,   259,
    260,   261,   0,     262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     0,     271,   272,   273,   0,     0,     0,     0,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   0,     0,     0,     319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    330,   0,     331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     0,     357,   358,   0,     359,   0,     0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   0,
    379,   380,   381,   382,   0,     383,   384,   0,     385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   0,     398,   0,     399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   0,     463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   0,     482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   0,     514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   219,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   1236,  236,   237,   238,   239,   240,   0,     241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     715,   249,   250,
    251,   1237,  0,     253,   254,   255,   256,   257,   0,     0,     0,
    258,   259,   260,   261,   0,     262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     0,     271,   272,   273,   0,     0,
    0,     0,     0,     0,     0,     274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   0,     312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   0,     0,     0,     319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   330,   0,     331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   0,     359,
    0,     0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   718,
    378,   0,     379,   380,   381,   382,   0,     383,   384,   0,     385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     0,     396,   397,   0,     398,   0,     399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     719,   442,   443,   444,   445,   446,   447,   720,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   1229,  0,     458,
    459,   460,   461,   462,   0,     463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   0,     482,   483,   484,   485,   486,
    0,     722,   488,   0,     0,     723,   490,   491,   492,   493,   0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   0,     514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   724,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   219,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   0,     236,   237,   238,   239,   240,   0,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    0,     0,     258,   259,   260,   261,   0,     262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     0,     271,   272,   273,
    0,     0,     0,     0,     0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   0,     0,
    0,     319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   1344,  0,     331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     0,     357,   358,
    0,     359,   0,     0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   0,     379,   380,   381,   382,   0,     383,   384,
    0,     385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     735,   393,   394,   395,   0,     0,     396,   397,   0,     398,
    0,     399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   460,   461,   462,   0,     463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   0,     482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   0,     514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    219,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   1395,  229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     236,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   0,     253,   254,   255,   256,
    257,   0,     0,     0,     258,   259,   260,   261,   0,     262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   314,   315,   316,   0,     317,   0,     318,
    0,     0,     0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   1396,  0,     331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   0,     379,   380,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   0,     482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   219,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   695,   229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   0,     236,   237,
    238,   239,   240,   0,     241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   250,   251,   252,   0,     253,   254,
    255,   256,   257,   0,     0,     0,     258,   259,   260,   261,   0,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    0,     271,   272,   273,   0,     0,     0,     0,     0,     0,     0,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    0,     318,   0,     0,     0,     319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   330,   0,     331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,
    0,     0,     357,   358,   0,     359,   0,     0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   0,     379,   380,   381,
    382,   0,     383,   384,   0,     385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   0,     398,   0,     399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   0,     458,   459,   460,   461,   462,   0,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   0,     481,
    0,     482,   483,   484,   485,   486,   0,     487,   488,   0,     0,
    489,   490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   511,   512,   0,     513,   0,     514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   219,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   0,
    236,   237,   238,   239,   240,   0,     241,   242,   0,     243,   244,
    245,   246,   247,   0,     0,     248,   249,   250,   251,   252,   0,
    253,   254,   255,   256,   257,   0,     0,     0,     258,   259,   260,
    261,   0,     262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     0,     271,   272,   273,   0,     0,     0,     0,     0,
    0,     0,     274,   275,   276,   277,   278,   279,   280,   281,   282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   294,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   307,
    308,   309,   310,   311,   0,     312,   0,     313,   314,   315,   316,
    0,     317,   0,     318,   0,     0,     0,     319,   320,   2601,  0,
    322,   323,   0,     324,   325,   0,     326,   327,   328,   329,   330,
    0,     331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,
    355,   356,   0,     0,     357,   358,   0,     359,   0,     0,     360,
    361,   2602,  0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   0,     379,
    380,   381,   382,   0,     383,   384,   0,     385,   0,     386,   387,
    388,   389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     0,     396,   397,   0,     398,   0,     399,   400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   409,   410,   411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,
    442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   0,     458,   459,   460,   461,
    462,   0,     463,   464,   465,   466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   478,   0,     479,   480,
    2603,  481,   0,     482,   2604,  484,   2605,  486,   0,     487,   488,
    0,     0,     489,   490,   491,   492,   493,   0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   2606,  504,   505,
    0,     0,     506,   507,   508,   509,   510,   511,   512,   0,     513,
    0,     514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
    531,   532,   533,   534,   535,   536,   219,   0,     593,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   0,     236,   237,   238,   239,   240,   0,     241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     0,     0,     258,
    259,   260,   261,   0,     262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     0,     271,   272,   273,   0,     0,     0,
    0,     0,     0,     0,     274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   0,     0,     0,     319,   320,
    321,   0,     322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   330,   0,     331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     0,     357,   358,   0,     359,   0,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    0,     379,   380,   381,   382,   0,     383,   384,   0,     385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   0,     398,   0,     399,   400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   0,     458,   459,
    460,   461,   462,   0,     463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   0,     482,   483,   484,   485,   486,   0,
    487,   488,   0,     0,     489,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   0,     514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   219,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     3778,  0,     232,   233,
    0,     234,   235,   0,     236,   237,   238,   239,   240,   0,     241,
    242,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    250,   251,   252,   0,     253,   254,   255,   256,   257,   0,     0,
    0,     258,   259,   260,   261,   0,     262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     0,     271,   272,   273,   0,
    0,     0,     0,     0,     0,     0,     274,   275,   276,   277,   278,
    279,   280,   281,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   307,   308,   309,   310,   311,   0,     312,   0,
    313,   314,   315,   316,   0,     317,   0,     318,   0,     0,     0,
    319,   320,   321,   0,     322,   323,   0,     324,   325,   0,     326,
    327,   328,   329,   330,   0,     331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,
    0,     352,   353,   354,   355,   356,   0,     0,     357,   358,   0,
    359,   0,     0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   0,     379,   380,   381,   382,   0,     383,   384,   0,
    385,   0,     386,   387,   388,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   397,   0,     398,   0,
    399,   400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    409,   410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   0,
    458,   459,   460,   461,   462,   0,     463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    478,   0,     479,   480,   0,     481,   0,     482,   483,   484,   485,
    486,   0,     487,   488,   0,     0,     489,   490,   491,   492,   493,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   0,     514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   526,
    527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   219,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     0,     0,     0,     3792,  0,
    232,   233,   0,     234,   235,   0,     236,   237,   238,   239,   240,
    0,     241,   242,   0,     243,   244,   245,   246,   247,   0,     0,
    248,   249,   250,   251,   252,   0,     253,   254,   255,   256,   257,
    0,     0,     0,     258,   259,   260,   261,   0,     262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     0,     271,   272,
    273,   0,     0,     0,     0,     0,     0,     0,     274,   275,   276,
    277,   278,   279,   280,   281,   282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    294,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   307,   308,   309,   310,   311,   0,
    312,   0,     313,   314,   315,   316,   0,     317,   0,     318,   0,
    0,     0,     319,   320,   321,   0,     322,   323,   0,     324,   325,
    0,     326,   327,   328,   329,   330,   0,     331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,
    0,     351,   0,     352,   353,   354,   355,   356,   0,     0,     357,
    358,   0,     359,   0,     0,     360,   361,   362,   0,     0,     363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   0,     379,   380,   381,   382,   0,     383,
    384,   0,     385,   0,     386,   387,   388,   389,   390,   391,   0,
    392,   0,     0,     393,   394,   395,   0,     0,     396,   397,   0,
    398,   0,     399,   400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   409,   410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   0,     458,   459,   460,   461,   462,   0,     463,   464,   465,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   478,   0,     479,   480,   0,     481,   0,     482,   483,
    484,   485,   486,   0,     487,   488,   0,     0,     489,   490,   491,
    492,   493,   0,     494,   495,   496,   497,   498,   499,   500,   0,
    0,     501,   502,   503,   504,   505,   0,     0,     506,   507,   508,
    509,   510,   511,   512,   0,     513,   0,     514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   219,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   0,     236,   237,   238,
    239,   240,   0,     241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     0,     0,     258,   259,   260,   261,   0,     262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     0,
    271,   272,   273,   0,     0,     0,     0,     0,     0,     0,     274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   0,     0,     0,     319,   320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   330,   0,     331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    0,     357,   358,   0,     359,   0,     0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   0,     379,   380,   381,   382,
    0,     383,   384,   0,     385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   0,     398,   0,     399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   0,     458,   459,   460,   461,   462,   0,     463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   0,     481,   0,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     4457,  506,
    507,   508,   509,   510,   511,   512,   0,     513,   0,     514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   219,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   0,     236,
    237,   238,   239,   240,   0,     241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     0,     0,     258,   259,   260,   261,
    0,     262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     0,     271,   272,   273,   0,     0,     0,     0,     0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   0,     0,     0,     319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   330,   0,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     0,     357,   358,   0,     359,   0,     0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   0,     379,   380,
    381,   382,   0,     383,   384,   0,     385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   0,     398,   0,     399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   0,     458,   459,   460,   461,   462,
    0,     463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   0,     482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   0,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   219,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    0,     236,   237,   238,   239,   240,   0,     241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     0,     0,     258,   259,
    260,   261,   0,     262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     0,     271,   272,   273,   0,     0,     0,     0,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   0,     0,     0,     319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    330,   0,     331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     0,     357,   358,   0,     359,   0,     0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   0,
    379,   380,   381,   382,   0,     383,   384,   0,     385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   0,     398,   0,     399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   0,     463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   0,     482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     681,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   0,     514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   219,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   0,     236,   237,   238,   239,   240,   0,     241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   250,
    251,   252,   0,     253,   254,   255,   256,   257,   0,     0,     0,
    258,   259,   260,   261,   0,     262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     0,     271,   272,   273,   0,     0,
    0,     0,     0,     0,     0,     274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   0,     312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   0,     0,     0,     319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   330,   0,     331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   0,     359,
    0,     0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   0,     379,   380,   381,   382,   0,     383,   384,   0,     385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     0,     396,   397,   0,     398,   0,     399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   693,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   0,     458,
    459,   460,   461,   462,   0,     463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   0,     482,   483,   484,   485,   486,
    0,     487,   488,   0,     0,     489,   490,   491,   492,   493,   0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   0,     514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   219,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   0,     236,   237,   238,   239,   240,   0,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     715,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    0,     0,     258,   259,   260,   261,   0,     262,   263,   264,   0,
    716,   266,   267,   268,   269,   270,   0,     0,     271,   272,   273,
    0,     0,     0,     0,     0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   0,     0,
    0,     319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   330,   0,     331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     0,     357,   358,
    0,     359,   0,     0,     360,   361,   717,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   718,   378,   0,     379,   380,   381,   382,   0,     383,   384,
    0,     385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   397,   0,     398,
    0,     399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     719,   442,   443,   444,   445,   446,   447,
    720,   449,   450,   451,   452,   0,     453,   454,   455,   456,   721,
    0,     458,   459,   460,   461,   462,   0,     463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   0,     482,   483,   484,
    485,   486,   0,     722,   488,   0,     0,     723,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   0,     514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   724,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    219,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     236,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   0,     253,   254,   255,   256,
    257,   0,     0,     0,     258,   259,   260,   261,   0,     262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   314,   315,   316,   0,     317,   0,     318,
    0,     0,     0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   330,   0,     331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   0,     379,   380,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   747,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   0,     482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   219,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   0,     236,   237,
    238,   239,   240,   0,     241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   250,   251,   252,   0,     253,   254,
    255,   256,   257,   0,     0,     0,     258,   259,   260,   261,   0,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    0,     271,   272,   273,   0,     0,     0,     0,     0,     0,     0,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    0,     318,   0,     0,     0,     319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   848,   0,     331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,
    0,     0,     357,   358,   0,     359,   0,     0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   0,     379,   380,   381,
    382,   0,     383,   384,   0,     385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   0,     398,   0,     399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   0,     458,   459,   460,   461,   462,   0,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   0,     481,
    0,     482,   483,   484,   485,   486,   0,     487,   488,   0,     0,
    489,   490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   511,   512,   0,     513,   0,     514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   219,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   0,
    236,   237,   238,   239,   240,   0,     241,   242,   0,     243,   244,
    245,   246,   247,   0,     0,     248,   249,   250,   251,   252,   0,
    253,   254,   255,   256,   257,   0,     0,     0,     258,   259,   260,
    261,   0,     262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     0,     271,   272,   273,   0,     0,     0,     0,     0,
    0,     0,     274,   275,   276,   277,   278,   279,   280,   281,   282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   294,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   307,
    308,   309,   310,   311,   0,     312,   0,     313,   314,   315,   316,
    0,     317,   0,     318,   0,     0,     0,     319,   320,   321,   0,
    322,   323,   0,     324,   325,   0,     326,   327,   328,   329,   855,
    0,     331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,
    355,   356,   0,     0,     357,   358,   0,     359,   0,     0,     360,
    361,   362,   0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   0,     379,
    380,   381,   382,   0,     383,   384,   0,     385,   0,     386,   387,
    388,   389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     0,     396,   397,   0,     398,   0,     399,   400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   409,   410,   411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,
    442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   0,     458,   459,   460,   461,
    462,   0,     463,   464,   465,   466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   478,   0,     479,   480,
    0,     481,   0,     482,   483,   484,   485,   486,   0,     487,   488,
    0,     0,     489,   490,   491,   492,   493,   0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   503,   504,   505,
    0,     0,     506,   507,   508,   509,   510,   511,   512,   0,     513,
    0,     514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
    531,   532,   533,   534,   535,   536,   219,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   0,     236,   237,   238,   239,   240,   0,     241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     0,     0,     258,
    259,   260,   261,   0,     262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     0,     271,   272,   273,   0,     0,     0,
    0,     0,     0,     0,     274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   0,     0,     0,     319,   320,
    321,   0,     322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   870,   0,     331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     0,     357,   358,   0,     359,   0,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    0,     379,   380,   381,   382,   0,     383,   384,   0,     385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   0,     398,   0,     399,   400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   0,     458,   459,
    460,   461,   462,   0,     463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   0,     482,   483,   484,   485,   486,   0,
    487,   488,   0,     0,     489,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   0,     514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   219,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   0,     236,   237,   238,   239,   240,   0,     241,
    242,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    250,   251,   252,   0,     253,   254,   255,   256,   257,   0,     0,
    0,     258,   259,   260,   261,   0,     262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     0,     271,   272,   273,   0,
    0,     0,     0,     0,     0,     0,     274,   275,   276,   277,   278,
    279,   280,   281,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   307,   308,   309,   310,   311,   0,     312,   0,
    313,   314,   315,   316,   0,     317,   0,     318,   0,     0,     0,
    319,   320,   321,   0,     322,   323,   0,     324,   325,   0,     326,
    327,   328,   329,   925,   0,     331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,
    0,     352,   353,   354,   355,   356,   0,     0,     357,   358,   0,
    359,   0,     0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   0,     379,   380,   381,   382,   0,     383,   384,   0,
    385,   0,     386,   387,   388,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   397,   0,     398,   0,
    399,   400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    409,   410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   0,
    458,   459,   460,   461,   462,   0,     463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    478,   0,     479,   480,   0,     481,   0,     482,   483,   484,   485,
    486,   0,     487,   488,   0,     0,     489,   490,   491,   492,   493,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   0,     514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   526,
    527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   219,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     0,     0,     0,     0,     0,
    232,   233,   0,     234,   235,   0,     236,   237,   238,   239,   240,
    0,     241,   242,   0,     243,   244,   245,   246,   247,   0,     0,
    248,   249,   250,   251,   252,   0,     253,   254,   255,   256,   257,
    0,     0,     0,     258,   259,   260,   261,   0,     262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     0,     271,   272,
    273,   0,     0,     0,     0,     0,     0,     0,     274,   275,   276,
    277,   278,   279,   280,   281,   282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    294,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   307,   308,   309,   310,   311,   0,
    312,   0,     313,   314,   315,   316,   0,     317,   0,     318,   0,
    0,     0,     319,   320,   321,   0,     322,   323,   0,     324,   325,
    0,     326,   327,   328,   329,   941,   0,     331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,
    0,     351,   0,     352,   353,   354,   355,   356,   0,     0,     357,
    358,   0,     359,   0,     0,     360,   361,   362,   0,     0,     363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   0,     379,   380,   381,   382,   0,     383,
    384,   0,     385,   0,     386,   387,   388,   389,   390,   391,   0,
    392,   0,     0,     393,   394,   395,   0,     0,     396,   397,   0,
    398,   0,     399,   400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   409,   410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   0,     458,   459,   460,   461,   462,   0,     463,   464,   465,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   478,   0,     479,   480,   0,     481,   0,     482,   483,
    484,   485,   486,   0,     487,   488,   0,     0,     489,   490,   491,
    492,   493,   0,     494,   495,   496,   497,   498,   499,   500,   0,
    0,     501,   502,   503,   504,   505,   0,     0,     506,   507,   508,
    509,   510,   511,   512,   0,     513,   0,     514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   219,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   0,     236,   237,   238,
    239,   240,   0,     241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     0,     0,     258,   259,   260,   261,   0,     262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     0,
    271,   272,   273,   0,     0,     0,     0,     0,     0,     0,     274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   0,     0,     0,     319,   320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   975,   0,     331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    0,     357,   358,   0,     359,   0,     0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   0,     379,   380,   381,   382,
    0,     383,   384,   0,     385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   0,     398,   0,     399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   0,     458,   459,   460,   461,   462,   0,     463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   0,     481,   0,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   0,     514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   219,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   0,     236,
    237,   238,   239,   240,   0,     241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     0,     0,     258,   259,   260,   261,
    0,     262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     0,     271,   272,   273,   0,     0,     0,     0,     0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   0,     0,     0,     319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   1031,  0,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     0,     357,   358,   0,     359,   0,     0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   0,     379,   380,
    381,   382,   0,     383,   384,   0,     385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   0,     398,   0,     399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   0,     458,   459,   460,   461,   462,
    0,     463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   0,     482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   0,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   219,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    0,     236,   237,   238,   239,   240,   0,     241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     0,     0,     258,   259,
    260,   261,   0,     262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     0,     271,   272,   273,   0,     0,     0,     0,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   0,     0,     0,     319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    1035,  0,     331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     0,     357,   358,   0,     359,   0,     0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   0,
    379,   380,   381,   382,   0,     383,   384,   0,     385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   0,     398,   0,     399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   0,     463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   0,     482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   0,     514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   219,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   0,     236,   237,   238,   239,   240,   0,     241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   250,
    251,   252,   0,     253,   254,   255,   256,   257,   0,     0,     0,
    258,   259,   260,   261,   0,     262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     0,     271,   272,   273,   0,     0,
    0,     0,     0,     0,     0,     274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   0,     312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   0,     0,     0,     319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   1037,  0,     331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   0,     359,
    0,     0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   0,     379,   380,   381,   382,   0,     383,   384,   0,     385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     0,     396,   397,   0,     398,   0,     399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   0,     458,
    459,   460,   461,   462,   0,     463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   0,     482,   483,   484,   485,   486,
    0,     487,   488,   0,     0,     489,   490,   491,   492,   493,   0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   0,     514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   219,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   0,     236,   237,   238,   239,   240,   0,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    0,     0,     258,   259,   260,   261,   0,     262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     0,     271,   272,   273,
    0,     0,     0,     0,     0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   0,     0,
    0,     319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   1039,  0,     331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     0,     357,   358,
    0,     359,   0,     0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   0,     379,   380,   381,   382,   0,     383,   384,
    0,     385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   397,   0,     398,
    0,     399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   460,   461,   462,   0,     463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   0,     482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   0,     514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    219,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     236,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   0,     253,   254,   255,   256,
    257,   0,     0,     0,     258,   259,   260,   261,   0,     262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   314,   315,   316,   0,     317,   0,     318,
    0,     0,     0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   1043,  0,     331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   0,     379,   380,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   0,     482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   219,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   0,     236,   237,
    238,   239,   240,   0,     241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   250,   251,   252,   0,     253,   254,
    255,   256,   257,   0,     0,     0,     258,   259,   260,   261,   0,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    0,     271,   272,   273,   0,     0,     0,     0,     0,     0,     0,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    0,     318,   0,     0,     0,     319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   1051,  0,     331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,
    0,     0,     357,   358,   0,     359,   0,     0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   0,     379,   380,   381,
    382,   0,     383,   384,   0,     385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   0,     398,   0,     399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   0,     458,   459,   460,   461,   462,   0,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   0,     481,
    0,     482,   483,   484,   485,   486,   0,     487,   488,   0,     0,
    489,   490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   511,   512,   0,     513,   0,     514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   219,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   0,
    236,   237,   238,   239,   240,   0,     241,   242,   0,     243,   244,
    245,   246,   247,   0,     0,     715,   249,   250,   251,   252,   0,
    253,   254,   255,   256,   257,   0,     0,     0,     258,   259,   260,
    261,   0,     262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     0,     271,   272,   273,   0,     0,     0,     0,     0,
    0,     0,     274,   275,   276,   277,   278,   279,   280,   281,   282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   294,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   307,
    308,   309,   310,   311,   0,     312,   0,     313,   314,   315,   316,
    0,     317,   0,     318,   0,     0,     0,     319,   320,   321,   0,
    322,   323,   0,     324,   325,   0,     326,   327,   328,   329,   330,
    0,     331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,
    355,   356,   0,     0,     357,   358,   0,     359,   0,     0,     360,
    361,   362,   0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   718,   378,   0,     379,
    380,   381,   382,   0,     383,   384,   0,     385,   0,     386,   387,
    388,   389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     0,     396,   397,   0,     398,   0,     399,   400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   409,   410,   411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     719,
    442,   443,   444,   445,   446,   447,   720,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   1229,  0,     458,   459,   460,   461,
    462,   0,     463,   464,   465,   466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   478,   0,     479,   480,
    0,     481,   0,     482,   483,   484,   485,   486,   0,     722,   488,
    0,     0,     723,   490,   491,   492,   493,   0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   503,   504,   505,
    0,     0,     506,   507,   508,   509,   510,   511,   512,   0,     513,
    0,     514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   724,   525,   526,   527,   528,   529,   530,
    531,   532,   533,   534,   535,   536,   219,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   0,     236,   237,   238,   239,   240,   0,     241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     0,     0,     258,
    259,   260,   261,   0,     262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     0,     271,   272,   273,   0,     0,     0,
    0,     0,     0,     0,     274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   0,     0,     0,     319,   320,
    321,   0,     322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   1519,  0,     331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     0,     357,   358,   0,     359,   0,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    0,     379,   380,   381,   382,   0,     383,   384,   0,     385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   0,     398,   0,     399,   400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   0,     458,   459,
    460,   461,   462,   0,     463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   0,     482,   483,   484,   485,   486,   0,
    487,   488,   0,     0,     489,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   0,     514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   219,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   0,     236,   237,   238,   239,   240,   0,     241,
    242,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    250,   251,   252,   0,     253,   254,   255,   256,   257,   0,     0,
    0,     258,   259,   260,   261,   0,     262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     0,     271,   272,   273,   0,
    0,     0,     0,     0,     0,     0,     274,   275,   276,   277,   278,
    279,   280,   281,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   307,   308,   309,   310,   311,   0,     312,   0,
    313,   314,   315,   316,   0,     317,   0,     318,   0,     0,     0,
    319,   320,   321,   0,     322,   323,   0,     324,   325,   0,     326,
    327,   328,   329,   1549,  0,     331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,
    0,     352,   353,   354,   355,   356,   0,     0,     357,   358,   0,
    359,   0,     0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   0,     379,   380,   381,   382,   0,     383,   384,   0,
    385,   0,     386,   387,   388,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   397,   0,     398,   0,
    399,   400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    409,   410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   0,
    458,   459,   460,   461,   462,   0,     463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    478,   0,     479,   480,   0,     481,   0,     482,   483,   484,   485,
    486,   0,     487,   488,   0,     0,     489,   490,   491,   492,   493,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   0,     514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   526,
    527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   219,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     0,     0,     0,     0,     0,
    232,   233,   0,     234,   235,   0,     236,   237,   238,   239,   240,
    0,     241,   242,   0,     243,   244,   245,   246,   247,   0,     0,
    248,   249,   250,   251,   252,   0,     253,   254,   255,   256,   257,
    0,     0,     0,     258,   259,   260,   261,   0,     262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     0,     271,   272,
    273,   0,     0,     0,     0,     0,     0,     0,     274,   275,   276,
    277,   278,   279,   280,   281,   282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    294,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   307,   308,   309,   310,   311,   0,
    312,   0,     313,   314,   315,   316,   0,     317,   0,     318,   0,
    0,     0,     319,   320,   321,   0,     322,   323,   0,     324,   325,
    0,     326,   327,   328,   329,   1551,  0,     331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,
    0,     351,   0,     352,   353,   354,   355,   356,   0,     0,     357,
    358,   0,     359,   0,     0,     360,   361,   362,   0,     0,     363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   0,     379,   380,   381,   382,   0,     383,
    384,   0,     385,   0,     386,   387,   388,   389,   390,   391,   0,
    392,   0,     0,     393,   394,   395,   0,     0,     396,   397,   0,
    398,   0,     399,   400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   409,   410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   0,     458,   459,   460,   461,   462,   0,     463,   464,   465,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   478,   0,     479,   480,   0,     481,   0,     482,   483,
    484,   485,   486,   0,     487,   488,   0,     0,     489,   490,   491,
    492,   493,   0,     494,   495,   496,   497,   498,   499,   500,   0,
    0,     501,   502,   503,   504,   505,   0,     0,     506,   507,   508,
    509,   510,   511,   512,   0,     513,   0,     514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   219,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   0,     236,   237,   238,
    239,   240,   0,     241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     0,     0,     258,   259,   260,   261,   0,     262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     0,
    271,   272,   273,   0,     0,     0,     0,     0,     0,     0,     274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   0,     0,     0,     319,   320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   1621,  0,     331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    0,     357,   358,   0,     359,   0,     0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   0,     379,   380,   381,   382,
    0,     383,   384,   0,     385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   0,     398,   0,     399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   0,     458,   459,   460,   461,   462,   0,     463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   0,     481,   0,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   0,     514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   219,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   0,     236,
    237,   238,   239,   240,   0,     241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     0,     0,     258,   259,   260,   261,
    0,     262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     0,     271,   272,   273,   0,     0,     0,     0,     0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   0,     0,     0,     319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   1623,  0,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     0,     357,   358,   0,     359,   0,     0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   0,     379,   380,
    381,   382,   0,     383,   384,   0,     385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   0,     398,   0,     399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   0,     458,   459,   460,   461,   462,
    0,     463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   0,     482,   483,   484,   485,   486,   0,     487,   488,   0,
    0,     489,   490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   0,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   219,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    0,     236,   237,   238,   239,   240,   0,     241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     0,     0,     258,   259,
    260,   261,   0,     262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     0,     271,   272,   273,   0,     0,     0,     0,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   0,     0,     0,     319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    1625,  0,     331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     0,     357,   358,   0,     359,   0,     0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   0,
    379,   380,   381,   382,   0,     383,   384,   0,     385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   0,     398,   0,     399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   0,     463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   0,     482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   0,     514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   219,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   0,     236,   237,   238,   239,   240,   0,     241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   250,
    251,   252,   0,     253,   254,   255,   256,   257,   0,     0,     0,
    258,   259,   260,   261,   0,     262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     0,     271,   272,   273,   0,     0,
    0,     0,     0,     0,     0,     274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   0,     312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   0,     0,     0,     319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   330,   0,     331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   0,     359,
    0,     0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   0,     379,   380,   381,   382,   0,     383,   384,   0,     385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     0,     396,   397,   0,     398,   0,     399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   1721,  448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   0,     458,
    459,   460,   461,   462,   0,     463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   0,     482,   483,   484,   485,   486,
    0,     487,   488,   0,     0,     489,   490,   491,   492,   493,   0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   0,     514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   219,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     1981,  0,     232,
    233,   0,     234,   235,   0,     236,   237,   238,   239,   240,   0,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    0,     0,     258,   259,   260,   261,   0,     262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     0,     271,   272,   273,
    0,     0,     0,     0,     0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   0,     0,
    0,     319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   330,   0,     331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     0,     357,   358,
    0,     359,   0,     0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   0,     379,   380,   381,   382,   0,     383,   384,
    0,     385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   397,   0,     398,
    0,     399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     0,     459,   460,   461,   462,   0,     463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   0,     482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   0,     514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    219,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     236,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     715,   249,   250,   251,   252,   0,     253,   254,   255,   256,
    257,   0,     0,     0,     258,   259,   260,   261,   0,     262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   314,   315,   316,   0,     317,   0,     318,
    0,     0,     0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   330,   0,     331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   718,   378,   0,     379,   380,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     719,   442,   443,   444,   445,
    446,   447,   720,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   1229,  0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   0,     2013,
    483,   484,   485,   486,   0,     722,   488,   0,     0,     723,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    724,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   219,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   0,     236,   237,
    238,   239,   240,   0,     241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     715,   249,   250,   251,   252,   0,     253,   254,
    255,   256,   257,   0,     0,     0,     258,   259,   260,   261,   0,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    0,     271,   272,   273,   0,     0,     0,     0,     0,     0,     0,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    0,     318,   0,     0,     0,     319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   330,   0,     331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,
    0,     0,     357,   358,   0,     359,   0,     0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   718,   378,   0,     379,   380,   381,
    382,   0,     383,   384,   0,     385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   0,     398,   0,     399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     719,   442,   443,
    444,   445,   446,   447,   2085,  449,   450,   451,   452,   0,     453,
    454,   455,   456,   2086,  0,     458,   459,   460,   461,   462,   0,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   0,     481,
    0,     482,   483,   484,   485,   486,   0,     722,   488,   0,     0,
    2087,  490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   511,   512,   0,     513,   0,     514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   724,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   219,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   0,
    236,   237,   238,   239,   240,   0,     241,   242,   0,     243,   244,
    245,   246,   247,   0,     0,     248,   249,   250,   251,   252,   0,
    253,   254,   255,   256,   257,   0,     0,     0,     258,   259,   260,
    261,   0,     262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     0,     271,   272,   273,   0,     0,     0,     0,     0,
    0,     0,     274,   275,   276,   277,   278,   279,   280,   281,   282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   294,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   307,
    308,   309,   310,   311,   0,     312,   0,     313,   314,   315,   316,
    0,     317,   0,     318,   0,     0,     0,     319,   320,   321,   0,
    322,   323,   0,     324,   325,   0,     326,   327,   328,   329,   2320,
    0,     331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,
    355,   356,   0,     0,     357,   358,   0,     359,   0,     0,     360,
    361,   362,   0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   0,     379,
    380,   381,   382,   0,     383,   384,   0,     385,   0,     386,   387,
    388,   389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     0,     396,   397,   0,     398,   0,     399,   400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   409,   410,   411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,
    442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   0,     458,   459,   460,   461,
    462,   0,     463,   464,   465,   466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   478,   0,     479,   480,
    0,     481,   0,     482,   483,   484,   485,   486,   0,     487,   488,
    0,     0,     489,   490,   491,   492,   493,   0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   503,   504,   505,
    0,     0,     506,   507,   508,   509,   510,   511,   512,   0,     513,
    0,     514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
    531,   532,   533,   534,   535,   536,   219,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   0,     236,   237,   238,   239,   240,   0,     241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     0,     0,     258,
    259,   260,   261,   0,     262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     0,     271,   272,   273,   0,     0,     0,
    0,     0,     0,     0,     274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   0,     0,     0,     319,   320,
    321,   0,     322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   2324,  0,     331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     0,     357,   358,   0,     359,   0,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    0,     379,   380,   381,   382,   0,     383,   384,   0,     385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   0,     398,   0,     399,   400,
    401,   402,   403,   404,   405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   0,     458,   459,
    460,   461,   462,   0,     463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   0,     482,   483,   484,   485,   486,   0,
    487,   488,   0,     0,     489,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   0,     514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   219,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   0,     236,   237,   238,   239,   240,   0,     241,
    242,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    250,   251,   252,   0,     253,   254,   255,   256,   257,   0,     0,
    0,     258,   259,   260,   261,   0,     262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     0,     271,   272,   273,   0,
    0,     0,     0,     0,     0,     0,     274,   275,   276,   277,   278,
    279,   280,   281,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   294,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   307,   308,   309,   310,   311,   0,     312,   0,
    313,   314,   315,   316,   0,     317,   0,     318,   0,     0,     0,
    319,   320,   321,   0,     322,   323,   0,     324,   325,   0,     326,
    327,   328,   329,   2364,  0,     331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,
    0,     352,   353,   354,   355,   356,   0,     0,     357,   358,   0,
    359,   0,     0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   0,     379,   380,   381,   382,   0,     383,   384,   0,
    385,   0,     386,   387,   388,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   397,   0,     398,   0,
    399,   400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    409,   410,   411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   0,
    458,   459,   460,   461,   462,   0,     463,   464,   465,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    478,   0,     479,   480,   0,     481,   0,     482,   483,   484,   485,
    486,   0,     487,   488,   0,     0,     489,   490,   491,   492,   493,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    511,   512,   0,     513,   0,     514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   525,   526,
    527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   219,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     0,     0,     0,     0,     0,
    232,   233,   0,     234,   235,   0,     236,   237,   238,   239,   240,
    0,     241,   242,   0,     243,   244,   245,   246,   247,   0,     0,
    248,   249,   250,   251,   252,   0,     253,   254,   255,   256,   257,
    0,     0,     0,     258,   259,   260,   261,   0,     262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     0,     271,   272,
    273,   0,     0,     0,     0,     0,     0,     0,     274,   275,   276,
    277,   278,   279,   280,   281,   282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    294,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   307,   308,   309,   310,   311,   0,
    312,   0,     313,   314,   315,   316,   0,     317,   0,     318,   0,
    0,     0,     319,   320,   321,   0,     322,   323,   0,     324,   325,
    0,     326,   327,   328,   329,   2399,  0,     331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,
    0,     351,   0,     352,   353,   354,   355,   356,   0,     0,     357,
    358,   0,     359,   0,     0,     360,   361,   362,   0,     0,     363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   0,     379,   380,   381,   382,   0,     383,
    384,   0,     385,   0,     386,   387,   388,   389,   390,   391,   0,
    392,   0,     0,     393,   394,   395,   0,     0,     396,   397,   0,
    398,   0,     399,   400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   409,   410,   411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   0,     458,   459,   460,   461,   462,   0,     463,   464,   465,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   478,   0,     479,   480,   0,     481,   0,     482,   483,
    484,   485,   486,   0,     487,   488,   0,     0,     489,   490,   491,
    492,   493,   0,     494,   495,   496,   497,   498,   499,   500,   0,
    0,     501,   502,   503,   504,   505,   0,     0,     506,   507,   508,
    509,   510,   511,   512,   0,     513,   0,     514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   219,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   0,     236,   237,   238,
    239,   240,   0,     241,   242,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   250,   251,   252,   0,     253,   254,   255,
    256,   257,   0,     0,     0,     258,   259,   260,   261,   0,     262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     0,
    271,   272,   273,   0,     0,     0,     0,     0,     0,     0,     274,
    275,   276,   277,   278,   279,   280,   281,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   294,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   307,   308,   309,   310,
    311,   0,     312,   0,     313,   314,   315,   316,   0,     317,   0,
    318,   0,     0,     0,     319,   320,   321,   0,     322,   323,   0,
    324,   325,   0,     326,   327,   328,   329,   2722,  0,     331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    0,     357,   358,   0,     359,   0,     0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   0,     379,   380,   381,   382,
    0,     383,   384,   0,     385,   0,     386,   387,   388,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    397,   0,     398,   0,     399,   400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   409,   410,   411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   0,     458,   459,   460,   461,   462,   0,     463,
    464,   465,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   478,   0,     479,   480,   0,     481,   0,
    482,   483,   484,   485,   486,   0,     487,   488,   0,     0,     489,
    490,   491,   492,   493,   0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   511,   512,   0,     513,   0,     514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   219,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   0,     236,
    237,   238,   239,   240,   0,     241,   242,   0,     243,   244,   245,
    246,   247,   0,     0,     715,   249,   250,   251,   252,   0,     253,
    254,   255,   256,   257,   0,     0,     0,     258,   259,   260,   261,
    0,     262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     0,     271,   272,   273,   0,     0,     0,     0,     0,     0,
    0,     274,   275,   276,   277,   278,   279,   280,   281,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   294,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   307,   308,
    309,   310,   311,   0,     312,   0,     313,   314,   315,   316,   0,
    317,   0,     318,   0,     0,     0,     319,   320,   321,   0,     322,
    323,   0,     324,   325,   0,     326,   327,   328,   329,   330,   0,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,
    349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     0,     357,   358,   0,     359,   0,     0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   718,   378,   0,     379,   380,
    381,   382,   0,     383,   384,   0,     385,   0,     386,   387,   388,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   397,   0,     398,   0,     399,   400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   409,   410,   411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   0,     719,   442,
    443,   444,   445,   446,   447,   720,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   2086,  0,     458,   459,   460,   461,   462,
    0,     463,   464,   465,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   478,   0,     479,   480,   0,
    481,   0,     482,   483,   484,   485,   486,   0,     722,   488,   0,
    0,     2087,  490,   491,   492,   493,   0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   511,   512,   0,     513,   0,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   724,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   219,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    0,     236,   237,   238,   239,   240,   0,     241,   242,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   250,   251,   252,
    0,     253,   254,   255,   256,   257,   0,     0,     0,     258,   259,
    260,   261,   0,     262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     0,     271,   272,   273,   0,     0,     0,     0,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   280,   281,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   294,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    307,   308,   309,   310,   311,   0,     312,   0,     313,   314,   315,
    316,   0,     317,   0,     318,   0,     0,     0,     319,   320,   321,
    0,     322,   323,   0,     324,   325,   0,     326,   327,   328,   329,
    2797,  0,     331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     0,     357,   358,   0,     359,   0,     0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   0,
    379,   380,   381,   382,   0,     383,   384,   0,     385,   0,     386,
    387,   388,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   397,   0,     398,   0,     399,   400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   409,   410,   411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   460,
    461,   462,   0,     463,   464,   465,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   478,   0,     479,
    480,   0,     481,   0,     482,   483,   484,   485,   486,   0,     487,
    488,   0,     0,     489,   490,   491,   492,   493,   0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   511,   512,   0,
    513,   0,     514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   219,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    220,   221,   222,   223,   224,   225,   226,   227,   0,     229,   230,
    231,   0,     0,     0,     0,     0,     0,     0,     232,   233,   0,
    234,   235,   0,     236,   237,   238,   239,   240,   0,     241,   242,
    0,     243,   244,   245,   246,   247,   0,     0,     248,   249,   250,
    251,   252,   0,     253,   254,   255,   256,   257,   0,     0,     0,
    258,   259,   260,   261,   0,     262,   263,   264,   0,     265,   266,
    267,   268,   269,   270,   0,     0,     271,   272,   273,   0,     0,
    0,     0,     0,     0,     0,     274,   275,   276,   277,   278,   279,
    280,   281,   282,   0,     283,   0,     284,   285,   286,   287,   288,
    0,     289,   290,   291,   0,     0,     292,   293,   294,   295,   296,
    0,     297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   307,   308,   309,   310,   311,   0,     312,   0,     313,
    314,   315,   316,   0,     317,   0,     318,   0,     0,     0,     319,
    320,   321,   0,     322,   323,   0,     324,   325,   0,     326,   327,
    328,   329,   2799,  0,     331,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     0,     357,   358,   0,     359,
    0,     0,     360,   361,   362,   0,     0,     363,   364,   365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   0,     379,   380,   381,   382,   0,     383,   384,   0,     385,
    0,     386,   387,   388,   389,   390,   391,   0,     392,   0,     0,
    393,   394,   395,   0,     0,     396,   397,   0,     398,   0,     399,
    400,   401,   402,   403,   404,   405,   406,   0,     407,   408,   409,
    410,   411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   452,   0,     453,   454,   455,   456,   457,   0,     458,
    459,   460,   461,   462,   0,     463,   464,   465,   466,   0,     467,
    468,   469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
    0,     479,   480,   0,     481,   0,     482,   483,   484,   485,   486,
    0,     487,   488,   0,     0,     489,   490,   491,   492,   493,   0,
    494,   495,   496,   497,   498,   499,   500,   0,     0,     501,   502,
    503,   504,   505,   0,     0,     506,   507,   508,   509,   510,   511,
    512,   0,     513,   0,     514,   515,   516,   517,   0,     0,     518,
    0,     0,     519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   219,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   0,     236,   237,   238,   239,   240,   0,
    241,   242,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   250,   251,   252,   0,     253,   254,   255,   256,   257,   0,
    0,     0,     258,   259,   260,   261,   0,     262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     0,     271,   272,   273,
    0,     0,     0,     0,     0,     0,     0,     274,   275,   276,   277,
    278,   279,   280,   281,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   294,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   307,   308,   309,   310,   311,   0,     312,
    0,     313,   314,   315,   316,   0,     317,   0,     318,   0,     0,
    0,     319,   320,   321,   0,     322,   323,   0,     324,   325,   0,
    326,   327,   328,   329,   2909,  0,     331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     0,     357,   358,
    0,     359,   0,     0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   0,     379,   380,   381,   382,   0,     383,   384,
    0,     385,   0,     386,   387,   388,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   397,   0,     398,
    0,     399,   400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   409,   410,   411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   460,   461,   462,   0,     463,   464,   465,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   478,   0,     479,   480,   0,     481,   0,     482,   483,   484,
    485,   486,   0,     487,   488,   0,     0,     489,   490,   491,   492,
    493,   0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   511,   512,   0,     513,   0,     514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    219,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   0,     236,   237,   238,   239,
    240,   0,     241,   242,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   250,   251,   252,   0,     253,   254,   255,   256,
    257,   0,     0,     0,     258,   259,   260,   261,   0,     262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     0,     271,
    272,   273,   0,     0,     0,     0,     0,     0,     0,     274,   275,
    276,   277,   278,   279,   280,   281,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    2931,  294,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   307,   308,   309,   310,   311,
    0,     312,   0,     313,   314,   315,   316,   0,     317,   0,     318,
    0,     0,     0,     319,   320,   321,   0,     322,   323,   0,     324,
    325,   0,     326,   327,   328,   329,   330,   0,     331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     0,
    357,   358,   0,     359,   0,     0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   0,     379,   380,   381,   382,   0,
    383,   384,   0,     385,   0,     386,   387,   388,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   397,
    0,     398,   0,     399,   400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   409,   410,   411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   0,     458,   459,   460,   461,   462,   0,     463,   464,
    465,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   478,   0,     479,   480,   0,     481,   0,     482,
    483,   484,   485,   486,   0,     487,   488,   0,     0,     489,   490,
    491,   492,   493,   0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   511,   512,   0,     513,   0,     514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   219,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   0,     236,   237,
    238,   239,   240,   0,     241,   242,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   250,   251,   252,   0,     253,   254,
    255,   256,   257,   0,     0,     0,     258,   259,   260,   261,   0,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    0,     271,   272,   273,   0,     0,     0,     0,     0,     0,     0,
    274,   275,   276,   277,   278,   279,   280,   281,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   294,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   307,   308,   309,
    310,   311,   0,     312,   0,     313,   314,   315,   316,   0,     317,
    0,     318,   0,     0,     0,     319,   320,   321,   0,     322,   323,
    0,     324,   325,   0,     326,   327,   328,   329,   4032,  0,     331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,
    0,     0,     357,   358,   0,     359,   0,     0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   0,     379,   380,   381,
    382,   0,     383,   384,   0,     385,   0,     386,   387,   388,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   397,   0,     398,   0,     399,   400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   409,   410,   411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   0,     458,   459,   460,   461,   462,   0,
    463,   464,   465,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   478,   0,     479,   480,   0,     481,
    0,     482,   483,   484,   485,   486,   0,     487,   488,   0,     0,
    489,   490,   491,   492,   493,   0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   511,   512,   0,     513,   0,     514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   977,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   772,
    236,   237,   238,   0,     978,   773,   979,   980,   0,     243,   244,
    245,   246,   247,   0,     0,     248,   249,   981,   982,   252,   0,
    253,   254,   255,   256,   0,     0,     774,   0,     258,   259,   260,
    261,   775,   262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     776,   271,   272,   273,   0,     0,     0,     777,   0,
    0,     0,     274,   275,   276,   277,   278,   279,   983,   984,   282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   985,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    308,   309,   310,   0,     0,     312,   0,     313,   314,   986,   316,
    0,     317,   0,     318,   778,   0,     779,   319,   320,   321,   0,
    322,   0,     0,     0,     325,   0,     326,   327,   328,   329,   330,
    780,   331,   332,   333,   334,   1984,  335,   336,   337,   338,   339,
    340,   0,     341,   781,   1985,  343,   344,   345,   346,   988,   989,
    0,     990,   0,     350,   782,   783,   351,   784,   352,   353,   354,
    355,   356,   0,     0,     357,   0,     785,   359,   786,   0,     360,
    361,   362,   0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   991,   787,   992,
    380,   381,   0,     0,     383,   384,   788,   385,   0,     0,     387,
    993,   389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     0,     396,   1987,  789,   398,   790,   0,     400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   0,     410,   0,     412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    994,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   791,   441,
    442,   443,   0,     445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   0,     458,   459,   1988,  461,
    462,   792,   463,   464,   996,   466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   0,     0,     479,   480,
    0,     481,   793,   482,   483,   484,   485,   486,   0,     997,   998,
    0,     0,     489,   490,   0,     492,   0,     0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   503,   504,   505,
    0,     0,     506,   507,   508,   509,   510,   0,     999,   1989,  513,
    794,   514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   977,   0,     0,     0,     0,     0,
    0,     0,     0,     534,   535,   536,   0,     0,     0,     220,   221,
    222,   223,   224,   225,   226,   227,   0,     229,   230,   231,   0,
    0,     0,     0,     0,     0,     0,     232,   233,   0,     234,   235,
    772,   236,   237,   238,   0,     978,   773,   979,   980,   0,     243,
    244,   245,   246,   247,   0,     0,     248,   249,   981,   982,   252,
    0,     253,   254,   255,   256,   0,     0,     774,   0,     258,   259,
    260,   261,   775,   262,   263,   264,   0,     265,   266,   267,   268,
    269,   270,   0,     776,   271,   272,   273,   0,     0,     0,     777,
    0,     0,     0,     274,   275,   276,   277,   278,   279,   983,   984,
    282,   0,     283,   0,     284,   285,   286,   287,   288,   0,     289,
    290,   291,   0,     0,     292,   293,   985,   295,   296,   0,     297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    0,     308,   309,   310,   0,     0,     312,   0,     313,   314,   986,
    316,   0,     317,   0,     318,   778,   0,     779,   319,   320,   321,
    0,     322,   0,     0,     0,     325,   0,     326,   327,   328,   329,
    330,   780,   331,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   781,   0,     343,   344,   345,   346,   988,
    989,   0,     990,   0,     350,   782,   783,   351,   784,   352,   353,
    354,   355,   356,   0,     0,     357,   0,     785,   359,   786,   0,
    360,   361,   362,   0,     0,     363,   364,   365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   991,   787,
    992,   380,   381,   0,     0,     383,   384,   788,   385,   2081,  0,
    387,   993,   389,   390,   391,   0,     392,   0,     0,     393,   394,
    395,   0,     0,     396,   0,     789,   398,   790,   0,     400,   401,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     410,   0,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   994,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   791,
    441,   442,   443,   0,     445,   446,   447,   448,   449,   450,   451,
    452,   0,     453,   454,   455,   456,   457,   0,     458,   459,   1988,
    461,   462,   792,   463,   464,   996,   466,   0,     467,   468,   469,
    470,   471,   472,   473,   474,   475,   476,   477,   0,     0,     479,
    480,   3611,  481,   793,   482,   483,   484,   485,   486,   0,     997,
    998,   0,     0,     489,   490,   0,     492,   0,     0,     494,   495,
    496,   497,   498,   499,   500,   0,     0,     501,   502,   503,   504,
    505,   0,     0,     506,   507,   508,   509,   510,   0,     999,   0,
    513,   794,   514,   515,   516,   517,   0,     0,     518,   0,     0,
    519,   520,   521,   522,   523,   524,   219,   0,     0,     0,     0,
    0,     0,     0,     0,     534,   535,   536,   0,     0,     0,     220,
    221,   222,   223,   224,   225,   226,   227,   0,     229,   230,   231,
    0,     0,     0,     0,     0,     0,     0,     232,   233,   0,     234,
    235,   0,     236,   237,   238,   239,   240,   0,     241,   242,   0,
    243,   244,   245,   246,   247,   0,     0,     248,   249,   250,   251,
    252,   0,     253,   254,   255,   256,   257,   0,     0,     0,     258,
    259,   260,   261,   0,     262,   263,   264,   0,     265,   266,   267,
    268,   269,   270,   0,     0,     271,   272,   273,   0,     0,     0,
    0,     0,     0,     0,     274,   275,   276,   277,   278,   279,   280,
    281,   282,   0,     283,   0,     284,   285,   286,   287,   288,   0,
    289,   290,   291,   0,     0,     292,   293,   294,   295,   296,   0,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   307,   308,   309,   310,   311,   0,     312,   0,     313,   314,
    315,   316,   0,     317,   0,     318,   0,     0,     0,     319,   320,
    321,   0,     322,   323,   0,     324,   325,   0,     326,   327,   328,
    329,   330,   0,     331,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     0,     357,   358,   0,     359,   0,
    0,     360,   361,   362,   0,     0,     363,   364,   365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    0,     379,   380,   381,   382,   0,     383,   384,   0,     385,   0,
    386,   387,   388,   389,   390,   391,   0,     392,   0,     0,     393,
    394,   395,   0,     0,     396,   397,   0,     398,   0,     399,   400,
    401,   402,   403,   0,     405,   406,   0,     407,   408,   409,   410,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    0,     422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   0,     446,   447,   448,   449,   450,
    451,   452,   0,     453,   454,   455,   456,   457,   0,     458,   459,
    460,   461,   462,   0,     463,   464,   465,   466,   0,     467,   468,
    469,   470,   471,   472,   473,   474,   475,   476,   477,   478,   0,
    479,   480,   0,     481,   0,     482,   483,   484,   485,   486,   0,
    487,   488,   0,     0,     489,   490,   491,   492,   493,   0,     494,
    495,   496,   497,   498,   499,   500,   0,     0,     501,   502,   503,
    504,   505,   0,     0,     506,   507,   508,   509,   510,   511,   512,
    0,     513,   0,     514,   515,   516,   517,   0,     0,     518,   0,
    0,     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   977,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     220,   221,   222,   223,   224,   225,   226,   227,   0,     229,
    230,   231,   0,     0,     0,     0,     0,     0,     0,     232,   233,
    0,     234,   235,   772,   236,   237,   238,   0,     978,   773,   979,
    980,   0,     243,   244,   245,   246,   247,   0,     0,     248,   249,
    981,   982,   252,   0,     253,   254,   255,   256,   0,     0,     774,
    0,     258,   259,   260,   261,   775,   262,   263,   264,   0,     265,
    266,   267,   268,   269,   270,   0,     776,   271,   272,   273,   0,
    0,     0,     777,   0,     0,     0,     274,   275,   276,   277,   278,
    279,   983,   984,   282,   0,     283,   0,     284,   285,   286,   287,
    288,   0,     289,   290,   291,   0,     0,     292,   293,   985,   295,
    296,   0,     297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     308,   309,   310,   0,     0,     312,   0,
    313,   314,   986,   316,   0,     317,   0,     318,   778,   0,     779,
    319,   320,   321,   0,     322,   0,     0,     0,     325,   0,     326,
    327,   328,   329,   330,   780,   331,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   781,   0,     343,   344,
    345,   346,   988,   989,   0,     990,   0,     350,   782,   783,   351,
    784,   352,   353,   354,   355,   356,   0,     0,     357,   0,     785,
    359,   786,   0,     360,   361,   362,   0,     0,     363,   364,   365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   991,   787,   992,   380,   381,   2146,  0,     383,   384,   788,
    385,   0,     0,     387,   993,   389,   390,   391,   0,     392,   0,
    0,     393,   394,   395,   0,     0,     396,   0,     789,   398,   790,
    0,     400,   401,   402,   403,   404,   405,   406,   0,     407,   408,
    0,     410,   0,     412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   994,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   791,   441,   442,   443,   0,     445,   446,   447,   448,
    449,   450,   451,   452,   0,     453,   454,   455,   456,   457,   0,
    458,   459,   995,   461,   462,   792,   463,   464,   996,   466,   0,
    467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
    0,     0,     479,   480,   0,     481,   793,   482,   483,   484,   485,
    486,   0,     997,   998,   0,     0,     489,   490,   0,     492,   0,
    0,     494,   495,   496,   497,   498,   499,   500,   0,     0,     501,
    502,   503,   504,   505,   0,     0,     506,   507,   508,   509,   510,
    0,     999,   0,     513,   794,   514,   515,   516,   517,   0,     0,
    518,   0,     0,     519,   520,   521,   522,   523,   524,   977,   0,
    0,     0,     0,     0,     0,     0,     0,     534,   535,   536,   0,
    0,     0,     220,   221,   222,   223,   224,   225,   226,   227,   0,
    229,   230,   231,   0,     0,     0,     0,     0,     0,     0,     232,
    233,   0,     234,   235,   772,   236,   237,   238,   0,     978,   773,
    979,   980,   0,     243,   244,   245,   246,   247,   0,     0,     248,
    249,   981,   982,   252,   0,     253,   254,   255,   256,   0,     0,
    774,   0,     258,   259,   260,   261,   775,   262,   263,   264,   0,
    265,   266,   267,   268,   269,   270,   0,     776,   271,   272,   273,
    0,     0,     0,     777,   0,     0,     0,     274,   275,   276,   277,
    278,   279,   983,   984,   282,   0,     283,   0,     284,   285,   286,
    287,   288,   0,     289,   290,   291,   0,     0,     292,   293,   985,
    295,   296,   0,     297,   298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   0,     308,   309,   310,   0,     0,     312,
    0,     313,   314,   986,   316,   0,     317,   0,     318,   778,   0,
    779,   319,   320,   321,   0,     322,   0,     0,     0,     325,   0,
    326,   327,   328,   329,   330,   780,   331,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   781,   0,     343,
    344,   345,   346,   988,   989,   0,     990,   0,     350,   782,   783,
    351,   784,   352,   353,   354,   355,   356,   0,     0,     357,   0,
    785,   359,   786,   0,     360,   361,   362,   0,     0,     363,   364,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   991,   787,   992,   380,   381,   3437,  0,     383,   384,
    788,   385,   0,     0,     387,   993,   389,   390,   391,   0,     392,
    0,     0,     393,   394,   395,   0,     0,     396,   0,     789,   398,
    790,   0,     400,   401,   402,   403,   404,   405,   406,   0,     407,
    408,   0,     410,   0,     412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   994,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   791,   441,   442,   443,   0,     445,   446,   447,
    448,   449,   450,   451,   452,   0,     453,   454,   455,   456,   457,
    0,     458,   459,   995,   461,   462,   792,   463,   464,   996,   466,
    0,     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
    477,   0,     0,     479,   480,   0,     481,   793,   482,   483,   484,
    485,   486,   0,     997,   998,   0,     0,     489,   490,   0,     492,
    0,     0,     494,   495,   496,   497,   498,   499,   500,   0,     0,
    501,   502,   503,   504,   505,   0,     0,     506,   507,   508,   509,
    510,   0,     999,   0,     513,   794,   514,   515,   516,   517,   0,
    0,     518,   0,     0,     519,   520,   521,   522,   523,   524,   977,
    0,     0,     0,     0,     0,     0,     0,     0,     534,   535,   536,
    0,     0,     0,     220,   221,   222,   223,   224,   225,   226,   227,
    0,     229,   230,   231,   0,     0,     0,     0,     0,     0,     0,
    232,   233,   0,     234,   235,   772,   236,   237,   238,   0,     978,
    773,   979,   980,   0,     243,   244,   245,   246,   247,   0,     0,
    248,   249,   981,   982,   252,   0,     253,   254,   255,   256,   0,
    0,     774,   0,     258,   259,   260,   261,   775,   262,   263,   264,
    0,     265,   266,   267,   268,   269,   270,   0,     776,   271,   272,
    273,   0,     0,     0,     777,   0,     0,     0,     274,   275,   276,
    277,   278,   279,   983,   984,   282,   0,     283,   0,     284,   285,
    286,   287,   288,   0,     289,   290,   291,   0,     0,     292,   293,
    985,   295,   296,   0,     297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     308,   309,   310,   0,     0,
    312,   0,     313,   314,   986,   316,   0,     317,   0,     318,   778,
    0,     779,   319,   320,   321,   0,     322,   0,     0,     0,     325,
    0,     326,   327,   328,   329,   987,   780,   331,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   781,   0,
    343,   344,   345,   346,   988,   989,   0,     990,   0,     350,   782,
    783,   351,   784,   352,   353,   354,   355,   356,   0,     0,     357,
    0,     785,   359,   786,   0,     360,   361,   362,   0,     0,     363,
    364,   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   991,   787,   992,   380,   381,   0,     0,     383,
    384,   788,   385,   0,     0,     387,   993,   389,   390,   391,   0,
    392,   0,     0,     393,   394,   395,   0,     0,     396,   0,     789,
    398,   790,   0,     400,   401,   402,   403,   404,   405,   406,   0,
    407,   408,   0,     410,   0,     412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   994,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   791,   441,   442,   443,   0,     445,   446,
    447,   448,   449,   450,   451,   452,   0,     453,   454,   455,   456,
    457,   0,     458,   459,   995,   461,   462,   792,   463,   464,   996,
    466,   0,     467,   468,   469,   470,   471,   472,   473,   474,   475,
    476,   477,   0,     0,     479,   480,   0,     481,   793,   482,   483,
    484,   485,   486,   0,     997,   998,   0,     0,     489,   490,   0,
    492,   0,     0,     494,   495,   496,   497,   498,   499,   500,   0,
    0,     501,   502,   503,   504,   505,   0,     0,     506,   507,   508,
    509,   510,   0,     999,   0,     513,   794,   514,   515,   516,   517,
    0,     0,     518,   0,     0,     519,   520,   521,   522,   523,   524,
    977,   0,     0,     0,     0,     0,     0,     0,     0,     534,   535,
    536,   0,     0,     0,     220,   221,   222,   223,   224,   225,   226,
    227,   0,     229,   230,   231,   0,     0,     0,     0,     0,     0,
    0,     232,   233,   0,     234,   235,   772,   236,   237,   238,   0,
    978,   773,   979,   980,   0,     243,   244,   245,   246,   247,   0,
    0,     248,   249,   981,   982,   252,   0,     253,   254,   255,   256,
    0,     0,     774,   0,     258,   259,   260,   261,   775,   262,   263,
    264,   0,     265,   266,   267,   268,   269,   270,   0,     776,   271,
    272,   273,   0,     0,     0,     777,   0,     0,     0,     274,   275,
    276,   277,   278,   279,   983,   984,   282,   0,     283,   0,     284,
    285,   286,   287,   288,   0,     289,   290,   291,   0,     0,     292,
    293,   985,   295,   296,   0,     297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     308,   309,   310,   0,
    0,     312,   0,     313,   314,   986,   316,   0,     317,   0,     318,
    778,   0,     779,   319,   320,   321,   0,     322,   0,     0,     0,
    325,   0,     326,   327,   328,   329,   1045,  780,   331,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   781,
    0,     343,   344,   345,   346,   988,   989,   0,     990,   0,     350,
    782,   783,   351,   784,   352,   353,   354,   355,   356,   0,     0,
    357,   0,     785,   359,   786,   0,     360,   361,   362,   0,     0,
    363,   364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   991,   787,   992,   380,   381,   0,     0,
    383,   384,   788,   385,   0,     0,     387,   993,   389,   390,   391,
    0,     392,   0,     0,     393,   394,   395,   0,     0,     396,   0,
    789,   398,   790,   0,     400,   401,   402,   403,   404,   405,   406,
    0,     407,   408,   0,     410,   0,     412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   994,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   791,   441,   442,   443,   0,     445,
    446,   447,   448,   449,   450,   451,   452,   0,     453,   454,   455,
    456,   457,   0,     458,   459,   995,   461,   462,   792,   463,   464,
    996,   466,   0,     467,   468,   469,   470,   471,   472,   473,   474,
    475,   476,   477,   0,     0,     479,   480,   0,     481,   793,   482,
    483,   484,   485,   486,   0,     997,   998,   0,     0,     489,   490,
    0,     492,   0,     0,     494,   495,   496,   497,   498,   499,   500,
    0,     0,     501,   502,   503,   504,   505,   0,     0,     506,   507,
    508,   509,   510,   0,     999,   0,     513,   794,   514,   515,   516,
    517,   0,     0,     518,   0,     0,     519,   520,   521,   522,   523,
    524,   977,   0,     0,     0,     0,     0,     0,     0,     0,     534,
    535,   536,   0,     0,     0,     220,   221,   222,   223,   224,   225,
    226,   227,   0,     229,   230,   231,   0,     0,     0,     0,     0,
    0,     0,     232,   233,   0,     234,   235,   772,   236,   237,   238,
    0,     978,   773,   979,   980,   0,     243,   244,   245,   246,   247,
    0,     0,     248,   249,   981,   982,   252,   0,     253,   254,   255,
    256,   0,     0,     774,   0,     258,   259,   260,   261,   775,   262,
    263,   264,   0,     265,   266,   267,   268,   269,   270,   0,     776,
    271,   272,   273,   0,     0,     0,     777,   0,     0,     0,     274,
    275,   276,   277,   278,   279,   983,   984,   282,   0,     283,   0,
    284,   285,   286,   287,   288,   0,     289,   290,   291,   0,     0,
    292,   293,   985,   295,   296,   0,     297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     308,   309,   310,
    0,     0,     312,   0,     313,   314,   986,   316,   0,     317,   0,
    318,   778,   0,     779,   319,   320,   321,   0,     322,   0,     0,
    0,     325,   0,     326,   327,   328,   329,   330,   780,   331,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    781,   0,     343,   344,   345,   346,   988,   989,   0,     990,   0,
    350,   782,   783,   351,   784,   352,   353,   354,   355,   356,   0,
    0,     357,   0,     785,   359,   786,   0,     360,   361,   362,   0,
    0,     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   991,   787,   992,   380,   381,   0,
    0,     383,   384,   788,   385,   0,     0,     387,   993,   389,   390,
    391,   0,     392,   0,     0,     393,   394,   395,   0,     0,     396,
    0,     789,   398,   790,   0,     400,   401,   402,   403,   404,   405,
    406,   0,     407,   408,   0,     410,   0,     412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   994,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   791,   441,   442,   443,   0,
    445,   446,   447,   448,   449,   450,   451,   452,   0,     453,   454,
    455,   456,   457,   0,     458,   459,   995,   461,   462,   792,   463,
    464,   996,   466,   0,     467,   468,   469,   470,   471,   472,   473,
    474,   475,   476,   477,   0,     0,     479,   480,   0,     481,   793,
    482,   483,   484,   485,   486,   0,     997,   998,   0,     0,     489,
    490,   0,     492,   0,     0,     494,   495,   496,   497,   498,   499,
    500,   0,     0,     501,   502,   503,   504,   505,   0,     0,     506,
    507,   508,   509,   510,   0,     999,   0,     513,   794,   514,   515,
    516,   517,   0,     0,     518,   0,     0,     519,   520,   521,   522,
    523,   524,   977,   0,     0,     0,     0,     0,     0,     0,     0,
    534,   535,   536,   0,     0,     0,     220,   221,   222,   223,   224,
    225,   226,   227,   0,     229,   230,   231,   0,     0,     0,     0,
    0,     0,     0,     232,   233,   0,     234,   235,   772,   236,   237,
    238,   0,     978,   773,   979,   980,   0,     243,   244,   245,   246,
    247,   0,     0,     248,   249,   981,   982,   252,   0,     253,   254,
    255,   256,   0,     0,     774,   0,     258,   259,   260,   261,   775,
    262,   263,   264,   0,     265,   266,   267,   268,   269,   270,   0,
    776,   271,   272,   273,   0,     0,     0,     777,   0,     0,     0,
    274,   275,   276,   277,   278,   279,   983,   984,   282,   0,     283,
    0,     284,   285,   286,   287,   288,   0,     289,   290,   291,   0,
    0,     292,   293,   985,   295,   296,   0,     297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   0,     308,   309,
    310,   0,     0,     312,   0,     313,   314,   986,   316,   0,     317,
    0,     318,   778,   0,     779,   319,   320,   321,   0,     322,   0,
    0,     0,     325,   0,     326,   327,   328,   329,   330,   780,   331,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   781,   0,     343,   344,   345,   346,   988,   989,   0,     990,
    0,     350,   782,   783,   351,   784,   352,   353,   354,   355,   356,
    0,     0,     357,   0,     785,   359,   786,   0,     360,   361,   362,
    0,     0,     363,   364,   365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   991,   787,   992,   380,   381,
    0,     0,     383,   384,   788,   385,   0,     0,     387,   993,   389,
    390,   391,   0,     392,   0,     0,     393,   394,   395,   0,     0,
    396,   0,     789,   398,   790,   0,     400,   401,   402,   403,   404,
    405,   406,   0,     407,   408,   0,     410,   0,     412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   994,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   791,   441,   442,   443,
    0,     445,   446,   447,   448,   449,   450,   451,   452,   0,     453,
    454,   455,   456,   457,   0,     458,   459,   1988,  461,   462,   792,
    463,   464,   996,   466,   0,     467,   468,   469,   470,   471,   472,
    473,   474,   475,   476,   477,   0,     0,     479,   480,   0,     481,
    793,   482,   483,   484,   485,   486,   0,     997,   998,   0,     0,
    489,   490,   0,     492,   0,     0,     494,   495,   496,   497,   498,
    499,   500,   0,     0,     501,   502,   503,   504,   505,   0,     0,
    506,   507,   508,   509,   510,   0,     999,   0,     513,   794,   514,
    515,   516,   517,   0,     0,     518,   0,     0,     519,   520,   521,
    522,   523,   524,   977,   0,     0,     0,     0,     0,     0,     0,
    0,     534,   535,   536,   0,     0,     0,     220,   221,   222,   223,
    224,   225,   226,   227,   0,     229,   230,   231,   0,     0,     0,
    0,     0,     0,     0,     232,   233,   0,     234,   235,   772,   236,
    237,   238,   0,     978,   773,   979,   980,   0,     243,   244,   245,
    246,   247,   0,     0,     248,   249,   981,   982,   252,   0,     253,
    254,   255,   256,   0,     0,     774,   0,     258,   259,   260,   261,
    775,   262,   263,   264,   0,     265,   266,   267,   268,   269,   270,
    0,     776,   271,   272,   273,   0,     0,     0,     777,   0,     0,
    0,     274,   275,   276,   277,   278,   279,   983,   984,   282,   0,
    283,   0,     284,   285,   286,   287,   288,   0,     289,   290,   291,
    0,     0,     292,   293,   985,   295,   296,   0,     297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     308,
    309,   310,   0,     0,     312,   0,     313,   314,   986,   316,   0,
    317,   0,     318,   778,   0,     779,   319,   320,   321,   0,     322,
    0,     0,     0,     325,   0,     326,   327,   328,   329,   330,   780,
    331,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   781,   0,     343,   344,   345,   346,   988,   989,   0,
    990,   0,     350,   782,   783,   351,   784,   352,   353,   354,   355,
    356,   0,     0,     357,   0,     785,   359,   786,   0,     360,   361,
    362,   0,     0,     363,   364,   365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   991,   787,   992,   380,
    381,   0,     0,     383,   384,   788,   385,   0,     0,     387,   993,
    389,   390,   391,   0,     392,   0,     0,     393,   394,   395,   0,
    0,     396,   0,     789,   398,   790,   0,     400,   401,   402,   403,
    404,   405,   406,   0,     407,   408,   0,     410,   0,     412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   994,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   791,   441,   442,
    443,   0,     445,   446,   447,   448,   449,   450,   451,   452,   0,
    453,   454,   455,   456,   457,   0,     458,   459,   0,     461,   462,
    792,   463,   464,   996,   466,   0,     467,   468,   469,   470,   471,
    472,   473,   474,   475,   476,   477,   0,     0,     479,   480,   0,
    481,   793,   482,   483,   484,   485,   486,   0,     997,   998,   0,
    0,     489,   490,   0,     492,   0,     0,     494,   495,   496,   497,
    498,   499,   500,   0,     0,     501,   502,   503,   504,   505,   0,
    0,     506,   507,   508,   509,   510,   0,     999,   0,     513,   794,
    514,   515,   516,   517,   0,     0,     518,   0,     0,     519,   520,
    521,   522,   523,   524,   977,   0,     0,     0,     0,     0,     0,
    0,     0,     534,   535,   536,   0,     0,     0,     220,   221,   222,
    223,   224,   225,   226,   227,   0,     229,   230,   231,   0,     0,
    0,     0,     0,     0,     0,     232,   233,   0,     234,   235,   772,
    236,   237,   238,   0,     0,     773,   0,     0,     0,     243,   244,
    245,   246,   247,   0,     0,     248,   249,   0,     0,     252,   0,
    253,   254,   255,   256,   0,     0,     774,   0,     258,   259,   260,
    261,   775,   262,   263,   264,   0,     265,   266,   267,   268,   269,
    270,   0,     776,   271,   272,   273,   0,     0,     0,     777,   0,
    0,     0,     274,   275,   276,   277,   278,   279,   0,     0,     282,
    0,     283,   0,     284,   285,   286,   287,   288,   0,     289,   290,
    291,   0,     0,     292,   293,   294,   295,   296,   0,     297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    308,   309,   310,   0,     0,     312,   0,     313,   314,   0,     316,
    0,     317,   0,     318,   778,   0,     779,   319,   320,   321,   0,
    322,   0,     0,     0,     325,   0,     326,   327,   328,   329,   330,
    780,   331,   332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   781,   0,     343,   344,   345,   346,   0,     0,
    0,     0,     0,     350,   782,   783,   351,   784,   352,   353,   354,
    355,   356,   0,     0,     357,   0,     785,   359,   786,   0,     360,
    361,   362,   0,     0,     363,   364,   365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   0,     787,   0,
    380,   381,   0,     0,     383,   384,   788,   385,   0,     0,     387,
    0,     389,   390,   391,   0,     392,   0,     0,     393,   394,   395,
    0,     0,     396,   0,     789,   398,   790,   0,     400,   401,   402,
    403,   404,   405,   406,   0,     407,   408,   0,     410,   0,     412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    0,     424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   791,   441,
    442,   443,   0,     445,   446,   447,   448,   449,   450,   451,   452,
    0,     453,   454,   455,   456,   457,   0,     458,   459,   0,     461,
    462,   792,   463,   464,   0,     466,   0,     467,   468,   469,   470,
    471,   472,   473,   474,   475,   476,   477,   0,     0,     479,   480,
    0,     481,   793,   482,   483,   484,   485,   486,   0,     0,     0,
    0,     0,     489,   490,   0,     492,   0,     0,     494,   495,   496,
    497,   498,   499,   500,   0,     0,     501,   502,   503,   504,   505,
    0,     0,     506,   507,   508,   509,   510,   0,     0,     0,     513,
    794,   514,   515,   516,   517,   0,     0,     518,   0,     0,     519,
    520,   521,   522,   523,   524,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     534,   535,   536};

static const yytype_int16 yycheck[] = {
    16,   0,    0,    0,    0,    0,    0,    564,  201,  25,   35,   50,
    21,   11,   666,  667,  668,  1020, 27,   594,  672,  187,  20,   1062,
    20,   714,  716,  1024, 1254, 1029, 196,  770,  765,  604,  827,  1084,
    7,    1272, 179,  796,  995,  857,  1330, 14,   869,  1691, 2270, 878,
    1256, 937,  615,  21,   50,   1812, 625,  612,  594,  27,   739,  634,
    948,  626,  983,  984,  12,   2459, 1014, 2789, 1054, 44,   1476, 1115,
    993,  1365, 43,   1992, 1993, 2622, 1375, 2279, 17,   2145, 1308, 1371,
    998,  723,  2610, 917,  2765, 1385, 22,   1546, 20,   856,  3040, 856,
    1304, 922,  2998, 862,  204,  926,  2811, 35,   2813, 1727, 931,  3297,
    871,  1428, 2971, 215,  555,  3016, 2197, 940,  0,    1277, 1939, 197,
    2431, 3336, 2614, 2961, 3390, 950,  204,  3027, 3600, 2671, 2235, 166,
    2612, 2613, 3340, 633,  3612, 215,  2243, 2663, 2245, 971,  3268, 1440,
    719,  3536, 2954, 3233, 181,  1445, 1446, 3589, 1558, 2961, 181,  3603,
    3590, 1815, 1771, 34,   603,  625,  0,    3340, 2545, 0,    41,   0,
    1371, 4052, 1357, 49,   2679, 0,    2610, 1308, 981,  982,  3853, 40,
    813,  719,  869,  181,  3014, 0,    0,    992,  0,    0,    0,    0,
    3196, 1648, 0,    0,    4172, 3313, 4174, 762,  4210, 4229, 3266, 0,
    11,   5,    1192, 762,  3261, 2273, 0,    0,    9,    35,   0,    0,
    62,   9,    0,    4353, 9,    5,    84,   1144, 1145, 72,   22,   2663,
    5,    26,   48,   5,    26,   1992, 81,   4263, 72,   26,   5,    13,
    14,   210,  1163, 4267, 4268, 11,   13,   14,   41,   72,   5,    26,
    5,    109,  41,   5,    158,  133,  81,   1173, 13,   14,   62,   915,
    26,   2515, 2516, 5,    39,   1062, 2520, 33,   153,  158,  40,   55,
    159,  5,    62,   199,  128,  5,    39,   1509, 114,  5,    4302, 111,
    114,  5,    140,  64,   55,   5,    158,  168,  2677, 164,  102,  102,
    2767, 5,    254,  161,  70,   158,  158,  2557, 2558, 2373, 139,  2375,
    4,    72,   5,    158,  55,   9,    257,  890,  114,  72,   139,  254,
    242,  153,  27,   254,  1133, 1134, 126,  76,   109,  29,   289,  254,
    259,  81,   231,  910,  5,    898,  320,  264,  26,   9,    258,  32,
    919,  262,  264,  1287, 55,   72,   1159, 109,  329,  5,    166,  272,
    317,  158,  11,   193,  137,  88,   83,   193,  158,  158,  4540, 564,
    158,  158,  55,   111,  158,  9,    11,   203,  320,  158,  155,  180,
    550,  373,  112,  294,  322,  362,  180,  180,  74,   306,  180,  180,
    4,    4236, 180,  193,  82,   9,    3,    4,    5,    138,  123,  40,
    9,    4788, 1241, 152,  2058, 406,  321,  72,   11,   21,   294,  612,
    244,  258,  102,  27,   81,   56,   70,   116,  110,  402,  30,   31,
    598,  64,   327,  4274, 1193, 70,   395,  3678, 163,  3680, 608,  4419,
    378,  4473, 1239, 11,   181,  311,  176,  1244, 1245, 1688, 394,  140,
    11,   1692, 562,  1694, 4343, 26,   1697, 567,  1221, 1030, 454,  3858,
    33,   4459, 4460, 295,  450,  331,  578,  1050, 40,   450,  5,    5,
    308,  26,   400,  1486, 562,  40,   114,  1062, 33,   567,  244,  1491,
    111,  194,  407,  450,  4512, 420,  450,  329,  578,  5,    184,  2970,
    279,  363,  70,   4886, 109,  317,  339,  450,  1050, 249,  287,  70,
    207,  4687, 1726, 450,  373,  373,  339,  450,  180,  1090, 373,  400,
    1099, 545,  333,  450,  312,  454,  454,  329,  1101, 373,  450,  8,
    454,  282,  11,   102,  1119, 5,    15,   16,   17,   312,  373,  1116,
    454,  1779, 1347, 381,  331,  157,  362,  159,  1768, 411,  1355, 411,
    394,  450,  1064, 450,  394,  450,  649,  650,  651,  312,  450,  654,
    655,  656,  594,  595,  3418, 1119, 1345, 439,  346,  664,  373,  454,
    359,  220,  454,  366,  454,  368,  1580, 634,  373,  198,  394,  1424,
    394,  1426, 359,  638,  450,  405,  1814, 544,  401,  312,  3418, 454,
    4622, 309,  373,  4053, 389,  1505, 1434, 220,  4011, 3343, 373,  1416,
    765,  4649, 1419, 1420, 450,  373,  454,  312,  450,  1682, 1397, 633,
    634,  633,  647,  446,  649,  386,  651,  1474, 441,  442,  4780, 3773,
    657,  1479, 450,  2715, 441,  442,  373,  1652, 453,  449,  3558, 4829,
    3746, 1236, 439,  453,  453,  681,  450,  453,  453,  1244, 1245, 453,
    29,   355,  454,  452,  450,  647,  4069, 649,  446,  651,  362,  450,
    632,  405,  3690, 657,  658,  659,  661,  707,  1689, 1614, 1487, 450,
    3599, 450,  1236, 715,  450,  1698, 718,  719,  720,  898,  634,  396,
    3772, 678,  188,  189,  450,  4741, 192,  454,  194,  883,  3834, 1406,
    3581, 754,  450,  249,  1411, 4753, 450,  754,  894,  3782, 450,  1364,
    1295, 3786, 450,  3259, 214,  3261, 450,  1725, 1295, 1727, 4718, 4733,
    448,  249,  450,  1733, 452,  441,  442,  454,  417,  1739, 1740, 1741,
    754,  756,  756,  756,  756,  756,  756,  1749, 1750, 2682, 394,  2684,
    1754, 417,  739,  436,  102,  454,  64,   2072, 4451, 441,  442,  398,
    2006, 346,  1587, 1588, 4812, 450,  450,  3,    436,  249,  3282, 260,
    958,  2993, 443,  444,  445,  446,  454,  3521, 769,  346,  450,  362,
    448,  4688, 406,  415,  452,  441,  442,  5,    1748, 168,  4205, 743,
    3340, 306,  3325, 109,  1756, 4212, 3652, 3259, 2929, 3261, 353,  354,
    436,  1400, 68,   2936, 2937, 441,  442,  2940, 103,  322,  20,   155,
    441,  442,  2947, 812,  2141, 1402, 441,  442,  443,  444,  445,  446,
    158,  2612, 2613, 2614, 717,  827,  4097, 140,  721,  102,  4101, 4102,
    80,   4104, 336,  102,  245,  747,  4342, 242,  756,  2006, 2938, 2939,
    3,    441,  442,  443,  444,  445,  446,  114,  373,  119,  168,  242,
    443,  444,  445,  446,  158,  378,  4777, 129,  23,   2100, 1322, 337,
    136,  2127, 1554, 2090, 3340, 150,  109,  262,  114,  1480, 201,  136,
    148,  271,  130,  78,   183,  153,  756,  803,  126,  756,  22,   756,
    1495, 3175, 3176, 3177, 3178, 756,  3311, 3181, 3182, 3183, 3184, 3185,
    3186, 3187, 3188, 3189, 3190, 756,  756,  1514, 756,  756,  756,  756,
    3625, 38,   756,  756,  309,  80,   244,  118,  159,  139,  22,   249,
    242,  197,  193,  320,  3,    322,  5,    258,  437,  438,  439,  258,
    441,  442,  443,  444,  445,  446,  336,  4156, 2019, 217,  452,  858,
    859,  869,  1065, 3237, 3238, 1068, 1561, 1070, 217,  1072, 2313, 1074,
    241,  287,  286,  1078, 4206, 242,  109,  1574, 131,  1695, 1696, 223,
    1765, 160,  34,   301,  450,  2626, 2672, 1586, 4193, 394,  324,  257,
    256,  378,  336,  78,   78,   962,  126,  1598, 264,  4206, 4116, 4157,
    362,  1988, 1050, 2327, 299,  2954, 272,  2265, 24,   5,    245,  22,
    2961, 400,  1062, 4213, 329,  28,   1998, 78,   22,   180,  1619, 249,
    272,  324,  185,  109,  44,   432,  126,  118,  118,  104,  1064, 1632,
    1064, 102,  1627, 1642, 306,  46,   1645, 553,  109,  3,    284,  557,
    1096, 362,  1647, 4555, 1659, 109,  78,   375,  1512, 178,  4566, 118,
    1062, 4527, 361,  362,  1067, 575,  1069, 389,  1071, 407,  1073, 1119,
    1075, 1076, 1077, 373,  4161, 180,  273,  1082, 4550, 4166, 104,  4563,
    4169, 4551, 400,  336,  3037, 402,  1586, 4069, 272,  3847, 118,  362,
    8,    1127, 418,  11,   1575, 172,  415,  15,   16,   17,   320,  136,
    454,  4041, 4308, 4046, 148,  408,  104,  126,  1146, 365,  277,  367,
    388,  1192, 80,   436,  126,  339,  264,  8,    1658, 448,  11,   394,
    160,  452,  15,   16,   17,   450,  81,   322,  272,  439,  286,  362,
    4353, 3886, 1194, 1177, 109,  1645, 172,  450,  2419, 55,   452,  1203,
    336,  1746, 317,  40,   231,  396,  1192, 234,  81,   46,   109,  249,
    197,  1217, 175,  1774, 367,  131,  306,  180,  272,  1402, 194,  244,
    448,  217,  172,  451,  452,  161,  273,  273,  1236, 70,   329,  1239,
    1240, 376,  22,   113,  1244, 1245, 1265, 382,  28,   360,  4449, 306,
    336,  454,  113,  310,  264,  231,  306,  216,  234,  271,  273,  1280,
    1281, 396,  1283, 4689, 256,  1280, 1281, 362,  1283, 373,  3782, 185,
    387,  36,   3786, 375,  260,  336,  26,   264,  395,  1239, 160,  398,
    336,  231,  1244, 1245, 234,  162,  439,  3529, 11,   273,  1280, 1281,
    1974, 1283, 4452, 4553, 327,  148,  3832, 452,  229,  272,  336,  402,
    4462, 4383, 183,  399,  180,  206,  415,  450,  4776, 2193, 418,  4698,
    415,  4781, 2536, 3803, 367,  367,  200,  244,  2542, 3809, 3798, 352,
    396,  201,  355,  436,  150,  200,  175,  306,  1297, 436,  126,  180,
    88,   244,  26,   220,  2099, 327,  454,  70,   367,  454,  117,  450,
    415,  451,  3782, 375,  454,  168,  3786, 277,  108,  103,  2340, 833,
    834,  336,  217,  3670, 4832, 121,  4415, 2366, 159,  436,  205,  216,
    341,  327,  260,  2164, 242,  2370, 450,  367,  2376, 1347, 263,  2172,
    260,  2174, 1460, 209,  140,  1355, 172,  331,  126,  4475, 3495, 388,
    431,  4479, 4480, 324,  3501, 3502, 2161, 3504, 2161, 4239, 1568, 242,
    162,  1342, 2294, 2295, 2296, 2297, 4616, 260,  454,  248,  4591, 439,
    1432, 450,  2306, 363,  2183, 4893, 1392, 242,  448,  2250, 450,  451,
    452,  121,  454,  4239, 4335, 183,  1627, 913,  4626, 4627, 64,   4616,
    384,  431,  312,  415,  2019, 231,  1416, 162,  2211, 1419, 1420, 1617,
    1530, 272,  272,  81,   1534, 935,  936,  3105, 450,  387,  220,  415,
    436,  355,  336,  4328, 1546, 395,  1439, 229,  398,  431,  2634, 2710,
    272,  8,    956,  274,  11,   366,  299,  368,  2055, 48,   1502, 306,
    306,  2781, 264,  415,  341,  378,  111,  271,  2067, 3580, 3319, 450,
    339,  3418, 454,  2060, 389,  220,  2336, 392,  343,  40,   306,  137,
    8,    330,  396,  46,   1532, 1487, 336,  15,   16,   17,   1406, 3282,
    262,  1691, 3148, 1411, 308,  155,  454,  2517, 2097, 2104, 121,  101,
    123,  100,  0,    70,   336,  327,  1620, 2529, 162,  362,  302,  342,
    1026, 1027, 89,   2870, 326,  1746, 121,  394,  123,  437,  438,  439,
    336,  441,  442,  443,  444,  445,  446,  272,  450,  2012, 1648, 272,
    310,  329,  324,  2561, 3640, 158,  3642, 2515, 2516, 400,  4304, 2880,
    2520, 434,  203,  226,  437,  438,  439,  408,  441,  442,  443,  444,
    445,  446,  336,  180,  448,  306,  220,  4780, 452,  306,  362,  271,
    366,  153,  368,  361,  362,  2599, 1584, 453,  4806, 22,   159,  163,
    159,  2557, 2558, 28,   1594, 373,  1596, 244,  112,  192,  2423, 336,
    4156, 1603, 392,  415,  180,  4161, 3093, 4539, 375,  1611, 4166, 454,
    175,  4169, 402,  205,  189,  180,  189,  366,  2156, 368,  112,  111,
    436,  244,  4561, 415,  1658, 287,  1658, 204,  230,  204,  232,  254,
    111,  4193, 2322, 2720, 336,  214,  454,  214,  4537, 392,  295,  242,
    436,  299,  4206, 418,  242,  216,  2257, 254,  366,  4366, 368,  439,
    176,  1718, 450,  101,  289,  1668, 53,   1670, 239,  1672, 4096, 1674,
    452,  1676, 2210, 111,  272,  1680, 2153, 1710, 1710, 1710, 1710, 1710,
    1710, 4578, 176,  258,  4156, 126,  1738, 24,   3020, 4161, 365,  3023,
    345,  260,  4166, 1659, 2680, 4169, 2960, 4,    1705, 295,  2686, 3168,
    9,    4463, 306,  44,   187,  450,  101,  203,  366,  153,  368,  2751,
    4698, 392,  30,   31,   2331, 4193, 272,  153,  4469, 54,   325,  389,
    260,  1735, 1736, 412,  3197, 2690, 4206, 315,  1742, 1743, 392,  316,
    415,  316,  417,  185,  174,  339,  272,  187,  299,  1717, 1784, 1724,
    244,  272,  408,  295,  306,  2331, 87,   4019, 310,  4697, 226,  242,
    1770, 244,  136,  307,  3868, 3869, 4200, 272,  4202, 454,  341,  450,
    88,   1829, 148,  330,  306,  4362, 2393, 153,  148,  4045, 336,  306,
    230,  153,  232,  182,  332,  4353, 244,  4031, 108,  310,  2627, 249,
    394,  253,  242,  295,  244,  306,  320,  378,  322,  42,   336,  362,
    160,  258,  320,  144,  64,   336,  263,  2393, 310,  396,  70,   336,
    306,  417,  4112, 197,  140,  408,  63,   2060, 3103, 81,   3975, 336,
    3977, 3978, 2445, 230,  3981, 232,  190,  293,  436,  351,  336,  217,
    177,  2051, 2619, 242,  306,  217,  336,  4415, 2058, 408,  450,  2466,
    324,  109,  4575, 111,  378,  417,  1380, 434,  153,  451,  2477, 4629,
    454,  2739, 441,  442,  443,  444,  445,  446,  271,  4353, 336,  212,
    436,  148,  256,  89,   2002, 174,  153,  226,  256,  2007, 264,  72,
    451,  2011, 450,  454,  415,  365,  3344, 1528, 81,   437,  438,  439,
    1953, 441,  442,  443,  444,  445,  446,  244,  2768, 326,  3003, 449,
    311,  436,  1547, 2037, 454,  373,  8,    3012, 392,  11,   4827, 207,
    449,  1447, 1448, 1449, 1450, 454,  2790, 187,  450,  4877, 417,  4415,
    1979, 1979, 451,  1953, 3210, 454,  2624, 415,  451,  417,  217,  454,
    2096, 159,  40,   350,  2021, 436,  2023, 258,  46,   2079, 451,  2019,
    263,  454,  2769, 378,  1936, 3217, 2019, 1489, 1490, 4735, 320,  321,
    2573, 310,  2096, 312,  1498, 314,  450,  189,  70,   324,  302,  378,
    321,  256,  1508, 246,  244,  8,    308,  328,  11,   249,  204,  3798,
    15,   16,   17,   336,  3803, 366,  2124, 368,  214,  2019, 3809, 2155,
    2627, 329,  388,  348,  326,  32,   1536, 1537, 1538, 1539, 2528, 356,
    2530, 2531, 365,  4591, 451,  2085, 4615, 454,  85,   239,  2837, 287,
    8,    2155, 229,  11,   3377, 2159, 229,  15,   16,   17,   362,  3131,
    134,  301,  5,    451,  4616, 392,  454,  10,   174,  3393, 3394, 2177,
    32,   445,  2071, 18,   183,  2209, 450,  306,  452,  52,   2188, 310,
    3320, 378,  329,  445,  415,  410,  417,  408,  450,  36,   452,  2201,
    451,  3422, 402,  454,  77,   175,  406,  2209, 4382, 121,  180,  123,
    3139, 336,  4860, 415,  2965, 326,  2707, 2708, 3058, 3059, 3989, 362,
    3991, 207,  316,  450,  3995, 1631, 3997, 4591, 1634, 448,  146,  450,
    436,  452,  2737, 258,  451,  451,  1644, 454,  454,  2740, 216,  450,
    4277, 451,  450,  1653, 454,  389,  451,  451,  4616, 454,  454,  9,
    3170, 3,    2757, 402,  448,  451,  450,  3417, 454,  3419, 2164, 451,
    3602, 450,  454,  2737, 415,  324,  2172, 451,  2174, 451,  454,  451,
    454,  451,  454,  2227, 454,  450,  260,  452,  415,  451,  3204, 2235,
    454,  436,  451,  61,   62,   454,  201,  2243, 451,  2245, 121,  454,
    123,  320,  321,  450,  451,  436,  453,  3175, 3176, 3177, 3178, 13,
    14,   3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 146,
    4780, 4321, 415,  4804, 417,  249,  80,   3249, 451,  451,  254,  454,
    454,  201,  454,  451,  3208, 2844, 454,  2846, 451,  2293, 450,  454,
    451,  3507, 408,  454,  451,  260,  2851, 454,  451,  4834, 52,   454,
    3341, 3342, 136,  341,  2861, 2463, 406,  42,   3588, 3237, 3238, 2469,
    1782, 3135, 148,  2323, 450,  4068, 452,  153,  130,  3605, 433,  2331,
    2315, 2315, 451,  22,   451,  454,  4239, 454,  451,  28,   451,  454,
    260,  454,  451,  203,  2280, 454,  2905, 452,  261,  2989, 4732, 329,
    451,  261,  226,  454,  4780, 451,  451,  3140, 454,  454,  258,  2429,
    136,  244,  415,  197,  417,  4902, 249,  2930, 366,  373,  368,  254,
    148,  68,   153,  245,  246,  153,  258,  451,  362,  2451, 454,  217,
    451,  2393, 433,  454,  2573, 2459, 451,  2353, 2354, 454,  451,  261,
    434,  454,  2360, 2966, 380,  2968, 42,   441,  442,  443,  444,  445,
    446,  3322, 390,  451,  451,  223,  454,  454,  451,  433,  203,  454,
    402,  197,  256,  2980, 119,  2982, 3653, 3654, 3655, 3369, 264,  126,
    451,  415,  129,  454,  2966, 451,  2968, 157,  454,  217,  3115, 366,
    451,  368,  4355, 454,  324,  415,  451,  417,  2610, 454,  436,  451,
    3019, 443,  454,  329,  2645, 2423, 272,  3286, 2357, 2358, 2359, 226,
    450,  3036, 437,  438,  439,  454,  441,  442,  443,  444,  445,  446,
    256,  451,  451,  451,  454,  454,  2517, 3050, 264,  365,  185,  451,
    362,  450,  454,  451,  306,  380,  454,  451,  310,  451,  454,  451,
    454,  2663, 3036, 390,  451,  451,  52,   454,  454,  437,  438,  439,
    392,  441,  442,  443,  444,  445,  446,  158,  3273, 451,  336,  2517,
    454,  199,  2561, 8,    402,  452,  11,   451,  0,    451,  454,  415,
    454,  417,  451,  336,  453,  415,  226,  242,  451,  244,  453,  3276,
    3277, 3278, 388,  365,  4772, 367,  759,  254,  761,  0,    3787, 40,
    3789, 324,  436,  262,  450,  46,   419,  2561, 451,  3130, 450,  454,
    451,  272,  451,  454,  450,  454,  451,  2053, 2054, 454,  451,  450,
    2578, 454,  3153, 306,  2062, 70,   2064, 180,  141,  451,  2068, 3799,
    454,  3529, 450,  141,  2594, 415,  365,  451,  258,  452,  454,  3174,
    388,  451,  309,  310,  454,  180,  306,  2627, 2610, 2691, 258,  451,
    88,   48,   454,  451,  3828, 451,  454,  451,  454,  392,  454,  2666,
    3199, 2604, 2605, 2606, 451,  336,  451,  454,  324,  454,  141,  180,
    226,  88,   2641, 2641, 2641, 2641, 2641, 2641, 415,  134,  417,  141,
    258,  153,  4300, 2625, 2734, 2627, 141,  90,   451,  226,  3233, 454,
    136,  2663, 451,  306,  2666, 454,  451,  3487, 451,  454,  111,  454,
    148,  365,  215,  1758, 396,  153,  1761, 450,  115,  258,  158,  450,
    378,  136,  175,  163,  2170, 253,  166,  180,  399,  169,  408,  130,
    326,  148,  153,  134,  392,  207,  153,  292,  450,  64,   35,   158,
    3947, 3948, 244,  3950, 163,  419,  450,  166,  258,  2737, 169,  154,
    244,  197,  157,  415,  3616, 417,  42,   216,  42,   383,  153,  408,
    272,  3723, 324,  170,  408,  77,   153,  290,  141,  217,  141,  141,
    2226, 450,  197,  405,  450,  450,  283,  141,  2234, 2835, 2236, 324,
    34,   2954, 450,  419,  2242, 141,  141,  454,  2961, 2847, 217,  141,
    141,  141,  258,  260,  141,  258,  141,  365,  8,    3736, 141,  11,
    256,  141,  258,  15,   16,   17,   258,  153,  264,  141,  141,  141,
    362,  450,  35,   215,  365,  2817, 153,  153,  32,   226,  392,  5,
    4567, 256,  258,  258,  450,  5,    450,  450,  153,  264,  249,  450,
    450,  450,  450,  450,  5,    450,  257,  392,  5,    415,  450,  417,
    450,  450,  450,  450,  450,  450,  2316, 5,    450,  313,  5,    2859,
    416,  450,  2924, 450,  450,  450,  415,  8,    417,  450,  11,   450,
    341,  269,  15,   16,   17,   450,  293,  450,  450,  3658, 313,  450,
    450,  450,  199,  35,   92,   8,    454,  32,   11,   454,  153,  35,
    15,   16,   17,   215,  256,  450,  153,  254,  324,  452,  362,  2907,
    336,  373,  2372, 226,  2374, 32,   373,  8,    373,  324,  11,   324,
    373,  40,   15,   16,   17,   217,  373,  46,   373,  2929, 439,  362,
    388,  373,  324,  81,   2936, 2937, 141,  258,  2940, 226,  328,  212,
    373,  249,  373,  2947, 373,  395,  258,  70,   365,  185,  2954, 3105,
    412,  388,  414,  415,  365,  2961, 450,  3986, 254,  434,  2966, 373,
    2968, 373,  450,  173,  441,  442,  443,  444,  445,  446,  81,   454,
    180,  412,  141,  414,  415,  272,  396,  392,  396,  201,  103,  373,
    448,  373,  4027, 451,  452,  453,  373,  52,   2954, 3556, 52,   3552,
    3553, 373,  3006, 2961, 373,  324,  415,  373,  417,  262,  41,   365,
    3565, 448,  2480, 41,   451,  452,  453,  324,  454,  373,  201,  258,
    373,  2983, 419,  3093, 373,  258,  258,  3035, 3036, 373,  201,  324,
    373,  201,  415,  3026, 3026, 450,  3108, 35,   260,  450,  365,  24,
    258,  141,  244,  109,  175,  450,  396,  141,  201,  180,  254,  407,
    244,  3048, 3048, 223,  4340, 35,   244,  3133, 153,  450,  35,   207,
    4286, 392,  325,  450,  365,  34,   201,  202,  448,  371,  336,  371,
    158,  450,  448,  373,  373,  373,  373,  141,  141,  216,  396,  141,
    415,  3055, 417,  396,  141,  141,  373,  392,  201,  3259, 253,  3261,
    3853, 248,  8,    236,  411,  11,   236,  260,  3245, 15,   16,   17,
    450,  11,   454,  371,  247,  149,  415,  373,  417,  450,  166,  450,
    450,  158,  375,  173,  451,  260,  454,  173,  263,  450,  197,  454,
    339,  205,  259,  3824, 454,  396,  35,   266,  4786, 4787, 373,  52,
    451,  450,  3115, 373,  205,  450,  324,  260,  396,  324,  205,  249,
    249,  450,  373,  373,  373,  378,  408,  153,  249,  326,  207,  258,
    42,   257,  3140, 215,  345,  4408, 3340, 3746, 4112, 365,  373,  373,
    215,  454,  324,  258,  4419, 4121, 306,  174,  306,  333,  373,  373,
    295,  3986, 201,  35,   201,  396,  201,  396,  201,  207,  201,  3219,
    3243, 439,  341,  439,  257,  437,  438,  439,  141,  441,  442,  443,
    444,  445,  446,  153,  153,  408,  3261, 155,  254,  3418, 450,  333,
    141,  450,  141,  415,  244,  35,   244,  258,  258,  207,  153,  35,
    171,  171,  451,  448,  433,  3243, 327,  4296, 4297, 4288, 451,  451,
    141,  433,  234,  207,  258,  333,  451,  3816, 4495, 3259, 258,  3261,
    258,  451,  4912, 4913, 2746, 153,  2748, 2749, 2750, 244,  180,  180,
    3251, 3252, 3253, 3254, 437,  438,  439,  419,  441,  442,  443,  444,
    445,  446,  180,  201,  23,   164,  3372, 3866, 0,    158,  450,  434,
    454,  454,  437,  438,  439,  454,  441,  442,  443,  444,  445,  446,
    233,  373,  449,  415,  258,  52,   3883, 378,  455,  454,  362,  451,
    3895, 253,  408,  207,  437,  438,  439,  158,  441,  442,  443,  444,
    445,  446,  451,  451,  451,  451,  450,  3914, 451,  269,  451,  158,
    373,  451,  260,  276,  451,  454,  433,  451,  451,  412,  450,  225,
    4012, 450,  4597, 450,  268,  394,  450,  450,  402,  52,   435,  451,
    258,  412,  3939, 439,  258,  258,  261,  450,  183,  141,  450,  191,
    88,   373,  419,  373,  373,  3467, 249,  328,  3470, 262,  373,  141,
    141,  3968, 183,  373,  217,  4387, 3418, 22,   396,  24,   328,  277,
    373,  28,   277,  3986, 393,  373,  33,   34,   35,   373,  37,   373,
    227,  40,   41,   227,  43,   373,  45,   227,  373,  324,  373,  3447,
    136,  373,  3450, 373,  3452, 3446, 373,  324,  4426, 141,  336,  4176,
    148,  324,  4382, 324,  3418, 153,  4183, 244,  41,   2931, 158,  373,
    4195, 4506, 4283, 163,  201,  373,  166,  8,    201,  169,  11,   201,
    201,  3,    15,   16,   17,   4476, 373,  450,  3446, 4477, 451,  3495,
    383,  373,  454,  451,  42,   3501, 3502, 32,   3504, 3567, 3506, 102,
    308,  197,  4491, 40,   4493, 454,  451,  4070, 450,  46,   451,  257,
    35,   258,  141,  141,  373,  153,  168,  62,   451,  217,  141,  324,
    139,  261,  396,  324,  396,  333,  449,  449,  139,  70,   324,  437,
    438,  439,  201,  441,  442,  443,  444,  445,  446,  25,   454,  201,
    201,  3511, 3512, 11,   132,  4116, 158,  448,  269,  153,  407,  451,
    256,  158,  258,  451,  454,  264,  451,  450,  264,  412,  158,  54,
    451,  166,  454,  259,  187,  188,  189,  190,  436,  192,  313,  194,
    451,  196,  450,  198,  79,   454,  201,  3661, 72,   3601, 383,  450,
    207,  451,  153,  210,  35,   451,  207,  214,  87,   216,  3597, 3597,
    373,  451,  4588, 52,   4830, 3083, 396,  3085, 396,  313,  191,  3089,
    450,  365,  4600, 103,  3782, 383,  4657, 4605, 3786, 4607, 373,  3816,
    373,  373,  324,  324,  451,  4319, 175,  373,  451,  373,  306,  180,
    124,  451,  415,  52,   450,  365,  153,  70,   141,  102,  201,  135,
    201,  201,  4207, 383,  451,  144,  201,  450,  201,  202,  362,  3675,
    415,  205,  3678, 291,  3680, 3143, 4892, 155,  450,  4402, 186,  216,
    160,  454,  8,    4240, 450,  11,   153,  451,  35,   15,   16,   17,
    388,  4911, 177,  454,  3658, 419,  75,   365,  454,  4250, 450,  383,
    454,  373,  32,   163,  450,  333,  247,  102,  451,  158,  40,   201,
    412,  201,  414,  415,  46,   4288, 201,  260,  201,  158,  263,  52,
    208,  212,  449,  451,  450,  300,  451,  413,  413,  451,  269,  454,
    451,  450,  204,  451,  70,   450,  267,  204,  364,  229,  450,  265,
    448,  52,   169,  451,  452,  453,  451,  254,  451,  244,  383,  451,
    373,  439,  158,  415,  70,   185,  439,  249,  52,   249,  365,  454,
    64,   141,  454,  373,  201,  373,  160,  373,  158,  180,  396,  333,
    450,  272,  396,  35,   3782, 244,  127,  35,   3786, 411,  415,  158,
    258,  450,  415,  3811, 341,  3813, 188,  153,  261,  199,  290,  450,
    450,  158,  401,  300,  349,  451,  4813, 451,  4383, 275,  450,  306,
    204,  450,  81,   310,  3845, 414,  122,  314,  258,  451,  153,  3826,
    3826, 317,  321,  3909, 301,  373,  450,  373,  324,  328,  116,  249,
    450,  175,  330,  3921, 451,  336,  180,  450,  4014, 35,   4421, 228,
    249,  450,  183,  291,  450,  348,  450,  141,  451,  140,  35,   450,
    383,  356,  451,  201,  202,  262,  321,  321,  451,  347,  362,  347,
    52,   365,  52,   35,   450,  450,  216,  3892, 3362, 3363, 3364, 3365,
    450,  434,  451,  450,  437,  438,  439,  383,  441,  442,  443,  444,
    445,  446,  365,  451,  4475, 454,  451,  450,  4479, 4480, 365,  242,
    258,  247,  396,  451,  5,    365,  147,  410,  408,  291,  3892, 64,
    543,  261,  260,  64,   122,  548,  401,  550,  415,  400,  553,  415,
    555,  300,  557,  454,  450,  450,  3912, 3913, 35,   564,  158,  3917,
    3918, 568,  3966, 3967, 336,  365,  412,  298,  575,  153,  127,  3975,
    185,  3977, 3978, 258,  8,    3981, 258,  11,   333,  450,  3986, 15,
    16,   17,   3990, 35,   4628, 35,   261,  598,  261,  160,  160,  52,
    603,  320,  114,  394,  32,   608,  4156, 451,  5,    612,  450,  4161,
    40,   4568, 450,  320,  4166, 307,  46,   4169, 450,  21,   451,  341,
    32,   451,  629,  450,  450,  140,  4207, 373,  3986, 454,  4096, 454,
    158,  291,  4038, 347,  347,  450,  70,   4193, 415,  160,  160,  1463,
    415,  819,  852,  2278, 756,  859,  2627, 2136, 4206, 1245, 3417, 858,
    4043, 4043, 4239, 2790, 2952, 3527, 2205, 4067, 3506, 4498, 4286, 4657,
    4336, 4250, 3550, 678,  4005, 4340, 4318, 2714, 2411, 4739, 4206, 4624,
    4810, 2718, 4671, 4670, 691,  4759, 693,  3598, 3583, 3542, 2268, 2268,
    3412, 4097, 4657, 4249, 2812, 4101, 4102, 3566, 4104, 4030, 3005, 1533,
    2262, 4818, 713,  714,  4911, 716,  717,  4313, 434,  4892, 721,  437,
    438,  439,  2960, 441,  442,  443,  444,  445,  446,  2956, 4770, 4252,
    735,  4643, 1522, 4749, 739,  4255, 4200, 27,   4202, 1091, 745,  3661,
    4448, 1993, 3605, 175,  2689, 4567, 4300, 1102, 180,  1713, 757,  1713,
    2908, 595,  4785, 4895, 623,  1714, 1936, 1659, 734,  1937, 769,  3586,
    2641, 3827, 4731, 3317, 1326, 201,  202,  1222, 2642, 1977, 2653, 4161,
    1290, 1289, 3285, 4609, 4166, 3,    4724, 4169, 216,  2648, 8,    3812,
    1976, 11,   1292, 3261, 3773, 15,   16,   17,   3259, 3788, 4416, 4353,
    4591, 4590, 2663, 1591, 3318, 812,  1271, 3064, 4385, 4195, 32,   3212,
    4185, 35,   35,   247,  4727, 4714, 40,   1297, 4728, 828,  2645, 1807,
    46,   2578, 833,  834,  260,  4188, 2576, 263,  2488, 54,   1810, 4239,
    8,    -1,   -1,   11,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    70,   -1,   -1,   858,  859,  -1,   -1,   -1,   -1,   -1,   -1,   35,
    -1,   4415, -1,   -1,   -1,   -1,   87,   -1,   40,   -1,   -1,   -1,
    -1,   4277, 46,   -1,   883,  -1,   54,   -1,   -1,   4239, -1,   -1,
    4288, -1,   -1,   894,  4292, -1,   4294, 898,  -1,   -1,   4298, 4299,
    -1,   -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   913,  -1,
    -1,   341,  -1,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   928,  -1,   144,  -1,   -1,   -1,   -1,   935,  936,  -1,   -1,
    -1,   -1,   -1,   -1,   4323, 4323, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   952,  953,  954,  -1,   956,  -1,   958,  -1,   175,  -1,   -1,
    177,  -1,   180,  -1,   -1,   -1,   134,  4350, 4350, -1,   -1,   -1,
    144,  -1,   -1,   4525, -1,   -1,   -1,   -1,   -1,   -1,   -1,   201,
    202,  -1,   -1,   -1,   -1,   -1,   207,  -1,   -1,   -1,   -1,   212,
    -1,   -1,   216,  -1,   -1,   -1,   -1,   4426, -1,   177,  434,  175,
    -1,   437,  438,  439,  180,  441,  442,  443,  444,  445,  446,  -1,
    -1,   1024, 4445, 1026, 1027, -1,   454,  244,  -1,   247,  -1,   -1,
    -1,   4415, -1,   207,  -1,   -1,   -1,   -1,   212,  4591, 260,  -1,
    4426, 263,  8,    4624, 216,  11,   -1,   1054, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4445, -1,   -1,   4616, -1,
    -1,   -1,   -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   40,   -1,
    -1,   1084, 1085, -1,   46,   -1,   1089, 3949, 1091, -1,   -1,   -1,
    260,  310,  -1,   -1,   -1,   314,  -1,   4499, -1,   3963, -1,   -1,
    321,  -1,   -1,   -1,   70,   1112, -1,   328,  1115, -1,   -1,   1118,
    -1,   -1,   -1,   336,  -1,   -1,   -1,   341,  -1,   -1,   -1,   -1,
    1131, -1,   -1,   348,  -1,   -1,   -1,   -1,   4686, -1,   310,  356,
    -1,   -1,   314,  -1,   -1,   8,    -1,   -1,   11,   321,  -1,   -1,
    15,   16,   17,   -1,   328,  1160, -1,   376,  -1,   -1,   -1,   -1,
    336,  4548, 4548, -1,   -1,   32,   -1,   -1,   134,  341,  -1,   -1,
    348,  40,   -1,   -1,   -1,   -1,   4044, 46,   356,  1188, 1189, 1190,
    -1,   1192, -1,   -1,   -1,   410,  4744, -1,   -1,   414,  415,  -1,
    -1,   -1,   -1,   -1,   376,  -1,   -1,   70,   -1,   1212, -1,   -1,
    -1,   175,  -1,   -1,   434,  -1,   180,  437,  438,  439,  -1,   441,
    442,  443,  444,  445,  446,  -1,   4780, -1,   -1,   -1,   -1,   -1,
    4786, 4787, 410,  -1,   -1,   -1,   414,  -1,   -1,   -1,   -1,   1250,
    -1,   -1,   1253, -1,   -1,   -1,   216,  -1,   -1,   4657, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   434,  -1,   -1,   -1,   4732, -1,
    -1,   441,  442,  443,  444,  445,  446,  1282, -1,   -1,   -1,   1286,
    1287, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1297, 1298,
    1299, -1,   260,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   175,  -1,   -1,   -1,   1319, 180,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   201,  202,  -1,   -1,   -1,   -1,
    -1,   -1,   4208, 4209, 4210, -1,   4900, -1,   -1,   216,  1357, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4912, 4913, -1,   -1,   -1,   1370,
    1371, -1,   -1,   -1,   -1,   -1,   1377, -1,   -1,   1380, -1,   341,
    -1,   -1,   -1,   -1,   247,  -1,   -1,   -1,   4771, 4771, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   260,  -1,   1402, 263,  1404, 4785, 4785,
    4785, 4785, 4785, 4785, -1,   1412, -1,   -1,   1415, 4836, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4830, -1,   -1,   -1,   -1,   -1,   1439, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1447, 1448, 1449, 1450, 1451, -1,   -1,   -1,
    -1,   4836, 4836, 4836, 4836, 4836, 4836, 1462, -1,   -1,   1465, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   434,  1476, -1,   1478,
    4830, -1,   341,  441,  442,  443,  444,  445,  446,  -1,   1489, 1490,
    -1,   4351, -1,   -1,   4892, -1,   -1,   1498, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1508, -1,   -1,   -1,   -1,   -1,   4911,
    4895, 4895, 4895, 4895, 4895, 4895, -1,   -1,   -1,   -1,   -1,   -1,
    1527, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1536, 1537, 1538,
    1539, -1,   4892, -1,   -1,   -1,   -1,   -1,   -1,   1548, -1,   -1,
    -1,   -1,   -1,   -1,   1555, -1,   -1,   1558, -1,   4911, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1568, -1,   -1,   -1,   -1,   -1,   434,
    1575, -1,   437,  438,  439,  1580, 441,  442,  443,  444,  445,  446,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   454,  -1,   22,   -1,   4457,
    -1,   8,    -1,   28,   11,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1617, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1627, -1,   -1,   -1,   1631, 40,   4492, 1634,
    4494, -1,   -1,   46,   -1,   -1,   -1,   68,   -1,   1644, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1652, 1653, -1,   -1,   -1,   1657, -1,
    -1,   -1,   -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1682,
    -1,   -1,   -1,   -1,   -1,   -1,   1689, -1,   1691, -1,   119,  -1,
    1695, 1696, -1,   1698, 8,    126,  -1,   11,   129,  -1,   1705, 15,
    16,   17,   -1,   -1,   -1,   1712, -1,   -1,   -1,   -1,   1717, 1718,
    -1,   -1,   1721, -1,   32,   -1,   1725, 134,  1727, -1,   -1,   -1,
    40,   1732, 1733, -1,   -1,   -1,   46,   -1,   1739, 1740, 1741, -1,
    -1,   -1,   1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, -1,   1754,
    -1,   1756, 1757, -1,   185,  1760, 70,   -1,   4622, -1,   -1,   -1,
    175,  -1,   -1,   -1,   -1,   180,  -1,   -1,   1775, 1776, 1777, 1778,
    -1,   -1,   -1,   1782, 1783, -1,   -1,   -1,   1787, -1,   -1,   1790,
    -1,   -1,   1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, -1,
    1803, -1,   -1,   -1,   -1,   216,  1809, 1810, -1,   1812, -1,   -1,
    -1,   242,  8,    244,  1819, 11,   4680, -1,   -1,   15,   16,   17,
    -1,   254,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   262,  -1,   -1,
    -1,   -1,   32,   -1,   -1,   -1,   -1,   272,  -1,   -1,   40,   -1,
    -1,   260,  -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   175,  -1,   -1,   -1,   -1,   180,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   70,   306,  -1,   -1,   309,  310,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   201,  202,  -1,   4754, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   216,  8,    -1,   336,
    11,   -1,   -1,   -1,   15,   16,   17,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    32,   341,  11,
    1935, -1,   1937, 247,  1939, 40,   -1,   -1,   -1,   -1,   -1,   46,
    -1,   -1,   -1,   -1,   260,  -1,   -1,   263,  4814, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,   46,   70,
    -1,   -1,   399,  1974, -1,   -1,   -1,   -1,   -1,   -1,   1981, -1,
    1983, 175,  -1,   -1,   -1,   -1,   180,  -1,   -1,   -1,   70,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   201,  202,  2012, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2021, -1,   2023, -1,   216,  434,  -1,   -1,   -1,   -1,
    -1,   341,  441,  442,  443,  444,  445,  446,  -1,   2040, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2051, -1,   2053, 2054,
    -1,   247,  134,  2058, -1,   2060, -1,   2062, -1,   2064, -1,   -1,
    -1,   2068, 260,  -1,   2071, 263,  -1,   -1,   175,  -1,   -1,   -1,
    -1,   180,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2090,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   175,  198,  2100, 201,  202,
    180,  -1,   -1,   -1,   2107, 207,  -1,   -1,   -1,   -1,   2113, -1,
    -1,   216,  216,  -1,   -1,   2120, -1,   -1,   -1,   -1,   434,  -1,
    -1,   437,  438,  439,  -1,   441,  442,  443,  444,  445,  446,  -1,
    216,  2140, -1,   451,  -1,   2144, 2145, -1,   247,  -1,   -1,   341,
    -1,   -1,   2153, -1,   -1,   -1,   -1,   -1,   -1,   260,  -1,   -1,
    263,  -1,   -1,   -1,   -1,   -1,   -1,   2170, -1,   22,   -1,   -1,
    -1,   -1,   -1,   28,   -1,   -1,   -1,   -1,   260,  -1,   -1,   -1,
    22,   -1,   -1,   -1,   -1,   -1,   28,   -1,   -1,   -1,   2197, -1,
    2199, 2200, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   68,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2226, -1,   -1,   -1,   -1,   -1,   -1,   68,   2234,
    -1,   2236, -1,   -1,   -1,   -1,   341,  2242, 434,  -1,   -1,   437,
    438,  439,  -1,   441,  442,  443,  444,  445,  446,  2256, -1,   8,
    -1,   451,  11,   -1,   -1,   341,  15,   16,   17,   -1,   119,  2270,
    -1,   -1,   2273, -1,   2275, 126,  -1,   2278, 129,  -1,   2281, 32,
    -1,   119,  -1,   -1,   -1,   -1,   -1,   40,   126,  -1,   -1,   129,
    -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2307, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2316, 2317, -1,
    -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   434,  185,  -1,   437,  438,  439,  2340, 441,  442,
    443,  444,  445,  446,  -1,   -1,   -1,   185,  451,  -1,   -1,   -1,
    2355, -1,   434,  -1,   -1,   -1,   -1,   -1,   -1,   441,  442,  443,
    444,  445,  446,  2370, -1,   2372, 2373, 2374, 2375, 8,    -1,   -1,
    11,   -1,   -1,   -1,   15,   16,   17,   -1,   -1,   -1,   -1,   -1,
    -1,   242,  -1,   244,  -1,   -1,   -1,   2398, -1,   32,   -1,   -1,
    -1,   254,  -1,   -1,   242,  40,   244,  -1,   2411, 262,  -1,   46,
    -1,   -1,   -1,   -1,   254,  -1,   -1,   272,  -1,   35,   175,  -1,
    262,  -1,   -1,   180,  -1,   -1,   -1,   -1,   -1,   -1,   272,  70,
    -1,   -1,   -1,   -1,   54,   543,  -1,   -1,   -1,   -1,   548,  -1,
    201,  202,  2453, -1,   -1,   306,  -1,   -1,   309,  310,  -1,   -1,
    2463, -1,   -1,   216,  -1,   -1,   2469, -1,   306,  -1,   -1,   309,
    310,  87,   -1,   -1,   -1,   2480, -1,   -1,   -1,   -1,   -1,   336,
    2487, -1,   -1,   -1,   -1,   2492, -1,   -1,   -1,   -1,   247,  -1,
    -1,   -1,   336,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   260,
    -1,   -1,   263,  -1,   2515, 2516, 2517, 8,    -1,   2520, 11,   -1,
    -1,   -1,   15,   16,   17,   2528, 2529, 2530, 2531, -1,   144,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2541, 32,   175,  2544, -1,   2546,
    -1,   180,  399,  40,   -1,   -1,   -1,   -1,   -1,   46,   2557, 2558,
    -1,   -1,   2561, -1,   -1,   399,  -1,   177,  -1,   -1,   201,  202,
    -1,   -1,   2573, -1,   2575, -1,   2577, -1,   2579, 70,   -1,   -1,
    -1,   216,  -1,   -1,   -1,   -1,   -1,   -1,   341,  691,  -1,   -1,
    -1,   207,  -1,   -1,   2599, 22,   212,  -1,   2603, -1,   -1,   28,
    -1,   -1,   -1,   2610, -1,   2612, 2613, 2614, 247,  -1,   716,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   260,  -1,   2630,
    263,  -1,   244,  -1,   -1,   735,  -1,   -1,   -1,   -1,   -1,   2642,
    -1,   -1,   -1,   68,   2647, -1,   -1,   -1,   -1,   -1,   2653, -1,
    -1,   -1,   -1,   757,  -1,   -1,   -1,   -1,   2663, -1,   -1,   2666,
    -1,   -1,   2669, -1,   2671, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   434,  175,  -1,   437,  438,  439,  180,
    441,  442,  443,  444,  445,  446,  119,  -1,   310,  -1,   451,  -1,
    314,  126,  -1,   -1,   129,  -1,   341,  321,  201,  202,  2713, -1,
    2715, -1,   328,  -1,   -1,   2720, -1,   -1,   -1,   -1,   336,  216,
    -1,   -1,   828,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   348,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   356,  2746, -1,   2748, 2749, 2750,
    -1,   -1,   -1,   -1,   -1,   -1,   247,  -1,   -1,   -1,   -1,   -1,
    185,  -1,   376,  -1,   -1,   -1,   -1,   260,  -1,   -1,   263,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    410,  -1,   -1,   434,  414,  -1,   437,  438,  439,  -1,   441,  442,
    443,  444,  445,  446,  -1,   -1,   -1,   -1,   451,  242,  -1,   244,
    -1,   -1,   -1,   -1,   -1,   -1,   928,  -1,   -1,   254,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   262,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2849, 272,  341,  -1,   952,  953,  954,  -1,   -1,   -1,
    8,    -1,   -1,   11,   -1,   -1,   -1,   15,   16,   17,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    32,   306,  -1,   -1,   309,  310,  -1,   -1,   40,   -1,   -1,   -1,
    -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   336,  -1,   -1,   -1,   -1,
    -1,   -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2931, -1,   -1,   -1,   -1,   -1,   -1,   2938, 2939, -1,   -1,   -1,
    -1,   434,  -1,   -1,   437,  438,  439,  -1,   441,  442,  443,  444,
    445,  446,  -1,   -1,   -1,   -1,   451,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2972, 2973, -1,   -1,   -1,   399,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2988, -1,   1089,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3003, 3004, -1,   -1,   -1,   -1,   -1,   25,   -1,   3012, 3013, 3014,
    -1,   1115, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   175,
    -1,   -1,   -1,   3030, 180,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   201,  202,  -1,   -1,   71,   -1,   1000, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   216,  -1,   -1,   85,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3083, -1,   3085, -1,
    -1,   -1,   3089, -1,   -1,   -1,   -1,   -1,   -1,   1038, -1,   247,
    -1,   -1,   -1,   -1,   -1,   1046, 3105, -1,   -1,   -1,   124,  1052,
    260,  -1,   -1,   263,  3115, -1,   -1,   -1,   -1,   135,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3131, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   155,  -1,   -1,   3143, -1,   160,  -1,
    -1,   -1,   -1,   3150, 1250, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3159, -1,   -1,   -1,   -1,   -1,   3165, -1,   3167, -1,   -1,   3170,
    -1,   -1,   -1,   -1,   3175, 3176, 3177, 3178, -1,   -1,   3181, 3182,
    3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, -1,   341,  -1,   3194,
    3195, -1,   -1,   -1,   1298, -1,   -1,   -1,   -1,   3204, -1,   -1,
    -1,   3208, -1,   -1,   -1,   3212, -1,   229,  -1,   -1,   -1,   -1,
    -1,   3220, -1,   -1,   3223, -1,   3225, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3234, -1,   -1,   3237, 3238, -1,   -1,   -1,   3242,
    3243, -1,   260,  -1,   3247, -1,   3249, -1,   -1,   -1,   -1,   -1,
    -1,   3256, 3257, 3258, 3259, -1,   3261, 3262, -1,   -1,   -1,   3266,
    -1,   3268, -1,   -1,   1370, -1,   -1,   3274, 290,  -1,   -1,   1377,
    -1,   3280, 3281, 3282, -1,   -1,   434,  -1,   -1,   437,  438,  439,
    -1,   441,  442,  443,  444,  445,  446,  -1,   -1,   -1,   -1,   451,
    -1,   -1,   1404, 3306, -1,   -1,   324,  -1,   -1,   -1,   1412, -1,
    330,  1415, 3317, 333,  3319, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3340, 3341, 3342, -1,   3344, -1,   -1,   362,  -1,   -1,   -1,
    -1,   1451, -1,   369,  -1,   -1,   -1,   -1,   -1,   -1,   376,  3362,
    3363, 3364, 3365, 1465, -1,   383,  22,   -1,   13,   -1,   -1,   -1,
    28,   -1,   19,   -1,   1478, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    29,   -1,   -1,   -1,   -1,   -1,   408,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3401, -1,   -1,   -1,   -1,   48,   49,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   68,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    8,    -1,   -1,   11,   -1,   1527, -1,   15,   16,   17,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    32,   -1,   1548, -1,   8,    -1,   -1,   11,   40,   1555, -1,   15,
    16,   17,   46,   -1,   -1,   -1,   -1,   119,  -1,   -1,   -1,   -1,
    -1,   -1,   126,  -1,   32,   129,  -1,   -1,   -1,   -1,   -1,   -1,
    40,   3484, 70,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   70,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3525, -1,   3527, -1,   3529, -1,
    -1,   185,  -1,   -1,   3535, -1,   -1,   -1,   -1,   -1,   3541, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3550, -1,   194,  -1,   -1,
    -1,   -1,   -1,   1657, -1,   202,  -1,   -1,   205,  206,  -1,   208,
    -1,   -1,   211,  3570, 213,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3580, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3588, 242,  175,
    244,  -1,   -1,   -1,   180,  1695, 1696, 3598, -1,   -1,   254,  3602,
    -1,   -1,   -1,   3606, 3607, -1,   262,  -1,   -1,   -1,   1712, -1,
    -1,   201,  202,  175,  272,  -1,   -1,   -1,   180,  -1,   -1,   -1,
    1569, -1,   -1,   -1,   216,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3640, -1,   3642, -1,   201,  202,  -1,   -1,   -1,   -1,   -1,
    -1,   3652, 306,  -1,   -1,   309,  310,  -1,   216,  -1,   -1,   247,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    260,  1618, -1,   263,  -1,   1622, -1,   3682, 336,  -1,   -1,   1628,
    1629, -1,   -1,   247,  -1,   -1,   3693, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   260,  -1,   -1,   263,  -1,   -1,   1651, 1809,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1819, -1,   -1,
    3723, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3733, 3734,
    -1,   -1,   -1,   -1,   -1,   3740, 3741, -1,   -1,   -1,   3745, 399,
    -1,   -1,   -1,   3750, -1,   -1,   3753, 3754, -1,   341,  -1,   3758,
    3759, -1,   -1,   -1,   -1,   3764, 3765, 3766, 3767, 3768, -1,   -1,
    -1,   3772, 3773, -1,   3775, -1,   -1,   3778, -1,   -1,   -1,   3782,
    -1,   341,  -1,   3786, -1,   -1,   -1,   -1,   -1,   3792, -1,   -1,
    -1,   -1,   -1,   3798, -1,   -1,   -1,   -1,   3803, -1,   -1,   -1,
    -1,   -1,   3809, -1,   -1,   -1,   -1,   -1,   -1,   3816, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3824, -1,   -1,   3827, -1,   -1,   -1,
    -1,   3832, -1,   -1,   -1,   1935, -1,   1937, -1,   -1,   -1,   -1,
    -1,   22,   3845, -1,   -1,   3848, 434,  28,   -1,   437,  438,  439,
    -1,   441,  442,  443,  444,  445,  446,  -1,   -1,   -1,   -1,   451,
    -1,   3868, 3869, -1,   -1,   -1,   -1,   -1,   1974, -1,   434,  -1,
    -1,   437,  438,  439,  -1,   441,  442,  443,  444,  445,  446,  68,
    -1,   -1,   3893, 451,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   551,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   559,  -1,   -1,   -1,   -1,   -1,   -1,   566,  -1,   -1,
    569,  570,  3929, -1,   -1,   574,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   119,  -1,   585,  -1,   -1,   -1,   -1,   126,  3949, -1,
    129,  -1,   -1,   -1,   -1,   -1,   599,  -1,   -1,   -1,   -1,   -1,
    3963, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   614,  -1,   616,
    -1,   -1,   619,  -1,   621,  -1,   -1,   624,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1934, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4003, -1,   -1,   -1,   185,  -1,   -1,   -1,
    -1,   -1,   -1,   4014, -1,   -1,   -1,   -1,   4019, -1,   2120, -1,
    -1,   -1,   -1,   -1,   4027, -1,   8,    -1,   -1,   11,   -1,   -1,
    -1,   15,   16,   17,   -1,   -1,   2140, -1,   -1,   4044, 4045, -1,
    -1,   -1,   -1,   692,  -1,   -1,   32,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   40,   -1,   -1,   242,  -1,   244,  46,   -1,   -1,   -1,
    -1,   -1,   4073, -1,   -1,   254,  -1,   -1,   8,    -1,   -1,   11,
    -1,   262,  -1,   15,   16,   17,   -1,   -1,   70,   -1,   -1,   272,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   32,   -1,   747,  -1,
    -1,   -1,   -1,   -1,   40,   4112, -1,   -1,   -1,   -1,   46,   -1,
    -1,   -1,   4121, -1,   -1,   -1,   -1,   -1,   -1,   306,  -1,   -1,
    309,  310,  -1,   -1,   -1,   -1,   -1,   4138, 4139, -1,   70,   4142,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4156, 4157, 336,  -1,   -1,   4161, -1,   -1,   -1,   807,  4166,
    -1,   -1,   4169, 4170, -1,   4172, -1,   4174, -1,   2275, 4177, 4178,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4193, -1,   -1,   175,  -1,   -1,   -1,   -1,   180,  -1,
    -1,   -1,   -1,   4206, 4207, 4208, 4209, 4210, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   399,  201,  202,  -1,   -1,   -1,
    -1,   -1,   -1,   872,  8,    -1,   -1,   11,   -1,   -1,   216,  15,
    16,   17,   -1,   -1,   -1,   -1,   887,  175,  -1,   -1,   4249, 4250,
    180,  -1,   -1,   -1,   32,   -1,   899,  -1,   901,  -1,   -1,   -1,
    40,   -1,   -1,   -1,   909,  247,  46,   -1,   -1,   201,  202,  -1,
    -1,   -1,   -1,   -1,   921,  -1,   260,  924,  -1,   263,  -1,   -1,
    216,  -1,   -1,   -1,   -1,   -1,   70,   -1,   -1,   4296, 4297, -1,
    -1,   4300, -1,   -1,   4303, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4313, -1,   -1,   -1,   959,  247,  4319, -1,   4321, -1,
    -1,   -1,   -1,   -1,   4327, -1,   -1,   -1,   260,  -1,   22,   263,
    -1,   -1,   -1,   -1,   28,   4340, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4351, 4352, 4353, 2453, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   341,  -1,   -1,   -1,   -1,   8,    -1,   -1,   11,
    -1,   -1,   -1,   15,   16,   17,   -1,   -1,   68,   -1,   -1,   4382,
    -1,   -1,   4385, -1,   4387, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   175,  40,   -1,   2343, -1,   180,  -1,   46,   -1,
    -1,   -1,   -1,   -1,   4411, 341,  -1,   -1,   4415, -1,   -1,   -1,
    4419, -1,   -1,   -1,   2365, 201,  202,  4426, -1,   -1,   70,   119,
    -1,   -1,   -1,   -1,   4435, -1,   126,  2380, 216,  129,  2383, 2384,
    -1,   -1,   4445, 2388, 2389, -1,   -1,   -1,   1093, -1,   2395, -1,
    434,  -1,   4457, 437,  438,  439,  4461, 441,  442,  443,  444,  445,
    446,  -1,   -1,   247,  -1,   451,  -1,   -1,   22,   -1,   -1,   -1,
    -1,   -1,   28,   -1,   260,  4484, -1,   263,  -1,   -1,   -1,   -1,
    4491, 4492, 4493, 4494, -1,   185,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2603, 434,  4506, -1,   437,  438,  439,  -1,   441,  442,  443,
    444,  445,  446,  -1,   2461, -1,   68,   451,  -1,   -1,   4525, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   175,  -1,   -1,   -1,   -1,
    180,  -1,   4541, -1,   -1,   -1,   -1,   4546, -1,   -1,   -1,   -1,
    -1,   -1,   242,  -1,   244,  -1,   -1,   -1,   -1,   201,  202,  -1,
    -1,   341,  254,  -1,   -1,   -1,   -1,   -1,   -1,   119,  262,  -1,
    216,  -1,   -1,   -1,   126,  -1,   -1,   129,  272,  -1,   -1,   -1,
    -1,   4588, -1,   -1,   4591, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4600, -1,   -1,   -1,   -1,   4605, 247,  4607, -1,   4609, -1,
    -1,   -1,   -1,   -1,   -1,   4616, 306,  -1,   260,  309,  310,  4622,
    -1,   4624, -1,   -1,   -1,   -1,   1271, 1272, -1,   -1,   -1,   4634,
    -1,   -1,   -1,   185,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,
    336,  -1,   11,   -1,   -1,   -1,   15,   16,   17,   -1,   434,  -1,
    -1,   437,  438,  439,  -1,   441,  442,  443,  444,  445,  446,  32,
    22,   -1,   -1,   451,  -1,   -1,   28,   40,   -1,   4680, -1,   -1,
    -1,   46,   -1,   4686, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    242,  -1,   244,  -1,   -1,   341,  1343, -1,   -1,   -1,   -1,   -1,
    254,  70,   -1,   399,  -1,   -1,   4713, 4714, 262,  -1,   68,   4718,
    -1,   -1,   -1,   -1,   -1,   4724, 272,  -1,   4727, -1,   -1,   -1,
    4731, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4744, -1,   -1,   -1,   -1,   -1,   2849, -1,   -1,   -1,   4754,
    -1,   -1,   -1,   -1,   306,  -1,   1403, 309,  310,  -1,   -1,   -1,
    -1,   119,  -1,   -1,   -1,   4772, -1,   -1,   126,  -1,   -1,   129,
    -1,   4780, 2723, -1,   -1,   -1,   -1,   4786, 4787, 4788, 336,  -1,
    -1,   -1,   434,  -1,   -1,   437,  438,  439,  -1,   441,  442,  443,
    444,  445,  446,  -1,   4807, -1,   -1,   -1,   -1,   -1,   175,  4814,
    -1,   -1,   -1,   180,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   185,  -1,   -1,   -1,   -1,
    201,  202,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   399,  -1,   216,  -1,   2798, -1,   2800, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2972, 2973,
    -1,   1518, -1,   0,    -1,   -1,   -1,   -1,   -1,   -1,   247,  4886,
    4887, -1,   2988, -1,   242,  -1,   244,  -1,   -1,   18,   -1,   260,
    -1,   4900, 263,  -1,   254,  -1,   3004, 28,   -1,   30,   31,   -1,
    262,  4912, 4913, 3013, 3014, -1,   -1,   -1,   -1,   -1,   272,  -1,
    45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3030, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   65,   -1,   67,   68,
    -1,   -1,   -1,   -1,   73,   -1,   75,   -1,   306,  -1,   -1,   309,
    310,  -1,   -1,   2904, -1,   86,   -1,   88,   -1,   2910, -1,   -1,
    -1,   -1,   -1,   1616, -1,   -1,   -1,   -1,   341,  -1,   -1,   -1,
    105,  -1,   336,  108,  -1,   1630, -1,   -1,   1633, -1,   1635, -1,
    1637, -1,   -1,   120,  -1,   122,  1643, -1,   -1,   126,  -1,   -1,
    -1,   -1,   -1,   132,  -1,   -1,   22,   -1,   -1,   -1,   -1,   140,
    28,   142,  -1,   -1,   -1,   -1,   -1,   148,  -1,   -1,   -1,   -1,
    -1,   3131, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   163,  -1,
    -1,   -1,   -1,   1688, -1,   399,  -1,   1692, -1,   1694, -1,   -1,
    1697, -1,   179,  -1,   68,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   434,  -1,   -1,   437,  438,  439,  -1,
    441,  442,  443,  444,  445,  446,  -1,   -1,   -1,   -1,   451,  -1,
    -1,   -1,   -1,   -1,   -1,   218,  219,  -1,   -1,   -1,   -1,   224,
    -1,   -1,   -1,   -1,   3049, -1,   -1,   119,  -1,   -1,   235,  -1,
    -1,   -1,   126,  -1,   -1,   129,  -1,   -1,   -1,   246,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3076, 3077, -1,   3079, -1,
    3081, 3082, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3094, -1,   -1,   -1,   -1,   3256, 3257, 3258, -1,   -1,   -1,
    285,  -1,   8,    -1,   -1,   11,   -1,   -1,   -1,   15,   16,   17,
    297,  185,  -1,   -1,   -1,   302,  303,  -1,   305,  -1,   -1,   -1,
    -1,   310,  32,   3132, -1,   -1,   315,  -1,   -1,   318,  40,   -1,
    -1,   -1,   323,  -1,   46,   -1,   -1,   328,  329,  -1,   -1,   -1,
    -1,   -1,   -1,   336,  -1,   -1,   -1,   340,  -1,   -1,   -1,   8,
    -1,   -1,   11,   -1,   70,   350,  15,   16,   17,   -1,   242,  -1,
    244,  -1,   -1,   -1,   -1,   362,  -1,   -1,   -1,   -1,   254,  32,
    -1,   -1,   -1,   -1,   -1,   -1,   262,  40,   -1,   -1,   -1,   -1,
    381,  46,   -1,   -1,   272,  -1,   -1,   -1,   -1,   -1,   391,  -1,
    -1,   -1,   -1,   -1,   397,  -1,   -1,   -1,   -1,   402,  -1,   -1,
    -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   415,  -1,
    -1,   -1,   306,  -1,   -1,   309,  310,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   8,    -1,   436,  11,   -1,   -1,   -1,
    15,   16,   17,   -1,   -1,   -1,   -1,   -1,   336,  450,  -1,   -1,
    453,  175,  -1,   -1,   -1,   32,   180,  -1,   -1,   -1,   -1,   -1,
    -1,   40,   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   201,  202,  -1,   2003, 2004, -1,   -1,   -1,   2008,
    2009, -1,   -1,   -1,   2013, -1,   216,  70,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2027, -1,   -1,   -1,   175,  399,
    -1,   2034, -1,   180,  -1,   2038, 2039, -1,   -1,   2042, 2043, -1,
    -1,   247,  -1,   -1,   2049, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    201,  202,  260,  -1,   2061, 263,  2063, -1,   -1,   -1,   8,    3525,
    -1,   11,   -1,   216,  -1,   15,   16,   17,   -1,   3535, -1,   2080,
    -1,   -1,   -1,   -1,   2085, -1,   -1,   -1,   -1,   -1,   32,   -1,
    -1,   -1,   -1,   -1,   -1,   2098, 40,   -1,   -1,   -1,   247,  -1,
    46,   2106, -1,   2108, -1,   2110, 2111, 2112, 3570, -1,   -1,   260,
    2117, 2118, 263,  -1,   175,  -1,   -1,   -1,   2125, 180,  -1,   -1,
    70,   2130, -1,   -1,   -1,   -1,   2135, -1,   -1,   -1,   -1,   341,
    3598, -1,   -1,   -1,   -1,   -1,   201,  202,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   8,    -1,   -1,   11,   2160, -1,   216,  15,   16,
    17,   -1,   -1,   -1,   -1,   -1,   2171, -1,   2173, -1,   -1,   -1,
    -1,   2178, -1,   32,   -1,   2182, -1,   2184, 2185, 2186, 2187, 40,
    2189, -1,   -1,   -1,   247,  46,   3652, -1,   341,  -1,   -1,   -1,
    -1,   2202, 2203, 2204, -1,   260,  -1,   -1,   263,  -1,   -1,   2212,
    2213, -1,   -1,   -1,   -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   434,  175,  -1,   437,
    438,  439,  180,  441,  442,  443,  444,  445,  446,  -1,   -1,   -1,
    -1,   451,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   201,
    202,  -1,   -1,   -1,   -1,   2266, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   216,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   341,  -1,   -1,   434,  -1,   -1,   437,  438,  439,  -1,
    441,  442,  443,  444,  445,  446,  -1,   -1,   -1,   247,  451,  3765,
    3766, 3767, 3768, -1,   -1,   -1,   -1,   -1,   -1,   -1,   260,  -1,
    -1,   263,  175,  -1,   -1,   -1,   -1,   180,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3637, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3645, 3646, 3647, 3648, 201,  202,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   216,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   434,
    -1,   -1,   437,  438,  439,  -1,   441,  442,  443,  444,  445,  446,
    -1,   -1,   247,  -1,   451,  -1,   -1,   341,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   260,  -1,   -1,   263,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2419, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,
    11,   2454, -1,   -1,   15,   16,   17,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   32,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,   46,
    341,  -1,   -1,   -1,   434,  -1,   -1,   437,  438,  439,  -1,   441,
    442,  443,  444,  445,  446,  -1,   -1,   -1,   -1,   451,  -1,   70,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   8,    -1,   -1,   11,   -1,   -1,   -1,   15,   16,   17,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   32,   3864, -1,   -1,   36,   -1,   -1,   -1,   40,   -1,
    -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   434,  -1,   -1,
    437,  438,  439,  -1,   441,  442,  443,  444,  445,  446,  -1,   3896,
    3897, -1,   451,  -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,   25,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4073, 175,  -1,   -1,   37,
    -1,   180,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2640, 58,   -1,   201,  202,
    -1,   -1,   -1,   117,  -1,   -1,   -1,   -1,   -1,   71,   -1,   -1,
    -1,   216,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   85,
    3969, 3970, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   103,  -1,   -1,   247,  -1,   -1,   2692,
    2693, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   260,  -1,   -1,
    263,  175,  124,  -1,   -1,   2710, 180,  -1,   -1,   -1,   -1,   -1,
    -1,   135,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   143,  -1,   -1,
    -1,   -1,   -1,   201,  202,  -1,   2735, -1,   -1,   155,  -1,   -1,
    -1,   -1,   160,  2744, -1,   -1,   216,  -1,   166,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2760, 2761, -1,   -1,   -1,
    2765, 183,  -1,   -1,   -1,   2770, 2771, 2772, -1,   -1,   -1,   4076,
    -1,   247,  4079, 4080, -1,   -1,   341,  -1,   -1,   -1,   -1,   -1,
    -1,   8,    260,  -1,   11,   263,  4095, -1,   15,   16,   17,   -1,
    2801, 2802, 2803, 2804, -1,   -1,   -1,   -1,   -1,   -1,   -1,   229,
    -1,   32,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,
    -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2836,
    -1,   2838, 2839, 2840, -1,   -1,   260,  -1,   -1,   4303, -1,   2848,
    -1,   -1,   -1,   70,   -1,   271,  -1,   -1,   -1,   8,    -1,   -1,
    11,   4319, 280,  -1,   15,   16,   17,   -1,   -1,   -1,   -1,   341,
    290,  -1,   -1,   434,  -1,   -1,   437,  438,  439,  32,   441,  442,
    443,  444,  445,  446,  -1,   40,   449,  -1,   -1,   -1,   4352, 46,
    -1,   -1,   -1,   317,  -1,   -1,   -1,   -1,   322,  -1,   324,  -1,
    -1,   -1,   -1,   -1,   330,  -1,   -1,   333,  2917, -1,   -1,   70,
    -1,   -1,   -1,   -1,   2925, -1,   396,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   153,  -1,   -1,   -1,   -1,   158,  -1,   -1,   -1,   2944,
    362,  -1,   -1,   365,  -1,   -1,   -1,   369,  -1,   -1,   -1,   -1,
    175,  -1,   376,  -1,   378,  180,  -1,   -1,   434,  383,  2967, 437,
    438,  439,  -1,   441,  442,  443,  444,  445,  446,  395,  -1,   -1,
    -1,   -1,   201,  202,  -1,   -1,   -1,   -1,   -1,   -1,   408,  -1,
    -1,   -1,   -1,   -1,   -1,   216,  -1,   187,  -1,   -1,   -1,   4461,
    -1,   -1,   -1,   -1,   196,  197,  3011, -1,   -1,   -1,   3015, -1,
    204,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   175,  -1,   -1,   215,
    247,  180,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   260,  -1,   3044, 263,  -1,   -1,   -1,   -1,   -1,   201,  202,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   216,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   3074, 4375, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4541, -1,   -1,   -1,   3088,
    -1,   -1,   -1,   3092, -1,   -1,   -1,   -1,   247,  -1,   -1,   -1,
    -1,   -1,   3103, -1,   -1,   -1,   -1,   -1,   -1,   260,  -1,   -1,
    263,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   341,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   284,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,
    11,   4450, -1,   -1,   15,   16,   17,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   32,   -1,   -1,
    -1,   8,    -1,   -1,   11,   40,   -1,   -1,   15,   16,   17,   46,
    -1,   -1,   -1,   -1,   -1,   -1,   341,  -1,   -1,   -1,   -1,   4496,
    -1,   32,   -1,   -1,   35,   -1,   -1,   -1,   -1,   40,   357,  70,
    -1,   -1,   -1,   46,   -1,   -1,   -1,   434,  -1,   -1,   437,  438,
    439,  -1,   441,  442,  443,  444,  445,  446,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   434,  -1,   -1,   437,  438,  439,  152,  441,  442,
    443,  444,  445,  446,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   175,  -1,   -1,   -1,
    -1,   180,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   201,  202,
    175,  -1,   -1,   -1,   -1,   180,  3347, -1,   3349, -1,   -1,   -1,
    -1,   216,  -1,   3356, -1,   -1,   -1,   -1,   -1,   8,    550,  -1,
    11,   -1,   201,  202,  15,   16,   17,   -1,   3373, -1,   562,  -1,
    -1,   -1,   -1,   567,  -1,   216,  -1,   -1,   247,  32,   -1,   3388,
    -1,   -1,   578,  -1,   -1,   40,   -1,   -1,   -1,   260,  3399, 46,
    263,  -1,   -1,   -1,   -1,   -1,   594,  -1,   -1,   -1,   598,  -1,
    247,  -1,   3415, -1,   604,  -1,   -1,   282,  608,  609,  -1,   70,
    -1,   260,  -1,   615,  263,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   625,  626,  -1,   -1,   3442, -1,   -1,   -1,   -1,   634,  -1,
    -1,   -1,   -1,   -1,   3453, 3454, 3455, -1,   -1,   3458, 3459, 3460,
    3461, 3462, 3463, -1,   -1,   -1,   -1,   3468, 3469, -1,   3471, 3472,
    3473, 3474, 3475, 3476, 3477, -1,   341,  -1,   -1,   -1,   -1,   -1,
    -1,   3486, -1,   3488, 3489, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4805, -1,   341,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   713,  714,  3528, 175,  -1,   -1,   719,
    -1,   180,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   201,  202,
    -1,   745,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   216,  -1,   434,  -1,   -1,   437,  438,  439,  -1,   441,  442,
    443,  444,  445,  446,  -1,   8,    -1,   -1,   11,   -1,   -1,   -1,
    15,   16,   17,   -1,   -1,   -1,   -1,   434,  247,  -1,   437,  438,
    439,  -1,   441,  442,  443,  444,  445,  446,  -1,   260,  -1,   -1,
    263,  40,   -1,   -1,   -1,   -1,   -1,   46,   3625, -1,   -1,   -1,
    -1,   -1,   -1,   278,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   8,    -1,   -1,   11,   -1,   70,   -1,   15,   16,   17,
    3653, 3654, 3655, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3665, -1,   32,   -1,   -1,   35,   -1,   -1,   -1,   -1,   40,   -1,
    -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   341,  883,  -1,   -1,   -1,   -1,
    -1,   -1,   890,  -1,   70,   -1,   894,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   910,  -1,
    -1,   -1,   8,    -1,   -1,   11,   -1,   919,  -1,   15,   16,   17,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   32,   -1,   175,  -1,   -1,   -1,   -1,   180,  40,   -1,
    -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   958,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   201,  202,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   434,  70,   -1,   437,  438,  439,  216,  441,  442,
    443,  444,  445,  446,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   995,
    -1,   175,  -1,   -1,   -1,   -1,   180,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   247,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   201,  202,  260,  -1,   -1,   -1,   -1,   1030, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   216,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1050, -1,   -1,   -1,   1054, -1,
    -1,   -1,   -1,   -1,   -1,   3874, 1062, -1,   158,  3878, 3879, 3880,
    3881, 247,  -1,   3884, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   175,  260,  -1,   -1,   263,  180,  -1,   -1,   -1,   1090, -1,
    3905, 3906, 3907, 3908, -1,   3910, 3911, 1099, -1,   1101, -1,   -1,
    -1,   -1,   341,  201,  202,  3922, 3923, -1,   -1,   -1,   -1,   -1,
    1116, -1,   -1,   1119, -1,   -1,   216,  -1,   -1,   -1,   -1,   3940,
    -1,   -1,   -1,   1131, -1,   -1,   3947, 3948, -1,   3950, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   247,  -1,   -1,   -1,   -1,   -1,   -1,   1160, -1,   -1,   341,
    -1,   -1,   260,  -1,   -1,   263,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1188, 1189, 1190, -1,   1192, -1,   -1,   -1,   -1,   -1,   -1,   434,
    -1,   -1,   437,  438,  439,  -1,   441,  442,  443,  444,  445,  446,
    1212, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4034, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1236, -1,   -1,   -1,   -1,   -1,   4055, -1,   1244, 1245, -1,   341,
    -1,   -1,   -1,   -1,   -1,   1253, 1254, -1,   434,  -1,   -1,   437,
    438,  439,  -1,   441,  442,  443,  444,  445,  446,  -1,   -1,   8,
    4085, -1,   11,   -1,   -1,   -1,   15,   16,   17,   -1,   1282, -1,
    -1,   -1,   1286, 1287, -1,   -1,   -1,   -1,   -1,   -1,   -1,   32,
    -1,   -1,   35,   -1,   -1,   -1,   1302, 40,   -1,   -1,   -1,   -1,
    1308, 46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,   434,  -1,   -1,   437,
    438,  439,  4159, 441,  442,  443,  444,  445,  446,  -1,   -1,   -1,
    -1,   -1,   -1,   25,   -1,   4174, -1,   -1,   -1,   1365, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    58,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1400, -1,   -1,   -1,
    -1,   71,   72,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   81,
    -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    4241, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   103,  175,  -1,
    -1,   -1,   -1,   180,  -1,   -1,   4259, -1,   -1,   -1,   -1,   4264,
    4265, -1,   -1,   -1,   -1,   -1,   124,  -1,   1460, -1,   -1,   -1,
    201,  202,  -1,   -1,   -1,   135,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   143,  -1,   216,  1480, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   155,  -1,   -1,   -1,   -1,   160,  1495, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   1503, -1,   -1,   -1,   4320, -1,   1509, 247,  -1,
    -1,   -1,   1514, -1,   -1,   183,  -1,   -1,   -1,   -1,   -1,   260,
    -1,   -1,   263,  -1,   -1,   -1,   1530, -1,   -1,   -1,   1534, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   208,  -1,   -1,   -1,   1546, -1,
    -1,   -1,   -1,   -1,   -1,   4366, -1,   -1,   -1,   -1,   -1,   -1,
    4373, 1561, -1,   229,  -1,   -1,   -1,   -1,   1568, -1,   -1,   -1,
    -1,   -1,   1574, -1,   -1,   -1,   -1,   -1,   1580, -1,   -1,   -1,
    -1,   -1,   1586, -1,   -1,   -1,   -1,   -1,   -1,   -1,   260,  4408,
    -1,   -1,   1598, -1,   -1,   -1,   -1,   -1,   341,  -1,   4419, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   280,  -1,   -1,   1617, -1,   1619,
    1620, -1,   -1,   -1,   290,  -1,   -1,   -1,   4441, -1,   -1,   -1,
    1632, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1642, -1,
    -1,   1645, -1,   1647, 1648, -1,   -1,   317,  4465, -1,   -1,   -1,
    322,  -1,   324,  1659, -1,   4474, -1,   -1,   330,  -1,   -1,   333,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4495, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1691,
    -1,   -1,   -1,   -1,   362,  434,  -1,   365,  437,  438,  439,  369,
    441,  442,  443,  444,  445,  446,  376,  -1,   378,  -1,   -1,   -1,
    -1,   383,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   1725, -1,   1727,
    -1,   -1,   -1,   -1,   1732, 1733, -1,   -1,   -1,   -1,   -1,   1739,
    1740, 1741, 408,  -1,   -1,   1745, -1,   1747, 1748, 1749, 1750, 1751,
    1752, -1,   1754, -1,   1756, 1757, -1,   -1,   1760, -1,   4575, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1774, 1775,
    1776, 1777, 1778, 1779, -1,   -1,   -1,   1783, 4597, -1,   -1,   1787,
    -1,   -1,   1790, -1,   -1,   1793, 1794, 1795, 1796, 1797, 1798, 1799,
    1800, 1801, -1,   1803, -1,   -1,   -1,   -1,   -1,   -1,   1810, -1,
    1812, -1,   -1,   -1,   -1,   -1,   -1,   4632, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    4647, -1,
    11,   -1,   -1,   -1,   15,   16,   17,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,   11,   32,   -1,   4672,
    15,   16,   17,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,   46,
    -1,   -1,   -1,   -1,   -1,   32,   -1,   -1,   35,   8,    -1,   -1,
    11,   40,   -1,   -1,   15,   16,   17,   46,   -1,   -1,   -1,   70,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   32,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   40,   -1,   70,   -1,   -1,   -1,   46,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4743, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1939, -1,   -1,   -1,   70,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4768,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1988, -1,   -1,   -1,
    1992, 1993, -1,   -1,   -1,   -1,   -1,   -1,   175,  -1,   2002, -1,
    -1,   180,  2006, 2007, -1,   -1,   -1,   2011, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2019, 175,  -1,   -1,   -1,   -1,   180,  201,  202,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2037, 25,   -1,
    2040, 216,  -1,   -1,   -1,   -1,   201,  202,  175,  -1,   -1,   2051,
    -1,   180,  -1,   2055, -1,   -1,   2058, -1,   -1,   216,  -1,   -1,
    -1,   -1,   -1,   2067, -1,   -1,   -1,   -1,   247,  -1,   201,  202,
    -1,   -1,   -1,   2079, -1,   -1,   -1,   -1,   71,   260,  -1,   -1,
    263,  216,  -1,   -1,   247,  -1,   -1,   -1,   2096, 2097, 85,   -1,
    -1,   -1,   -1,   -1,   2104, 260,  -1,   -1,   263,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   103,  -1,   -1,   -1,   247,  -1,   109,  2123,
    2124, -1,   -1,   2127, -1,   -1,   -1,   -1,   -1,   260,  -1,   -1,
    263,  124,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    135,  -1,   -1,   -1,   -1,   -1,   -1,   2155, 143,  -1,   -1,   2159,
    -1,   -1,   -1,   -1,   -1,   -1,   341,  -1,   155,  -1,   -1,   -1,
    -1,   160,  -1,   -1,   -1,   2177, -1,   166,  -1,   -1,   -1,   -1,
    -1,   -1,   341,  -1,   2188, -1,   -1,   -1,   -1,   -1,   -1,   370,
    183,  -1,   -1,   -1,   -1,   2201, -1,   -1,   -1,   -1,   197,  -1,
    -1,   2209, -1,   -1,   -1,   204,  341,  -1,   -1,   -1,   -1,   -1,
    -1,   208,  -1,   -1,   215,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   229,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2256, 2257, -1,   434,  -1,   -1,   437,  438,  439,  2265, 441,  442,
    443,  444,  445,  446,  -1,   260,  -1,   -1,   -1,   -1,   -1,   434,
    -1,   -1,   437,  438,  439,  -1,   441,  442,  443,  444,  445,  446,
    -1,   280,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   290,
    -1,   -1,   -1,   434,  -1,   -1,   437,  438,  439,  -1,   441,  442,
    443,  444,  445,  446,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   2327,
    -1,   -1,   317,  2331, -1,   -1,   -1,   322,  -1,   324,  -1,   -1,
    2340, -1,   -1,   330,  -1,   -1,   333,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   361,  362,
    -1,   -1,   365,  -1,   -1,   -1,   369,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   378,  -1,   2393, -1,   -1,   383,  -1,   2398, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   395,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   408,  25,   -1,
    -1,   -1,   -1,   -1,   -1,   2429, -1,   -1,   -1,   -1,   37,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2445, -1,   -1,
    -1,   -1,   -1,   2451, -1,   -1,   -1,   58,   -1,   -1,   -1,   2459,
    -1,   -1,   -1,   2463, -1,   -1,   2466, -1,   71,   2469, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2477, 81,   -1,   -1,   -1,   85,   -1,
    -1,   -1,   -1,   2487, -1,   -1,   -1,   -1,   2492, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   103,  -1,   -1,   -1,   -1,   -1,   109,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2515, 2516, 2517, -1,   -1,
    2520, 124,  -1,   -1,   -1,   -1,   -1,   -1,   2528, 2529, 2530, 2531,
    135,  -1,   -1,   -1,   2536, -1,   -1,   -1,   143,  2541, 2542, -1,
    2544, -1,   2546, -1,   -1,   -1,   -1,   -1,   155,  -1,   -1,   -1,
    -1,   2557, 2558, 162,  -1,   2561, -1,   166,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   562,  -1,   -1,   -1,   2575, 567,  2577, -1,   2579,
    183,  -1,   -1,   -1,   -1,   -1,   -1,   578,  22,   -1,   -1,   -1,
    -1,   -1,   28,   -1,   -1,   -1,   -1,   2599, -1,   -1,   -1,   594,
    -1,   -1,   -1,   -1,   -1,   -1,   2610, -1,   2612, 2613, 2614, -1,
    -1,   220,  609,  53,   -1,   -1,   -1,   -1,   615,  -1,   229,  2627,
    -1,   -1,   2630, -1,   -1,   -1,   68,   626,  -1,   -1,   -1,   -1,
    -1,   -1,   2642, 634,  -1,   -1,   -1,   2647, -1,   -1,   -1,   -1,
    -1,   2653, -1,   -1,   -1,   260,  -1,   -1,   263,  -1,   -1,   2663,
    -1,   -1,   -1,   101,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   280,  -1,   2679, -1,   -1,   2682, -1,   2684, 119,  -1,   -1,
    -1,   2689, -1,   2691, 126,  -1,   -1,   129,  299,  -1,   -1,   -1,
    22,   -1,   -1,   -1,   -1,   -1,   28,   2707, 2708, -1,   -1,   -1,
    -1,   2713, 317,  -1,   -1,   -1,   -1,   -1,   -1,   324,  -1,   -1,
    -1,   -1,   -1,   330,  719,  -1,   333,  53,   -1,   -1,   2734, -1,
    -1,   2737, -1,   -1,   2740, -1,   -1,   -1,   -1,   -1,   68,   -1,
    182,  -1,   -1,   185,  -1,   -1,   -1,   -1,   -1,   2757, -1,   362,
    -1,   -1,   365,  366,  -1,   368,  369,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   378,  -1,   -1,   -1,   101,  383,  2781, -1,   -1,
    -1,   -1,   389,  -1,   -1,   392,  -1,   -1,   395,  -1,   -1,   -1,
    230,  119,  232,  -1,   -1,   -1,   -1,   -1,   126,  408,  -1,   129,
    242,  -1,   244,  2811, 2812, 2813, -1,   -1,   -1,   -1,   -1,   -1,
    254,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   262,  -1,   -1,   -1,
    -1,   -1,   -1,   2835, -1,   271,  272,  -1,   -1,   -1,   -1,   -1,
    2844, -1,   2846, 2847, -1,   -1,   -1,   2851, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   182,  2861, -1,   185,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   306,  -1,   -1,   309,  310,  311,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   336,  -1,
    -1,   2905, -1,   -1,   230,  -1,   232,  -1,   -1,   -1,   -1,   -1,
    350,  -1,   -1,   -1,   242,  -1,   244,  -1,   2924, -1,   -1,   -1,
    -1,   -1,   2930, -1,   254,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    262,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   271,  272,  -1,
    -1,   -1,   2954, -1,   -1,   -1,   -1,   -1,   2960, 2961, -1,   -1,
    -1,   399,  2966, -1,   2968, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   2980, -1,   2982, -1,   306,  -1,   -1,   309,
    310,  311,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   336,  -1,   -1,   -1,   -1,   3019, -1,   -1,   -1,   -1,
    -1,   -1,   197,  -1,   350,  -1,   -1,   -1,   -1,   204,  -1,   -1,
    3036, 3037, -1,   1030, -1,   -1,   -1,   -1,   215,  -1,   -1,   -1,
    -1,   -1,   3050, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1050,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1062,
    -1,   -1,   -1,   -1,   -1,   399,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3093, -1,   -1,
    -1,   -1,   -1,   1090, -1,   -1,   -1,   -1,   -1,   3105, -1,   -1,
    3108, -1,   1101, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1116, -1,   -1,   1119, -1,   3130, -1,
    -1,   3133, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3150, -1,   -1,   3153, -1,   -1,
    -1,   -1,   -1,   3159, -1,   -1,   -1,   -1,   -1,   3165, -1,   3167,
    -1,   -1,   3170, -1,   -1,   -1,   3174, 3175, 3176, 3177, 3178, -1,
    -1,   3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, -1,
    -1,   -1,   3194, 3195, -1,   -1,   -1,   3199, -1,   -1,   -1,   -1,
    3204, -1,   -1,   -1,   3208, -1,   3210, -1,   3212, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3220, -1,   -1,   3223, -1,   3225, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3233, 3234, -1,   -1,   3237, 3238, -1,
    -1,   -1,   3242, 3243, -1,   1236, -1,   -1,   -1,   3249, -1,   -1,
    -1,   1244, 1245, -1,   -1,   -1,   -1,   3259, -1,   3261, -1,   1254,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3274, -1,
    -1,   -1,   -1,   -1,   3280, 3281, 3282, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3306, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1308, -1,   3319, -1,   -1,   -1,   -1,
    -1,   3325, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3340, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3372, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   562,  -1,   -1,   -1,   -1,
    567,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   578,
    -1,   -1,   -1,   -1,   3412, -1,   -1,   -1,   -1,   3417, 3418, 3419,
    -1,   -1,   -1,   594,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   609,  -1,   -1,   -1,   -1,   -1,
    615,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   626,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   634,  -1,   -1,   -1,   3467,
    -1,   1460, 3470, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3507, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   1509, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3529, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1530,
    -1,   -1,   -1,   1534, -1,   -1,   -1,   -1,   719,  -1,   -1,   -1,
    3552, 3553, -1,   1546, 3556, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3565, -1,   3567, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3605, 3606, 3607, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1619, 1620, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1632, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1647, 1648, -1,   -1,
    -1,   3661, -1,   -1,   -1,   -1,   -1,   -1,   1659, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3682, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3693, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3723, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3733, 3734, -1,   3736, -1,   -1,   -1,   3740, 3741, -1,   -1,
    -1,   3745, 3746, -1,   -1,   -1,   3750, -1,   -1,   3753, 3754, -1,
    -1,   -1,   3758, -1,   -1,   -1,   -1,   -1,   3764, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3782, -1,   -1,   -1,   3786, -1,   1779, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3798, -1,   -1,   -1,   -1,   3803,
    -1,   -1,   -1,   -1,   -1,   3809, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3824, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3848, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1030, -1,   -1,   -1,   -1,
    -1,   -1,   3866, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   1050, -1,   -1,   -1,   3883, -1,   -1,   3886, -1,
    -1,   -1,   -1,   1062, -1,   -1,   -1,   3895, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3909, -1,   -1,
    -1,   -1,   3914, -1,   -1,   -1,   -1,   1090, -1,   3921, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3929, 1101, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3939, -1,   -1,   -1,   -1,   -1,   1116, -1,   -1,
    1119, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3968, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3986, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4003, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2002, -1,   -1,   4014, 2006, 2007, -1,   -1,   -1,
    2011, -1,   -1,   -1,   -1,   -1,   -1,   -1,   2019, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2037, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1236, -1,   -1,
    4068, -1,   4070, -1,   -1,   1244, 1245, -1,   -1,   -1,   -1,   -1,
    -1,   713,  714,  1254, -1,   -1,   -1,   -1,   2079, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4096, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2096, 2097, -1,   -1,   -1,   -1,   -1,   4112, 745,  -1,   -1,
    4116, -1,   -1,   -1,   -1,   4121, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   2123, 2124, -1,   -1,   2127, 1308, 4138, 4139,
    -1,   -1,   4142, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4156, -1,   -1,   -1,   -1,   4161, -1,   -1,
    2155, -1,   4166, -1,   2159, 4169, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4177, 4178, -1,   -1,   -1,   -1,   -1,   -1,   -1,   2177, -1,
    -1,   -1,   -1,   -1,   -1,   4193, -1,   -1,   -1,   2188, -1,   -1,
    4200, -1,   4202, -1,   -1,   -1,   4206, -1,   -1,   -1,   2201, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2209, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4239, 4240, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4249, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2265, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4286, -1,   4288, 1460, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4300, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1509, -1,   2331, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4353, -1,   4355,
    -1,   -1,   -1,   1530, -1,   -1,   -1,   1534, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1546, -1,   -1,   -1,   -1,
    -1,   -1,   4382, 4383, -1,   4385, -1,   4387, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2393, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4411, -1,   -1,   -1,   4415,
    -1,   -1,   -1,   -1,   -1,   4421, -1,   -1,   -1,   -1,   4426, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2429, -1,
    -1,   -1,   -1,   -1,   -1,   4445, -1,   -1,   1619, 1620, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2451, 1632, -1,   -1,
    -1,   -1,   -1,   -1,   2459, 4469, -1,   -1,   -1,   -1,   -1,   4475,
    1647, 1648, -1,   4479, 4480, -1,   -1,   -1,   4484, -1,   -1,   -1,
    1659, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1131,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4525, -1,   -1,   1160, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2536, 4546, -1,
    -1,   -1,   -1,   2542, -1,   -1,   -1,   -1,   1188, 1189, 1190, -1,
    1192, -1,   -1,   -1,   -1,   -1,   -1,   4567, 4568, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1212, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4588, -1,   -1,   4591, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4600, -1,   -1,   -1,   -1,   4605, -1,   4607,
    1779, 4609, -1,   -1,   -1,   -1,   -1,   -1,   4616, -1,   -1,   -1,
    -1,   1253, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4634, -1,   2627, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1282, -1,   -1,   -1,   1286, 1287,
    -1,   4657, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4686, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2691, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4713, 4714, -1,
    2707, 2708, -1,   -1,   -1,   -1,   -1,   -1,   4724, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4732, -1,   -1,   -1,   604,  -1,   -1,   -1,
    -1,   -1,   -1,   2734, 4744, -1,   2737, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   625,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4780, -1,   -1,   -1,   -1,   -1,   4786, 4787,
    4788, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4807, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2811, 2812, 2813, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4830, 2002, -1,   -1,   -1,   2006,
    2007, -1,   -1,   -1,   2011, -1,   -1,   -1,   2835, -1,   -1,   -1,
    2019, -1,   -1,   -1,   -1,   -1,   -1,   -1,   2847, -1,   -1,   -1,
    2851, -1,   -1,   -1,   -1,   -1,   2037, -1,   -1,   -1,   2861, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4886, 4887, -1,   -1,   -1,   -1,   4892, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4900, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2079, -1,   -1,   4911, 4912, 4913, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2096, 2097, -1,   -1,   -1,   -1,   -1,
    -1,   2924, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2123, 2124, -1,   -1,
    2127, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2960, -1,   -1,   -1,   -1,   -1,   2966, -1,   2968, -1,   -1,
    -1,   -1,   -1,   -1,   2155, -1,   -1,   -1,   2159, 2980, -1,   2982,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2177, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2188, -1,   -1,   -1,   -1,   890,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2201, -1,   -1,   -1,   -1,   -1,   -1,   -1,   2209, -1,
    -1,   -1,   910,  -1,   -1,   3036, -1,   -1,   -1,   -1,   -1,   919,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2265, -1,   -1,   -1,   -1,   -1,
    1732, -1,   3093, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   1745, -1,   1747, -1,   3108, 1750, 1751, 1752, -1,   -1,   -1,
    -1,   1757, -1,   995,  1760, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3130, -1,   -1,   3133, 1775, 1776, 1777, 1778, -1,
    -1,   -1,   -1,   1783, -1,   -1,   -1,   1787, -1,   -1,   1790, -1,
    2331, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, -1,   1803,
    -1,   -1,   -1,   -1,   -1,   -1,   1810, -1,   1812, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3210,
    -1,   -1,   2393, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1099,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2429, -1,   -1,   -1,   -1,   604,  -1,   -1,   -1,   -1,
    -1,   604,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2451, -1,   -1,   -1,   625,  -1,   -1,   -1,   2459, -1,   625,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   1939, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2536, -1,   -1,   -1,   -1,   -1,   2542, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3372, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2040, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3412, -1,   -1,
    -1,   -1,   3417, -1,   3419, -1,   -1,   -1,   -1,   -1,   1302, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2627, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3467, -1,   -1,   3470, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   1365, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3507, -1,   -1,   -1,
    2691, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1400, -1,   -1,   -1,   2707, 2708, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   890,  -1,   -1,   -1,   -1,   -1,   890,
    -1,   -1,   -1,   -1,   -1,   3552, 3553, 2734, -1,   -1,   2737, -1,
    -1,   910,  -1,   -1,   -1,   -1,   3565, 910,  3567, -1,   919,  -1,
    -1,   -1,   -1,   -1,   919,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   604,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1480, -1,   -1,   -1,
    -1,   625,  -1,   -1,   -1,   -1,   -1,   -1,   2256, -1,   -1,   1495,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1503, -1,   -1,   -1,   -1,
    2811, 2812, 2813, -1,   -1,   -1,   1514, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   995,  -1,   -1,   -1,   -1,   -1,   995,  -1,   -1,   -1,
    2835, -1,   -1,   -1,   -1,   -1,   3661, -1,   -1,   -1,   -1,   -1,
    2847, -1,   -1,   -1,   2851, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2861, -1,   -1,   1561, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1574, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1586, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1598, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2924, -1,   -1,   -1,   -1,   1099, -1,
    -1,   -1,   -1,   -1,   1099, -1,   2398, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   1642, -1,   -1,   1645, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2960, -1,   -1,   -1,   -1,   -1,   2966,
    -1,   2968, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2980, -1,   2982, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2487,
    -1,   -1,   -1,   -1,   2492, -1,   -1,   -1,   -1,   3036, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   890,  -1,   -1,   2517, -1,   -1,   -1,   -1,   -1,   -1,
    3883, -1,   -1,   3886, 2528, -1,   2530, 2531, -1,   -1,   910,  -1,
    1239, -1,   1774, -1,   -1,   2541, -1,   919,  2544, -1,   2546, -1,
    -1,   -1,   3909, -1,   -1,   -1,   3093, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3921, -1,   -1,   -1,   -1,   -1,   -1,   3108, -1,   -1,
    -1,   -1,   -1,   2575, 1812, 2577, -1,   2579, 3939, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3130, -1,   1302, 3133, -1,
    -1,   -1,   -1,   1302, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   2612, 2613, 2614, -1,   -1,   -1,   -1,   995,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3986, -1,   -1,   2630, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2642, -1,
    -1,   -1,   -1,   2647, -1,   -1,   -1,   -1,   -1,   2653, -1,   -1,
    1365, -1,   -1,   -1,   -1,   -1,   1365, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3210, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1400,
    -1,   -1,   -1,   -1,   -1,   1400, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2713, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1099, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4096, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1988, -1,   -1,   -1,   1992, 1993, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1480, -1,   -1,   -1,   -1,
    -1,   1480, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1495, -1,
    -1,   -1,   -1,   -1,   1495, -1,   1503, -1,   -1,   -1,   -1,   -1,
    1503, -1,   -1,   -1,   -1,   1514, -1,   -1,   -1,   -1,   -1,   1514,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2055, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2067, -1,   3372, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4200, -1,   4202, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1561, -1,   -1,   -1,   -1,   -1,   1561, -1,
    -1,   -1,   -1,   -1,   -1,   1574, -1,   -1,   2104, -1,   -1,   1574,
    -1,   3412, -1,   -1,   -1,   1586, 3417, -1,   3419, 4240, -1,   1586,
    -1,   -1,   -1,   -1,   -1,   1598, -1,   -1,   -1,   -1,   -1,   1598,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1302, 4286, 3467, 4288, -1,   3470,
    -1,   1642, -1,   -1,   1645, -1,   -1,   1642, -1,   -1,   1645, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3507, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1365, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3552, 3553, -1,
    -1,   -1,   -1,   -1,   -1,   2257, -1,   -1,   1400, -1,   3565, -1,
    3567, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   1774, -1,   -1,   604,  -1,   -1,   1774, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   625,  -1,   2327, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1480, -1,   -1,   -1,   -1,   -1,   4469, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1495, -1,   -1,   3661, -1,
    -1,   -1,   -1,   1503, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   1514, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3150, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3159,
    -1,   -1,   -1,   -1,   -1,   3165, -1,   3167, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   1561, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3194, 3195,
    -1,   -1,   1574, -1,   -1,   -1,   -1,   604,  -1,   -1,   -1,   -1,
    -1,   2445, 1586, -1,   3212, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3220, -1,   1598, 3223, 625,  3225, -1,   -1,   -1,   -1,   2466, -1,
    -1,   -1,   3234, -1,   -1,   -1,   -1,   -1,   -1,   2477, 3242, 3243,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1642, -1,
    -1,   1645, -1,   -1,   -1,   -1,   3274, -1,   -1,   -1,   -1,   1988,
    3280, 3281, 3282, 1992, 1993, 1988, -1,   -1,   -1,   1992, 1993, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4657, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3306, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3319, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3883, -1,   2055, 3886, -1,   -1,   -1,   -1,
    2055, -1,   890,  -1,   -1,   -1,   2067, -1,   -1,   -1,   -1,   -1,
    2067, -1,   -1,   -1,   -1,   -1,   3909, -1,   -1,   4732, 910,  -1,
    2612, 2613, 2614, -1,   -1,   -1,   3921, 919,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2104, -1,   -1,   1774, -1,
    3939, 2104, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2679, -1,   -1,   2682, 3986,
    2684, -1,   -1,   -1,   -1,   2689, -1,   -1,   -1,   -1,   -1,   995,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4830,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   890,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2740, -1,   -1,   -1,
    -1,   910,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   919,  -1,
    -1,   2757, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4892, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2781, -1,   -1,   2257, -1,   -1,   -1,   4911, -1,   2257, -1,
    -1,   4096, -1,   -1,   -1,   -1,   -1,   1099, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   995,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3606, 3607, 2844, -1,   2846, -1,   1988, -1,   -1,   -1,
    1992, 1993, 2327, -1,   -1,   -1,   -1,   -1,   2327, -1,   604,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   625,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4200, -1,   4202,
    -1,   -1,   -1,   -1,   -1,   2905, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2055, -1,   -1,   3682, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2067, -1,   3693, 2930, -1,   -1,   -1,   1099, -1,
    -1,   4240, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2954, -1,   -1,   -1,   -1,   -1,
    -1,   2961, -1,   -1,   2104, -1,   -1,   -1,   -1,   3733, 3734, -1,
    2445, -1,   -1,   -1,   3740, 3741, 2445, -1,   -1,   3745, -1,   4286,
    -1,   4288, 3750, -1,   -1,   3753, 3754, -1,   -1,   2466, 3758, -1,
    -1,   604,  -1,   2466, 3764, -1,   1302, -1,   2477, -1,   -1,   -1,
    -1,   -1,   2477, -1,   -1,   -1,   -1,   -1,   -1,   -1,   625,  3019,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3798, -1,   -1,   3037, -1,   3803, -1,   -1,   -1,   -1,
    -1,   3809, -1,   -1,   -1,   -1,   3050, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3824, -1,   -1,   -1,   -1,   1365, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3848, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1400, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2257, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1302, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   890,  -1,   -1,   -1,
    -1,   3153, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3929, 4469, -1,   910,  -1,   -1,   -1,   -1,   -1,   3174, -1,
    -1,   919,  -1,   -1,   1480, -1,   -1,   -1,   -1,   -1,   -1,   2327,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1495, -1,   -1,   -1,   3199,
    1365, -1,   -1,   1503, -1,   -1,   2679, -1,   -1,   2682, -1,   2684,
    2679, -1,   1514, 2682, 2689, 2684, -1,   -1,   -1,   -1,   2689, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3233, -1,   1400,
    -1,   -1,   -1,   4003, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   995,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   1561, -1,   -1,   -1,   -1,   -1,   2740, -1,   -1,   -1,   -1,
    -1,   2740, 1574, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3282, 890,
    2757, -1,   1586, -1,   -1,   -1,   2757, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   1598, -1,   -1,   -1,   -1,   910,  -1,   2445, -1,   -1,
    2781, -1,   -1,   -1,   919,  -1,   2781, 1480, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3325, 2466, -1,   -1,   -1,   1495, -1,
    -1,   -1,   -1,   -1,   -1,   2477, 1503, -1,   -1,   -1,   1642, -1,
    -1,   1645, -1,   -1,   -1,   1514, -1,   -1,   -1,   -1,   4657, -1,
    -1,   1099, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2844, -1,   2846, 4138, 4139, -1,   2844, 4142, 2846,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   995,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1561, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1574, -1,   -1,   -1,   4177, 4178, -1,
    -1,   -1,   3418, -1,   -1,   1586, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4732, -1,   -1,   2905, 1598, -1,   -1,   -1,   -1,   2905, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2930, -1,   -1,   -1,   -1,   -1,   2930,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1774, -1,
    -1,   1642, -1,   -1,   1645, 2954, -1,   -1,   -1,   -1,   -1,   2954,
    2961, -1,   -1,   -1,   1099, -1,   2961, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4830, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2679, -1,   -1,   2682, -1,   2684, -1,   3019, -1,
    -1,   2689, -1,   -1,   3019, -1,   -1,   -1,   3556, -1,   -1,   -1,
    1302, -1,   -1,   -1,   3037, -1,   -1,   -1,   -1,   -1,   3037, -1,
    -1,   -1,   -1,   -1,   -1,   3050, -1,   -1,   -1,   -1,   -1,   3050,
    -1,   -1,   -1,   -1,   -1,   4892, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   2740, -1,   -1,   -1,   -1,   3605, -1,   -1,
    4911, 1774, -1,   -1,   -1,   -1,   -1,   -1,   -1,   2757, -1,   -1,
    -1,   4385, -1,   1365, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2781, -1,   -1,
    -1,   -1,   -1,   4411, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   1400, -1,   -1,   -1,   4426, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3153, 4445, -1,   -1,   -1,   -1,   3153, -1,   1988, -1,   -1,   -1,
    1992, 1993, -1,   1302, -1,   -1,   -1,   -1,   -1,   3174, -1,   -1,
    2844, -1,   2846, 3174, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4484, -1,   -1,   -1,   -1,   -1,   3199, -1,
    -1,   -1,   -1,   -1,   3199, -1,   -1,   -1,   3736, -1,   1480, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3746, -1,   -1,   -1,   -1,   -1,
    -1,   1495, -1,   2055, -1,   -1,   1365, -1,   3233, 1503, -1,   -1,
    -1,   2905, 3233, 2067, -1,   -1,   -1,   -1,   1514, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4546, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2930, -1,   -1,   1400, -1,   -1,   -1,   -1,   3798, -1,
    -1,   -1,   -1,   3803, 2104, -1,   -1,   -1,   -1,   3809, -1,   -1,
    -1,   -1,   2954, -1,   -1,   -1,   -1,   1561, -1,   2961, -1,   1988,
    -1,   -1,   -1,   1992, 1993, -1,   -1,   -1,   1574, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1586, 4609, -1,   -1,
    -1,   -1,   -1,   -1,   3325, -1,   -1,   -1,   1598, -1,   3325, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3866, -1,   -1,   -1,   4634, -1,
    -1,   1480, -1,   -1,   -1,   -1,   -1,   3019, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1495, -1,   2055, -1,   -1,   -1,   -1,   3895,
    1503, 3037, -1,   -1,   1642, -1,   2067, 1645, -1,   -1,   -1,   1514,
    -1,   -1,   3050, -1,   -1,   -1,   3914, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2104, -1,   -1,   -1,   -1,
    -1,   3418, -1,   -1,   -1,   4713, 4714, 3418, -1,   -1,   1561, -1,
    -1,   2257, -1,   -1,   4724, -1,   -1,   -1,   -1,   -1,   -1,   1574,
    3968, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1586,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1598,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3153, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4788, -1,   -1,   2327,
    -1,   -1,   -1,   -1,   1774, -1,   3174, 1642, -1,   -1,   1645, -1,
    -1,   -1,   -1,   4807, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3199, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4068, -1,   4070, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3556, -1,   -1,   -1,   -1,
    -1,   3556, -1,   -1,   2257, 3233, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4116, -1,   -1,   -1,   -1,   -1,   4886, 4887,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3605, -1,   -1,   -1,
    -1,   -1,   3605, -1,   -1,   -1,   -1,   -1,   -1,   2445, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2327, -1,   -1,   -1,   2466, 1774, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2477, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3325, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4239, -1,   -1,   -1,   -1,
    -1,   -1,   1988, -1,   -1,   -1,   1992, 1993, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3736, -1,   -1,   -1,   -1,
    -1,   3736, -1,   -1,   -1,   3746, -1,   -1,   -1,   -1,   3418, 3746,
    2445, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2466, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2477, 2055, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2067, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4355, -1,   -1,   -1,   -1,   -1,   -1,   2104, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2679, -1,   1988, 2682, 4383, 2684, 1992, 1993, -1,
    -1,   2689, -1,   -1,   -1,   3866, -1,   -1,   -1,   -1,   -1,   3866,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3556, -1,   -1,   -1,   -1,   4421, 3895, -1,
    -1,   -1,   -1,   -1,   3895, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   2740, 3914, -1,   -1,   -1,   -1,   -1,   3914,
    2055, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2757, -1,   -1,
    2067, -1,   -1,   -1,   -1,   3605, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4475, -1,   -1,   -1,   4479, 4480, 2781, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3968,
    -1,   2104, -1,   -1,   -1,   3968, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2679, 2257, -1,   2682, -1,   2684,
    -1,   -1,   -1,   -1,   2689, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2844, -1,   2846, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4567,
    4568, -1,   -1,   -1,   -1,   -1,   -1,   2740, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2327, -1,   -1,   -1,   -1,   -1,   -1,
    2757, -1,   -1,   -1,   3736, 4070, -1,   -1,   -1,   -1,   -1,   4070,
    -1,   2905, 3746, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2781, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2930, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4116, -1,   -1,   -1,   -1,   -1,   4116, 2257, -1,
    -1,   -1,   2954, -1,   -1,   -1,   -1,   -1,   -1,   2961, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2844, -1,   2846, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2445, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3019, 2327, -1,   -1,   -1,
    2466, -1,   3866, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2477,
    -1,   3037, -1,   -1,   2905, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3050, -1,   -1,   -1,   -1,   3895, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2930, 4239, -1,   -1,   -1,   -1,   -1,
    4239, -1,   3914, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1204, -1,   -1,   -1,   -1,   2954, -1,   -1,   -1,   -1,   -1,   -1,
    2961, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3968, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2445, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   1267, -1,   -1,   -1,   -1,   -1,   3153, 3019, -1,
    -1,   -1,   -1,   2466, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2477, -1,   3037, -1,   3174, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4355, -1,   -1,   3050, -1,   -1,   4355, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3199, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4383, -1,   -1,   -1,   -1,   -1,
    4383, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4070, -1,   -1,   3233, -1,   -1,   -1,   2679, -1,   -1,
    2682, -1,   2684, -1,   -1,   -1,   -1,   2689, 4421, -1,   -1,   -1,
    -1,   -1,   4421, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    4116, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3153, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2740, -1,
    -1,   -1,   4475, -1,   -1,   -1,   4479, 4480, 4475, 3174, -1,   -1,
    4479, 4480, -1,   2757, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3325, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3199, -1,
    -1,   -1,   -1,   2781, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3233, -1,   -1,   -1,
    2679, -1,   -1,   2682, -1,   2684, -1,   -1,   -1,   -1,   2689, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4568,
    -1,   -1,   -1,   4239, -1,   4568, 2844, -1,   2846, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3418, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2740, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2757, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3325, -1,   -1,   2905, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2781, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2930, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2954, -1,   -1,   4355,
    -1,   -1,   -1,   2961, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1655, -1,   2844, -1,   2846,
    -1,   -1,   -1,   4383, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3418, -1,   -1,   3556, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3019, -1,   -1,   -1,   4421, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3037, -1,   -1,   2905, -1,
    -1,   -1,   -1,   -1,   -1,   3605, -1,   -1,   3050, -1,   1730, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2930,
    1744, -1,   -1,   -1,   1748, -1,   -1,   -1,   -1,   -1,   -1,   4475,
    -1,   -1,   -1,   4479, 4480, -1,   1762, 1763, 1764, -1,   1766, 2954,
    -1,   -1,   -1,   -1,   -1,   -1,   2961, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1808, -1,   -1,   3556, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3153, 3019, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1845, -1,   -1,   4568, -1,   3037, -1,
    3174, -1,   -1,   -1,   3736, -1,   -1,   -1,   3605, -1,   -1,   3050,
    -1,   -1,   3746, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3199, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3233,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   1949, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   1961, -1,   -1,   1964, -1,   3153, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3866, 3174, -1,   -1,   -1,   3736, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3746, -1,   3325, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3199, -1,   -1,   3895, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3914, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3233, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3968, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3418, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3866, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3325, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3895, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3914, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4070, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3968,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3418, -1,   -1,   3556, -1,
    4116, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3605,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4070, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4239, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3556, -1,   4116, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3736, -1,
    -1,   -1,   3605, -1,   -1,   -1,   -1,   -1,   3746, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4355,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2490, -1,   -1,   -1,   4239, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4383, -1,   -1,   -1,   -1,   -1,   -1,   2510, -1,
    2512, -1,   -1,   2515, 2516, -1,   2518, -1,   2520, -1,   -1,   -1,
    2524, -1,   -1,   2527, -1,   -1,   -1,   -1,   2532, -1,   -1,   -1,
    -1,   -1,   2538, -1,   -1,   4421, -1,   2543, 3866, -1,   -1,   -1,
    -1,   3736, 2550, 2551, 2552, 2553, -1,   -1,   -1,   2557, 2558, 3746,
    2560, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2572, 3895, 2574, -1,   -1,   -1,   -1,   -1,   -1,   2581, 2582, 2583,
    2584, 2585, 2586, 2587, 2588, 2589, 2590, -1,   3914, -1,   -1,   4475,
    -1,   -1,   -1,   4479, 4480, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4355, -1,   -1,   -1,   -1,   -1,   -1,   -1,   2618, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4383, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3968, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4421, -1,   -1,   3866,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4568, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3895, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3914,
    2728, -1,   4475, -1,   -1,   -1,   4479, 4480, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4070, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3968, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4116, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4568,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4070,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4239, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4116, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2957, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4355, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    4239, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4383, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3096, -1,   -1,   4421,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3149, -1,   -1,   -1,   4475, -1,   3155, -1,   4479, 4480, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4355, -1,   -1,   3171,
    3172, -1,   -1,   3175, 3176, 3177, 3178, -1,   -1,   3181, 3182, 3183,
    3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, -1,   -1,   -1,   -1,
    4383, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3213, -1,   -1,   3216, -1,   3218, -1,
    -1,   3221, 3222, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4421, -1,   3236, 3237, 3238, 3239, -1,   3241, -1,   -1,
    -1,   -1,   4568, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4475, -1,   3290, -1,
    4479, 4480, -1,   -1,   -1,   -1,   -1,   -1,   3300, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3337, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4568, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3529, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3683, -1,   -1,   -1,   3687,
    3688, 3689, -1,   -1,   -1,   -1,   -1,   3695, 3696, 3697, 3698, -1,
    -1,   -1,   -1,   3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711,
    3712, 3713, 3714, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3739, -1,   -1,   3742, -1,   3744, -1,   -1,   -1,
    3748, -1,   -1,   3751, 3752, -1,   -1,   3755, 3756, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3800, -1,   -1,   -1,   -1,   -1,   -1,   3807,
    3808, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3823, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4006, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4065, 4066, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4106, -1,
    -1,   -1,   -1,   4111, 4112, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4126, -1,   4128, -1,   -1,   -1,
    4132, 4133, 4134, -1,   -1,   4137, -1,   -1,   4140, 4141, -1,   -1,
    -1,   4145, -1,   -1,   -1,   4149, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    4204, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4260, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4305, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4381, 4382, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4397, 4398, 4399, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4433, 4434, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4580, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4596, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4646, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4685, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4742, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4791,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   26,   27,   28,   29,   -1,   -1,   4859, -1,   34,   -1,   -1,
    37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,
    49,   50,   -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,   4899,
    73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    121,  -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  146,  147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,
    -1,   218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
    241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,
    337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  380,  381,  382,  383,  384,
    385,  386,  387,  -1,   389,  390,  391,  392,  393,  394,  395,  -1,
    397,  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  434,  -1,   -1,   -1,   -1,   -1,   -1,   441,  442,  443,  -1,
    -1,   -1,   -1,   -1,   -1,   450,  451,  3,    4,    5,    6,    7,
    8,    9,    10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   34,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
    44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,
    56,   57,   58,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,
    92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  146,  147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  214,  215,  216,  -1,   218,  219,  220,  221,  222,  223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
    248,  249,  250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
    332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  362,  363,  364,  365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    380,  381,  382,  383,  384,  385,  386,  387,  -1,   389,  390,  391,
    392,  393,  394,  395,  -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  434,  -1,   436,  -1,   -1,   -1,
    -1,   441,  442,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  451,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   389,  390,  391,  392,  393,  394,  395,  -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
    -1,   -1,   -1,   -1,   -1,   -1,   441,  442,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   450,  451,  3,    4,    5,    6,    7,    8,    9,
    10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,
    34,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
    46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   57,
    58,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,
    94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  146,  147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,
    202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    214,  215,  216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  380,  381,
    382,  383,  384,  385,  386,  387,  -1,   389,  390,  391,  392,  393,
    394,  395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  434,  -1,   -1,   -1,   -1,   -1,   -1,   441,
    442,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  451,  3,    4,
    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,   -1,   40,
    41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,
    53,   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,
    77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,
    161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
    245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,
    269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
    341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  -1,
    389,  390,  391,  392,  393,  394,  395,  -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  434,  -1,   -1,
    3,    -1,   -1,   -1,   441,  442,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   450,  451,  18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   35,   -1,   37,   38,
    -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,
    75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  -1,   -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  -1,
    -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   451,  18,   19,   20,   21,   22,   23,   24,
    25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   42,   43,   44,   45,   -1,   47,   48,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   -1,   -1,   71,   -1,
    73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  -1,   142,  143,  144,
    -1,   -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    157,  -1,   159,  160,  161,  162,  -1,   164,  -1,   -1,   -1,   168,
    -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
    181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,
    205,  206,  207,  208,  209,  -1,   -1,   212,  -1,   214,  215,  216,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
    241,  242,  -1,   -1,   245,  246,  247,  248,  -1,   -1,   251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  267,  268,  269,  -1,   271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  -1,   282,  -1,   284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  316,  317,  318,  319,  -1,   321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  -1,   -1,   360,
    361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  -1,   378,  -1,   -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  -1,   403,  404,  405,  406,  407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   431,  432,
    433,  -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   451,  -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   42,   43,   44,   45,   -1,   47,   48,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   -1,   -1,   71,   -1,   73,
    74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  -1,   142,  143,  144,  -1,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,
    -1,   159,  160,  161,  162,  -1,   164,  -1,   -1,   -1,   168,  -1,
    170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
    182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,
    206,  207,  208,  209,  -1,   -1,   212,  -1,   214,  215,  216,  -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
    242,  -1,   -1,   245,  246,  247,  248,  -1,   -1,   251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    266,  267,  268,  269,  -1,   271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  -1,   282,  -1,   284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  316,  317,  318,  319,  -1,   321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  -1,   -1,   360,  361,
    -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  -1,   378,  -1,   -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  -1,   403,  404,  405,  406,  407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   431,  432,  433,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   451,  -1,   34,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  362,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   389,  390,  391,  392,  393,  394,  395,  -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   415,  416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
    -1,   436,  -1,   -1,   -1,   -1,   441,  442,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   450,  3,    4,    5,    6,    7,    8,    9,    10,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   34,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   57,   58,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  146,  147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,
    215,  216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
    335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  362,  363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  380,  381,  382,
    383,  384,  385,  386,  387,  -1,   389,  390,  391,  392,  393,  394,
    395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  434,  -1,   436,  -1,   -1,   -1,   -1,   441,  442,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  3,    4,    5,    6,
    7,    8,    9,    10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   34,   -1,   -1,   37,   38,   -1,   40,   41,   42,
    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
    55,   56,   57,   58,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,
    91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  146,  147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  157,  158,  159,  160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,
    211,  212,  213,  214,  215,  216,  -1,   218,  219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    247,  248,  249,  250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   374,  375,  376,  377,  378,
    379,  380,  381,  382,  383,  384,  385,  386,  387,  -1,   389,  390,
    391,  392,  393,  394,  395,  -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  434,  -1,   -1,   -1,   -1,
    -1,   -1,   441,  442,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   389,  390,  391,  392,  393,  394,  395,  -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
    -1,   -1,   -1,   -1,   -1,   -1,   441,  442,  -1,   -1,   -1,   -1,
    -1,   448,  449,  450,  3,    4,    5,    6,    7,    8,    9,    10,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   34,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   57,   58,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  146,  147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,
    215,  216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  380,  381,  382,
    383,  384,  385,  386,  387,  -1,   389,  390,  391,  392,  393,  394,
    395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  434,  -1,   -1,   -1,   -1,   -1,   -1,   441,  442,
    443,  -1,   -1,   -1,   -1,   -1,   -1,   450,  3,    4,    5,    6,
    7,    8,    9,    10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   34,   -1,   -1,   37,   38,   -1,   40,   41,   42,
    43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,
    55,   56,   57,   58,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,
    91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  109,  110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  146,  147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    247,  248,  249,  250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  380,  381,  382,  383,  384,  385,  386,  387,  -1,   389,  390,
    391,  392,  393,  394,  395,  -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  434,  -1,   -1,   -1,   -1,
    -1,   -1,   441,  442,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   26,
    27,   28,   29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   389,  390,  391,  392,  393,  394,  395,  -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
    -1,   -1,   -1,   -1,   -1,   -1,   441,  442,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   450,  3,    4,    5,    6,    7,    8,    9,    10,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   34,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   57,   58,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  146,  147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  158,  159,  160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,
    215,  216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  380,  381,  382,
    383,  384,  385,  386,  387,  -1,   389,  390,  391,  392,  393,  394,
    395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  434,  -1,   -1,   -1,   -1,   -1,   -1,   441,  442,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  3,    4,    5,    6,
    7,    8,    9,    10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   34,   -1,   -1,   37,   38,   -1,   40,   41,   42,
    43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,
    55,   56,   57,   58,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,
    91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  146,  147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    247,  248,  249,  250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  380,  381,  382,  383,  384,  385,  386,  387,  -1,   389,  390,
    391,  392,  393,  394,  395,  -1,   397,  398,  399,  400,  401,  402,
    403,  404,  405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  434,  -1,   -1,   -1,   -1,
    -1,   -1,   441,  442,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   389,  390,  391,  392,  393,  394,  395,  -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
    -1,   -1,   -1,   -1,   -1,   -1,   441,  442,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   450,  3,    4,    5,    6,    7,    8,    9,    10,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   34,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   57,   58,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  146,  147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,
    215,  216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  380,  381,  382,
    383,  384,  385,  386,  387,  -1,   389,  390,  391,  392,  393,  394,
    395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  434,  -1,   -1,   -1,   -1,   -1,   -1,   441,  442,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  3,    4,    5,    6,
    7,    8,    9,    10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   34,   -1,   -1,   37,   38,   -1,   40,   41,   42,
    43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,
    55,   56,   57,   58,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,
    91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  146,  147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    247,  248,  249,  250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  380,  381,  382,  383,  384,  385,  386,  387,  -1,   389,  390,
    391,  392,  393,  394,  395,  -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  434,  -1,   -1,   -1,   -1,
    -1,   -1,   441,  442,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   389,  390,  391,  392,  393,  394,  395,  -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
    -1,   -1,   -1,   -1,   -1,   -1,   441,  442,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   450,  3,    4,    5,    6,    7,    8,    9,    10,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   34,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   57,   58,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  146,  147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,
    215,  216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  380,  381,  382,
    383,  384,  385,  386,  387,  -1,   389,  390,  391,  392,  393,  394,
    395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  434,  -1,   -1,   -1,   -1,   -1,   -1,   441,  442,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  3,    4,    5,    6,
    7,    8,    9,    10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   34,   -1,   -1,   37,   38,   -1,   40,   41,   42,
    43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,
    55,   56,   57,   58,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,
    91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  146,  147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    247,  248,  249,  250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  380,  381,  382,  383,  384,  385,  386,  387,  -1,   389,  390,
    391,  392,  393,  394,  395,  -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  434,  -1,   -1,   -1,   -1,
    -1,   -1,   441,  442,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   389,  390,  391,  392,  393,  394,  395,  -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
    -1,   -1,   -1,   -1,   -1,   -1,   441,  442,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   450,  3,    4,    5,    6,    7,    8,    9,    10,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   34,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   57,   58,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  146,  147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,
    215,  216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,  249,  250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  380,  381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   441,  442,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  3,    4,    5,    6,
    7,    8,    9,    10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   34,   -1,   -1,   37,   38,   -1,   40,   41,   42,
    43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,
    55,   56,   57,   58,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,
    91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  146,  147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  -1,   -1,   203,  204,  205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    -1,   248,  249,  250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  380,  381,  382,  383,  384,  385,  386,  387,  -1,   389,  390,
    391,  392,  393,  394,  395,  -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  434,  -1,   -1,   -1,   -1,
    -1,   -1,   441,  442,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  -1,   245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  395,  -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   441,  442,  -1,   -1,   3,    4,
    5,    6,    7,    450,  9,    10,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,   -1,   40,
    41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,
    53,   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,
    77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,
    161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  -1,
    245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,
    269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
    341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  395,  -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  -1,   -1,   3,
    4,    5,    6,    7,    -1,   9,    10,   -1,   -1,   -1,   -1,   -1,
    -1,   450,  18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,
    28,   29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,   -1,
    40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   -1,
    52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,   75,
    76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,
    160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,
    172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,
    184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,
    208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,  219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
    -1,   245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  267,
    268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
    340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,
    364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  395,  -1,   397,  398,  399,
    400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  -1,   -1,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   -1,
    -1,   -1,   450,  18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   34,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   -1,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  -1,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  -1,   -1,   218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  244,  245,  246,  -1,   248,  249,  250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   389,  390,  391,  392,  393,  394,  395,  -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  -1,
    -1,   3,    -1,   -1,   -1,   -1,   441,  442,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   450,  18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   58,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,
    74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   89,   90,   91,   92,   93,   94,   95,   96,   97,
    98,   99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,
    -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,
    206,  207,  208,  209,  210,  -1,   212,  213,  214,  215,  216,  -1,
    218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
    242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  -1,   259,  260,  261,  262,  -1,   -1,   265,
    266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
    338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    362,  363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  395,  -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,
    410,  -1,   -1,   413,  -1,   415,  416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    -1,   -1,   436,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   450,  -1,   18,   19,   20,   21,   22,   23,
    24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
    48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   58,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,
    -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,   94,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,
    204,  205,  206,  207,  208,  209,  210,  -1,   212,  213,  214,  215,
    216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
    240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   259,  260,  261,  262,  -1,
    -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  335,
    336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  395,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   450,  18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   58,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,
    215,  216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  18,   19,   20,   21,
    22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
    46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    58,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   93,
    94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,
    202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    214,  215,  216,  -1,   218,  219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  -1,   -1,   3,    4,    5,    -1,   -1,   -1,
    9,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  18,   19,   20,
    21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,
    45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,
    -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,
    69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,
    -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,
    -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,
    129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,
    141,  142,  143,  144,  145,  146,  147,  -1,   149,  150,  151,  152,
    -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,
    165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,
    177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,
    189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,
    201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,
    213,  214,  215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,
    -1,   250,  251,  252,  253,  254,  255,  -1,   257,  258,  -1,   260,
    261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,
    273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,
    285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,
    333,  334,  -1,   336,  337,  338,  339,  340,  341,  342,  343,  344,
    345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,
    369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  380,
    381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,
    393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,
    405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  -1,   -1,   3,    -1,   -1,   -1,   -1,
    441,  442,  443,  -1,   -1,   -1,   -1,   -1,   -1,   450,  18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   30,   31,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
    44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,
    92,   -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  214,  215,  216,  -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  241,  242,  243,  -1,   245,  246,  247,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  341,  342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  362,  363,  364,  365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  -1,   -1,   436,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   450,  -1,
    18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
    42,   43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,
    54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,
    66,   67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,
    78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,
    90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,
    126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,
    138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,
    150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,
    162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,
    174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,
    186,  -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,
    198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
    -1,   -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,  -1,
    -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  -1,   245,
    246,  247,  248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,
    -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,
    270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,
    282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,
    318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  341,
    342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,
    366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,
    378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,
    390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,
    402,  403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,
    -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  432,  433,  -1,   -1,   3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    450,  18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
    41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,
    -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,
    161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,
    245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,
    -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    329,  330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,
    -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  362,  363,  -1,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,
    413,  -1,   415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  -1,   -1,   436,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   450,  -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,
    75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,
    -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,
    243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  -1,
    -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   450,  18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,
    74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,
    -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,
    206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,
    242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   450,  18,   19,   20,   21,   22,   23,   24,
    25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,
    73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,
    241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   450,  18,   19,   20,   21,   22,   23,
    24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,
    -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,
    -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,
    -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,
    -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,
    240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,
    -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,
    336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  -1,   -1,   -1,   -1,   -1,   3,    4,    5,    -1,   -1,
    8,    9,    -1,   -1,   -1,   -1,   450,  15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
    44,   45,   -1,   47,   48,   49,   50,   51,   52,   53,   54,   55,
    56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
    68,   -1,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
    92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
    116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
    128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
    140,  -1,   142,  143,  144,  -1,   146,  147,  148,  149,  150,  151,
    152,  153,  154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
    164,  -1,   166,  -1,   168,  169,  170,  171,  172,  173,  174,  175,
    176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
    188,  189,  -1,   191,  192,  193,  194,  195,  196,  197,  198,  199,
    200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
    212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  241,  242,  -1,   244,  245,  246,  247,
    248,  249,  -1,   251,  252,  253,  254,  255,  256,  257,  258,  259,
    260,  261,  262,  263,  264,  265,  -1,   267,  268,  269,  -1,   271,
    272,  273,  274,  275,  276,  277,  278,  279,  280,  -1,   282,  -1,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
    -1,   321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
    332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  -1,   359,  360,  361,  362,  363,  364,  365,  366,  367,
    368,  369,  370,  371,  372,  373,  374,  375,  376,  -1,   378,  -1,
    380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,
    392,  393,  394,  395,  396,  397,  398,  399,  400,  401,  -1,   403,
    404,  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   431,  432,  433,  -1,   3,    -1,   437,  438,  439,
    8,    441,  442,  443,  444,  445,  446,  15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  -1,   3,    -1,   437,  438,  439,
    8,    441,  442,  443,  444,  445,  446,  15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  -1,   3,    -1,   437,  438,  439,
    8,    441,  442,  443,  444,  445,  446,  15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  -1,   3,    -1,   437,  438,  439,
    8,    441,  442,  443,  444,  445,  446,  15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  -1,   3,    -1,   437,  438,  439,
    8,    441,  442,  443,  444,  445,  446,  15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  -1,   3,    -1,   437,  438,  439,
    8,    441,  442,  443,  444,  445,  446,  15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  -1,   3,    -1,   437,  438,  439,
    8,    441,  442,  443,  444,  445,  446,  15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  3,    -1,   -1,   437,  438,  439,
    -1,   441,  442,  443,  444,  445,  446,  -1,   -1,   18,   19,   20,
    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
    45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
    57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
    93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
    117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
    129,  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
    141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
    153,  154,  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,
    165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
    177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
    189,  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
    201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
    213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
    249,  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
    261,  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
    273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
    333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
    345,  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
    369,  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
    381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,  392,
    393,  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
    405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   443,  -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,
    46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,
    -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   443,  -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   -1,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   -1,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,
    -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  -1,   142,
    143,  144,  -1,   -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  -1,   -1,
    -1,   168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  180,  181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  -1,   214,
    215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  -1,   -1,   245,  246,  247,  248,  -1,   -1,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   264,  265,  266,  267,  268,  269,  -1,   271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  -1,   282,  -1,   284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  -1,   321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    -1,   336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  -1,
    -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  -1,   378,  -1,   -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    -1,   -1,   397,  398,  399,  400,  401,  -1,   403,  404,  405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    -1,
    431,  432,  433,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    443,  18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
    41,   42,   43,   44,   45,   -1,   47,   48,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   -1,   -1,   71,   -1,   73,   74,   75,   76,
    77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,   -1,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  -1,   142,  143,  144,  -1,   -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,
    161,  162,  -1,   164,  -1,   -1,   -1,   168,  -1,   170,  171,  172,
    173,  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
    185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,
    209,  -1,   -1,   212,  -1,   214,  215,  216,  -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  -1,   -1,
    245,  246,  247,  248,  -1,   -1,   251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   264,  265,  266,  267,  268,
    269,  -1,   271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    -1,   282,  -1,   284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,
    317,  318,  319,  -1,   321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,
    341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  -1,   -1,   360,  361,  -1,   363,  364,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    -1,   378,  -1,   -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  -1,   403,  404,  405,  406,  407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3,    -1,   431,  432,  433,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   443,  18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,
    47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,
    203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,
    215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  3,    4,    5,    -1,   -1,   -1,   9,    -1,   -1,
    443,  -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,
    24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
    48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,
    -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,
    96,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  109,  110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  146,  147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,
    204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,  215,
    216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
    240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  258,  -1,   260,  261,  262,  -1,
    -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,
    336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  380,  381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  3,    4,    5,    -1,   -1,   -1,   9,    441,  442,  -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,
    73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    109,  110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  146,  147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
    241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,  252,
    253,  254,  255,  -1,   257,  258,  -1,   260,  261,  262,  -1,   -1,
    265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  380,  381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  3,    4,    5,    -1,   -1,   -1,   9,    441,  442,  -1,   -1,
    -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,
    74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    146,  147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,
    -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,
    206,  207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
    242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  258,  -1,   260,  261,  262,  -1,   -1,   265,
    266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    3,    -1,   5,    -1,   -1,   -1,   9,    441,  442,  -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  -1,   245,  246,  247,  248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  258,  -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,
    -1,   -1,   -1,   -1,   -1,   9,    441,  442,  -1,   -1,   -1,   -1,
    -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
    28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
    40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,
    52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,
    76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   158,  -1,
    160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,
    172,  173,  174,  -1,   176,  177,  178,  179,  180,  181,  182,  183,
    184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,
    208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,
    220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,
    -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,
    268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,
    340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,
    -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,
    400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    4,
    5,    -1,   -1,   -1,   9,    441,  442,  -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
    41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
    53,   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
    65,   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
    77,   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
    113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
    125,  126,  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
    149,  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
    161,  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
    173,  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
    185,  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
    197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,
    209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
    245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
    257,  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,
    269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
    281,  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
    365,  366,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,
    377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,
    389,  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
    401,  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
    413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
    42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
    54,   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
    66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
    114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
    126,  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
    138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
    150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
    162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
    174,  175,  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
    186,  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
    198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
    210,  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,
    222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
    246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
    258,  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
    270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
    282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
    318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
    330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
    366,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,
    378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,
    390,  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
    402,  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
    414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
    55,   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
    79,   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
    91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
    115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
    127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
    139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
    151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
    163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
    175,  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
    187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
    199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
    211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    247,  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
    259,  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
    271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
    283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
    331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
    367,  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
    379,  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
    391,  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
    403,  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
    415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
    44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   58,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,
    92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  214,  215,  216,  -1,   218,  219,  220,  221,  222,  223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  241,  242,  243,  -1,   245,  246,  247,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  395,  -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  3,    -1,   5,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,
    21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,
    45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,
    -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,
    69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,
    -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,
    -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,
    129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,
    141,  142,  143,  144,  145,  146,  147,  -1,   149,  150,  151,  152,
    -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,
    165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,
    177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,
    189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,
    201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,
    213,  214,  215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,
    -1,   250,  251,  252,  253,  254,  255,  -1,   257,  258,  -1,   260,
    261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,
    273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,
    285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,
    333,  334,  -1,   336,  337,  338,  339,  340,  341,  342,  343,  344,
    345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,
    369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  380,
    381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,
    393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,
    405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   26,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
    46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,
    -1,   -1,   96,   -1,   -1,   99,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,
    202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    214,  215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,
    -1,   96,   -1,   -1,   99,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,
    215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    395,  -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,
    24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
    48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,
    -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,
    96,   -1,   -1,   99,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  166,  167,
    168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,
    204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,  215,
    216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
    240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,
    -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  335,
    336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,
    73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,
    -1,   -1,   99,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
    241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,
    337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,
    74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,
    -1,   99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,
    -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,
    206,  207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
    242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,
    338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,
    99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  -1,   245,  246,  247,  248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,
    28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
    40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   -1,
    52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,   75,
    76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,   99,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,
    160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,
    172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,
    184,  185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,
    208,  209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,  219,
    220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
    -1,   245,  246,  247,  248,  -1,   250,  251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  267,
    268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
    340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,
    364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,
    400,  401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
    41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,
    77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,   99,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,
    161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  -1,
    245,  246,  247,  248,  -1,   250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,
    269,  270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
    341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
    42,   43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,
    54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,
    66,   67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,
    78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,
    90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,   99,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,
    126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,
    138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,
    150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,
    162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,
    174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,
    186,  -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,
    198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
    -1,   -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,  -1,
    -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  -1,   245,
    246,  247,  248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,
    -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,
    270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,
    282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,
    318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
    342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,
    366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,
    378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,
    390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,
    402,  403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,
    -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   5,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
    43,   44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,
    55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,
    91,   92,   -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  109,  110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  214,  215,  216,  -1,   218,  219,  220,  -1,   -1,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  243,  -1,   245,  246,
    247,  248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  341,  342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,
    391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   30,   31,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
    44,   45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,
    92,   -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  214,  215,  216,  -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  241,  242,  243,  -1,   245,  246,  247,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  341,  342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  3,    -1,   5,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,
    21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,
    45,   46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,
    -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,
    69,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,
    -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,
    -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,
    129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,
    141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,
    -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,
    165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,
    177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,
    189,  190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,
    201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,
    213,  214,  215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,
    -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,
    261,  262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,
    273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,
    285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,
    333,  334,  -1,   336,  337,  338,  339,  340,  341,  342,  343,  344,
    345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,
    369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,
    381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,
    393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,
    405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  3,    -1,   5,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
    46,   47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,
    -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,
    202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    214,  215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  -1,   336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,
    -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,
    215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    -1,   336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,
    24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
    48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,
    -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,
    96,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,
    204,  205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,  215,
    216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
    240,  241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,
    -1,   265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,
    336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,   48,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   71,   -1,
    73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    157,  -1,   159,  160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  189,  190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  214,  215,  216,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
    241,  242,  243,  -1,   245,  246,  247,  248,  -1,   250,  251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  402,  403,  -1,   405,  406,  407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   64,   65,   66,   67,   68,   69,   -1,   -1,   72,   73,
    74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   84,   85,
    86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  155,  156,  -1,
    -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,
    206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,
    242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   389,  390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   64,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,
    75,   76,   -1,   78,   79,   80,   81,   82,   83,   84,   85,   86,
    87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  155,  156,  -1,   -1,
    -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  216,  -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,
    243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   389,  390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
    28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
    40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,
    52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,
    76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    88,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,
    160,  161,  162,  163,  164,  165,  -1,   167,  168,  -1,   170,  171,
    172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,
    184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,
    208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,
    220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,
    -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,
    268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  329,  330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,
    340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,
    -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,
    400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
    41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,
    -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   88,
    -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,
    161,  162,  163,  164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,
    245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,
    -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    329,  330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,
    -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
    -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,
    54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   64,   65,
    66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,
    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   -1,   -1,
    90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,
    126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,
    138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,
    150,  151,  152,  -1,   154,  155,  156,  -1,   -1,   -1,   160,  161,
    162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,
    174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,
    186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,
    198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,
    -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,
    -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,
    246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,
    -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,
    270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,
    282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,
    318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,
    342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,
    366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,
    378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   389,
    390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,
    402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,
    -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,
    43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,
    55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   88,   -1,   90,
    91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,
    -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
    331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,
    391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  155,  156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  362,  363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,
    21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,
    45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,
    -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,
    69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,
    -1,   82,   83,   84,   85,   86,   87,   88,   -1,   90,   91,   92,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,
    129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,
    141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,
    -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,
    165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,
    177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,
    -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,
    -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,
    213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,
    -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,
    261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,
    273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,
    285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
    333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,
    345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,
    369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,
    381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,
    393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,
    405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   26,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,
    46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,
    -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   259,  260,  261,
    262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   30,   31,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,
    47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,
    203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,
    215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,
    24,   25,   26,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,
    -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,
    -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,
    -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,
    -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,
    240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,
    -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,
    336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  395,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   26,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,
    73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,
    241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  395,  -1,
    397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    26,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,
    74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,
    -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,
    206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,
    242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   26,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,
    75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,
    -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,
    243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
    28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
    40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,
    52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,
    76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,
    160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,
    172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,
    184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,
    208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,
    220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,
    -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,
    268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,
    340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,
    -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,
    400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
    41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,
    -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,
    161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,
    245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,
    -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,
    -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
    -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,
    54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,
    66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,
    78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,
    90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,
    126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,
    138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,
    150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,
    162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,
    174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,
    186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,
    198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,
    -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,
    -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,
    246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,
    -1,   259,  260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,
    270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,
    282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,
    318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,
    342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,
    366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,
    378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,
    390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,
    402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,
    -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,
    43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,
    55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,
    91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,
    -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,
    391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,
    21,   22,   23,   24,   25,   26,   27,   28,   29,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,
    45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,
    -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,
    69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,
    -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,
    129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,
    141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,
    -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,
    165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,
    177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,
    -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,
    -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,
    213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,
    -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,
    261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,
    273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,
    285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,
    333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,
    345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,
    369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,
    381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,
    393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,
    405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
    46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,
    -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,
    47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,
    203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,
    215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   259,  260,  261,  262,
    -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,
    24,   25,   26,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,
    -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,
    -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,
    -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,
    -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,
    240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,
    -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,
    336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   26,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,
    73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,
    241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,
    74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,
    -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,
    206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,
    242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    362,  363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    3,    -1,   5,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,
    75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,
    -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,
    243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,
    28,   29,   -1,   -1,   -1,   -1,   -1,   35,   -1,   37,   38,   -1,
    40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,
    52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,
    76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,
    160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,
    172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,
    184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,
    208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,
    220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,
    -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,
    268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,
    340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,
    -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,
    400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   35,   -1,   37,   38,   -1,   40,
    41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,
    -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,
    161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,
    245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,
    -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,
    -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
    -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,
    54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,
    66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,
    78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,
    90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,
    126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,
    138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,
    150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,
    162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,
    174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,
    186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,
    198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,
    -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,
    -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,
    246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,
    -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,
    270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,
    282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,
    318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,
    342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,
    366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,
    378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,
    390,  391,  392,  393,  394,  -1,   396,  397,  398,  399,  400,  401,
    402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,
    -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,
    43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,
    55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,
    91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,
    -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,
    391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,
    21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,
    45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,
    -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,
    69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,
    -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,
    129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,
    141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,
    -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,
    165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,
    177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,
    -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,
    -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,
    213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,
    -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,
    261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,
    273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,
    285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,
    333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,
    345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,
    369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,
    381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,
    393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,
    405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,
    46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,
    -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,
    47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,
    203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,
    215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,
    24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,
    -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,
    -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,
    -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,
    -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,
    240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,
    -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,
    336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,
    73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,
    241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,
    74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,
    -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,
    206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,
    242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,
    75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,
    -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,
    243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,
    28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
    40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,
    52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,
    76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,
    160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,
    172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,
    184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,
    208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,
    220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,
    -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,
    268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,
    340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,
    -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,
    400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
    41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,
    -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,
    161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,
    245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,
    -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,
    -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
    -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,
    54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,
    66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,
    78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,
    90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,
    126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,
    138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,
    150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,
    162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,
    174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,
    186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,
    198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,
    -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,
    -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,
    246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,
    -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,
    270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,
    282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,
    318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,
    342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,
    366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,
    378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,
    390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,
    402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,
    -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,
    43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,
    55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,
    91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,
    -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,
    391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,
    21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,
    45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,
    -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,
    69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,
    -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,
    129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,
    141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,
    -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,
    165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,
    177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,
    -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,
    -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,
    213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,
    -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,
    261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,
    273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,
    285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,
    333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,
    345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,
    369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,
    381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,
    393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,
    405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,
    46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,
    -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,
    47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,
    203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,
    215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,
    24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,
    -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,
    -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,
    -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,
    -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,
    240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,
    -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,
    336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,
    73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,
    241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,
    74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,
    -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,
    206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,
    242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,
    75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,
    -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,
    243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,
    28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
    40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,
    52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,
    76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,
    160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,
    172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,
    184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,
    208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,
    220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,
    -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,
    268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,
    340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,
    -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,
    400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
    41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,
    -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,
    161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,
    245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,
    -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,
    -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
    -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,
    54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,
    66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,
    78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,
    90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,
    126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,
    138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,
    150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,
    162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,
    174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,
    186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,
    198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,
    -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,
    -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,
    246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,
    -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,
    270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,
    282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,
    318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,
    342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,
    366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,
    378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,
    390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,
    402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,
    -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,
    43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,
    55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,
    91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,
    -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,
    391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   35,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   -1,   337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,
    21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,
    45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,
    -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,
    69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,
    -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,
    129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,
    141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,
    -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,
    165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,
    177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,
    -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,
    -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,
    213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,
    -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,
    261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,
    273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,
    285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,
    333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,
    345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,
    369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,
    381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,
    393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,
    405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,
    46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,
    -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,
    142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,
    -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,
    178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,
    -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,
    -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,
    250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,
    -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,
    47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,
    -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,
    143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,
    167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,
    203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,
    215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
    -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,
    24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,
    -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,
    -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,
    -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,
    -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,
    240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,
    -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,
    336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,
    73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,
    145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,
    -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,
    205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,
    241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,
    361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
    433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,
    74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,
    -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,
    170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,
    206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,
    242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    266,  -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,
    -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,
    75,   76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,
    -1,   160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,
    171,  172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,
    207,  208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,
    243,  -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,
    -1,   268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,
    363,  -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,
    28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
    40,   41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,
    52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,
    76,   -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    -1,   -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,
    160,  161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,
    172,  173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,
    184,  185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,
    208,  209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,
    220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,
    -1,   245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,
    268,  -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    -1,   317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,
    340,  -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,
    -1,   365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,
    400,  401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
    41,   -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,
    -1,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    -1,   90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,
    161,  162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,
    173,  174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,
    209,  -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,
    245,  246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,
    -1,   270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    281,  282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,
    -1,   342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    377,  378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
    -1,   43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,
    54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,
    66,   67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,
    78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,
    90,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,
    126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,
    138,  139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,
    150,  151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,
    162,  -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,
    174,  -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,
    186,  -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,
    198,  -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,
    -1,   -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,
    -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,
    246,  -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,
    -1,   -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,
    270,  271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,
    282,  283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,
    318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,
    342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,
    366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,
    378,  379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,
    390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,
    402,  403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,
    -1,   -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,
    43,   44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,
    55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,
    91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,
    -1,   164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,
    -1,   176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,
    -1,   212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,
    -1,   248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,
    283,  284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,
    379,  -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,
    391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,
    403,  -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,
    44,   45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,
    68,   69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,
    92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,
    152,  -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,
    164,  165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,
    200,  -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,
    212,  213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,
    248,  -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,
    344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,
    368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,
    -1,   405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,
    21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   -1,   43,   44,
    45,   46,   47,   -1,   49,   50,   -1,   52,   53,   54,   55,   56,
    -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,
    69,   -1,   -1,   -1,   73,   74,   75,   76,   -1,   78,   79,   80,
    -1,   82,   83,   84,   85,   86,   87,   -1,   -1,   90,   91,   92,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,
    129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,
    141,  142,  143,  144,  145,  -1,   147,  -1,   149,  150,  151,  152,
    -1,   154,  -1,   156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,
    165,  -1,   167,  168,  -1,   170,  171,  172,  173,  174,  -1,   176,
    177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,
    -1,   190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,
    -1,   -1,   203,  -1,   205,  206,  207,  208,  209,  -1,   -1,   212,
    213,  -1,   215,  -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  -1,   240,  241,  242,  243,  -1,   245,  246,  -1,   248,
    -1,   250,  251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,
    261,  262,  -1,   -1,   265,  266,  -1,   268,  -1,   270,  271,  272,
    273,  274,  275,  276,  277,  -1,   279,  280,  281,  282,  283,  284,
    285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  -1,   314,  315,  -1,   317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,
    333,  334,  -1,   336,  337,  338,  339,  340,  -1,   342,  343,  344,
    345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
    357,  358,  -1,   360,  361,  -1,   363,  -1,   365,  366,  367,  368,
    369,  -1,   371,  372,  -1,   -1,   375,  376,  377,  378,  379,  -1,
    381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,
    393,  394,  -1,   -1,   397,  398,  399,  400,  401,  402,  403,  -1,
    405,  -1,   407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,
    22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
    -1,   47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,
    -1,   59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   -1,
    -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,
    82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,
    -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,
    130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  -1,
    142,  143,  144,  -1,   -1,   147,  -1,   149,  150,  151,  152,  -1,
    154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  -1,
    -1,   -1,   168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,
    178,  179,  180,  181,  182,  183,  184,  185,  186,  -1,   188,  189,
    190,  191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,
    202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  -1,
    214,  215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  239,  240,  241,  242,  -1,   -1,   245,  246,  247,  248,  -1,
    -1,   251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,
    262,  -1,   -1,   265,  266,  267,  268,  269,  -1,   271,  272,  273,
    274,  275,  276,  277,  -1,   279,  280,  -1,   282,  -1,   284,  285,
    286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,  -1,   321,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,
    334,  -1,   336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
    -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
    -1,   -1,   360,  361,  -1,   363,  364,  365,  366,  367,  368,  369,
    -1,   371,  372,  -1,   -1,   375,  376,  -1,   378,  -1,   -1,   381,
    382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,
    394,  -1,   -1,   397,  398,  399,  400,  401,  -1,   403,  404,  405,
    406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,
    418,  419,  420,  421,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   431,  432,  433,  -1,   -1,   -1,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,   -1,
    47,   48,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,
    59,   60,   61,   62,   63,   -1,   65,   66,   67,   68,   -1,   -1,
    71,   -1,   73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,
    83,   84,   85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,
    -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,
    107,  108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,
    131,  -1,   133,  134,  135,  -1,   137,  138,  139,  140,  -1,   142,
    143,  144,  -1,   -1,   147,  -1,   149,  150,  151,  152,  -1,   154,
    -1,   156,  157,  -1,   159,  160,  161,  162,  -1,   164,  -1,   -1,
    -1,   168,  -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  -1,   181,  182,  183,  184,  185,  186,  -1,   188,  189,  -1,
    191,  192,  193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  -1,   -1,   212,  -1,   214,
    215,  216,  -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  -1,   -1,   245,  246,  247,  248,  249,  -1,
    251,  252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,
    -1,   -1,   265,  -1,   267,  268,  269,  -1,   271,  272,  273,  274,
    275,  276,  277,  -1,   279,  280,  -1,   282,  -1,   284,  285,  286,
    -1,   288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
    299,  300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,
    311,  312,  -1,   314,  315,  316,  317,  318,  319,  -1,   321,  322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,
    -1,   336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,
    347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  -1,
    -1,   360,  361,  362,  363,  364,  365,  366,  367,  368,  369,  -1,
    371,  372,  -1,   -1,   375,  376,  -1,   378,  -1,   -1,   381,  382,
    383,  384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,
    -1,   -1,   397,  398,  399,  400,  401,  -1,   403,  -1,   405,  406,
    407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,
    419,  420,  421,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    431,  432,  433,  -1,   -1,   -1,   18,   19,   20,   21,   22,   23,
    24,   25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   37,   38,   -1,   40,   41,   -1,   43,   44,   45,   46,   47,
    -1,   49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,
    60,   61,   62,   63,   -1,   65,   66,   67,   68,   69,   -1,   -1,
    -1,   73,   74,   75,   76,   -1,   78,   79,   80,   -1,   82,   83,
    84,   85,   86,   87,   -1,   -1,   90,   91,   92,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,
    -1,   133,  134,  135,  -1,   137,  138,  139,  140,  141,  142,  143,
    144,  145,  -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,
    156,  -1,   -1,   -1,   160,  161,  162,  -1,   164,  165,  -1,   167,
    168,  -1,   170,  171,  172,  173,  174,  -1,   176,  177,  178,  179,
    -1,   181,  182,  183,  184,  185,  186,  -1,   188,  -1,   190,  191,
    192,  193,  194,  195,  196,  -1,   198,  -1,   200,  -1,   -1,   203,
    -1,   205,  206,  207,  208,  209,  -1,   -1,   212,  213,  -1,   215,
    -1,   -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  -1,
    240,  241,  242,  243,  -1,   245,  246,  -1,   248,  -1,   250,  251,
    252,  253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,
    -1,   265,  266,  -1,   268,  -1,   270,  271,  272,  273,  274,  -1,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  -1,
    288,  289,  290,  291,  292,  293,  -1,   295,  296,  297,  298,  299,
    300,  -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
    312,  -1,   314,  315,  -1,   317,  318,  319,  320,  -1,   322,  323,
    324,  325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,
    336,  337,  338,  339,  340,  -1,   342,  343,  344,  345,  -1,   347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  -1,
    360,  361,  -1,   363,  -1,   365,  366,  367,  368,  369,  -1,   371,
    372,  -1,   -1,   375,  376,  377,  378,  379,  -1,   381,  382,  383,
    384,  385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,
    -1,   397,  398,  399,  400,  401,  402,  403,  -1,   405,  -1,   407,
    408,  409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    432,  433,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,
    25,   -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    37,   38,   -1,   40,   41,   42,   43,   44,   45,   -1,   47,   48,
    49,   50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,
    61,   62,   63,   -1,   65,   66,   67,   68,   -1,   -1,   71,   -1,
    73,   74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,
    85,   86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,
    -1,   -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,
    -1,   110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,
    133,  134,  135,  -1,   137,  138,  139,  140,  -1,   142,  143,  144,
    -1,   -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,
    157,  -1,   159,  160,  161,  162,  -1,   164,  -1,   -1,   -1,   168,
    -1,   170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,
    181,  182,  183,  184,  185,  186,  -1,   188,  189,  -1,   191,  192,
    193,  194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,
    205,  206,  207,  208,  209,  -1,   -1,   212,  -1,   214,  215,  216,
    -1,   218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
    241,  242,  243,  -1,   245,  246,  247,  248,  -1,   -1,   251,  252,
    253,  254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,
    265,  -1,   267,  268,  269,  -1,   271,  272,  273,  274,  275,  276,
    277,  -1,   279,  280,  -1,   282,  -1,   284,  285,  286,  -1,   288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
    -1,   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
    -1,   314,  315,  316,  317,  318,  319,  -1,   321,  322,  323,  324,
    325,  326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,
    337,  338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,
    349,  350,  351,  352,  353,  354,  355,  356,  357,  -1,   -1,   360,
    361,  -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,
    -1,   -1,   375,  376,  -1,   378,  -1,   -1,   381,  382,  383,  384,
    385,  386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,
    397,  398,  399,  400,  401,  -1,   403,  -1,   405,  406,  407,  408,
    409,  410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,
    421,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   431,  432,
    433,  -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,
    -1,   27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
    38,   -1,   40,   41,   42,   43,   44,   45,   -1,   47,   48,   49,
    50,   -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,
    62,   63,   -1,   65,   66,   67,   68,   -1,   -1,   71,   -1,   73,
    74,   75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,
    86,   87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,
    -1,   -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,
    110,  -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,
    134,  135,  -1,   137,  138,  139,  140,  -1,   142,  143,  144,  -1,
    -1,   147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,
    -1,   159,  160,  161,  162,  -1,   164,  -1,   -1,   -1,   168,  -1,
    170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,
    182,  183,  184,  185,  186,  -1,   188,  189,  -1,   191,  192,  193,
    194,  195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,
    206,  207,  208,  209,  -1,   -1,   212,  -1,   214,  215,  216,  -1,
    218,  219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
    242,  243,  -1,   245,  246,  247,  248,  -1,   -1,   251,  252,  253,
    254,  255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,
    -1,   267,  268,  269,  -1,   271,  272,  273,  274,  275,  276,  277,
    -1,   279,  280,  -1,   282,  -1,   284,  285,  286,  -1,   288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,
    302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,
    314,  315,  316,  317,  318,  319,  -1,   321,  322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,
    338,  339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,
    350,  351,  352,  353,  354,  355,  356,  357,  -1,   -1,   360,  361,
    -1,   363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,
    -1,   375,  376,  -1,   378,  -1,   -1,   381,  382,  383,  384,  385,
    386,  387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,
    398,  399,  400,  401,  -1,   403,  -1,   405,  406,  407,  408,  409,
    410,  -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   431,  432,  433,
    -1,   -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    27,   28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
    -1,   40,   41,   42,   43,   44,   45,   -1,   47,   48,   49,   50,
    -1,   52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,
    63,   -1,   65,   66,   67,   68,   -1,   -1,   71,   -1,   73,   74,
    75,   76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,
    87,   -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,
    -1,   100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,
    -1,   112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    123,  124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,
    135,  -1,   137,  138,  139,  140,  -1,   142,  143,  144,  -1,   -1,
    147,  -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,
    159,  160,  161,  162,  -1,   164,  -1,   -1,   -1,   168,  -1,   170,
    171,  172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,
    183,  184,  185,  186,  -1,   188,  189,  -1,   191,  192,  193,  194,
    195,  196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,
    207,  208,  209,  -1,   -1,   212,  -1,   214,  215,  216,  -1,   218,
    219,  220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    -1,   -1,   245,  246,  247,  248,  -1,   -1,   251,  252,  253,  254,
    255,  -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  -1,
    267,  268,  269,  -1,   271,  272,  273,  274,  275,  276,  277,  -1,
    279,  280,  -1,   282,  -1,   284,  285,  286,  -1,   288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,
    303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,
    315,  316,  317,  318,  319,  -1,   321,  322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,
    339,  340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,
    351,  352,  353,  354,  355,  356,  357,  -1,   -1,   360,  361,  -1,
    363,  364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,
    375,  376,  -1,   378,  -1,   -1,   381,  382,  383,  384,  385,  386,
    387,  -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,
    399,  400,  401,  -1,   403,  -1,   405,  406,  407,  408,  409,  410,
    -1,   -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   431,  432,  433,  -1,
    -1,   -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,
    28,   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
    40,   41,   42,   43,   44,   45,   -1,   47,   48,   49,   50,   -1,
    52,   53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,
    -1,   65,   66,   67,   68,   -1,   -1,   71,   -1,   73,   74,   75,
    76,   77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,
    -1,   89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,   -1,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,
    112,  113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,
    124,  125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,
    -1,   137,  138,  139,  140,  -1,   142,  143,  144,  -1,   -1,   147,
    -1,   149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,
    160,  161,  162,  -1,   164,  -1,   -1,   -1,   168,  -1,   170,  171,
    172,  173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,
    184,  185,  186,  -1,   188,  189,  -1,   191,  192,  193,  194,  195,
    196,  -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,
    208,  209,  -1,   -1,   212,  -1,   214,  215,  216,  -1,   218,  219,
    220,  -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  -1,
    -1,   245,  246,  247,  248,  -1,   -1,   251,  252,  253,  254,  255,
    -1,   257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  -1,   267,
    268,  269,  -1,   271,  272,  273,  274,  275,  276,  277,  -1,   279,
    280,  -1,   282,  -1,   284,  285,  286,  -1,   288,  289,  290,  291,
    292,  293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,
    304,  305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,
    316,  317,  318,  319,  -1,   321,  322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,
    340,  341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  -1,   -1,   360,  361,  -1,   363,
    364,  365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,
    376,  -1,   378,  -1,   -1,   381,  382,  383,  384,  385,  386,  387,
    -1,   -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,
    400,  401,  -1,   403,  -1,   405,  406,  407,  408,  409,  410,  -1,
    -1,   413,  -1,   -1,   416,  417,  418,  419,  420,  421,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   431,  432,  433,  -1,   -1,
    -1,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,
    29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
    41,   42,   43,   44,   45,   -1,   47,   48,   49,   50,   -1,   52,
    53,   54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,
    65,   66,   67,   68,   -1,   -1,   71,   -1,   73,   74,   75,   76,
    77,   78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,
    89,   90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,   -1,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,
    113,  114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,
    125,  126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,
    137,  138,  139,  140,  -1,   142,  143,  144,  -1,   -1,   147,  -1,
    149,  150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,
    161,  162,  -1,   164,  -1,   -1,   -1,   168,  -1,   170,  171,  172,
    173,  174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,
    185,  186,  -1,   188,  189,  -1,   191,  192,  193,  194,  195,  196,
    -1,   198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,
    209,  -1,   -1,   212,  -1,   214,  215,  216,  -1,   218,  219,  220,
    -1,   -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  -1,   -1,
    245,  246,  247,  248,  -1,   -1,   251,  252,  253,  254,  255,  -1,
    257,  -1,   -1,   260,  261,  262,  -1,   -1,   265,  -1,   267,  268,
    269,  -1,   271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,
    -1,   282,  -1,   284,  285,  286,  -1,   288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,
    317,  318,  319,  -1,   321,  322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,
    341,  342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  -1,   -1,   360,  361,  -1,   363,  364,
    365,  366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,
    -1,   378,  -1,   -1,   381,  382,  383,  384,  385,  386,  387,  -1,
    -1,   390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,
    401,  -1,   403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,
    413,  -1,   -1,   416,  417,  418,  419,  420,  421,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   431,  432,  433,  -1,   -1,   -1,
    18,   19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
    42,   43,   44,   45,   -1,   47,   48,   49,   50,   -1,   52,   53,
    54,   55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,
    66,   67,   68,   -1,   -1,   71,   -1,   73,   74,   75,   76,   77,
    78,   79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,
    90,   91,   92,   -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,
    126,  127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,
    138,  139,  140,  -1,   142,  143,  144,  -1,   -1,   147,  -1,   149,
    150,  151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,
    162,  -1,   164,  -1,   -1,   -1,   168,  -1,   170,  171,  172,  173,
    174,  175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,
    186,  -1,   188,  189,  -1,   191,  192,  193,  194,  195,  196,  -1,
    198,  -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
    -1,   -1,   212,  -1,   214,  215,  216,  -1,   218,  219,  220,  -1,
    -1,   223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  240,  241,  242,  -1,   -1,   245,
    246,  247,  248,  -1,   -1,   251,  252,  253,  254,  255,  -1,   257,
    -1,   -1,   260,  261,  262,  -1,   -1,   265,  -1,   267,  268,  269,
    -1,   271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  -1,
    282,  -1,   284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,
    318,  319,  -1,   321,  322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  332,  333,  334,  -1,   336,  337,  338,  339,  340,  341,
    342,  343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,
    354,  355,  356,  357,  -1,   -1,   360,  361,  -1,   363,  364,  365,
    366,  367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  -1,
    378,  -1,   -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,
    390,  391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,
    -1,   403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,
    -1,   -1,   416,  417,  418,  419,  420,  421,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   431,  432,  433,  -1,   -1,   -1,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
    43,   44,   45,   -1,   47,   48,   49,   50,   -1,   52,   53,   54,
    55,   56,   -1,   -1,   59,   60,   61,   62,   63,   -1,   65,   66,
    67,   68,   -1,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,
    79,   80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,
    91,   92,   -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,
    103,  104,  105,  106,  107,  108,  -1,   110,  -1,   112,  113,  114,
    115,  116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,
    127,  -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,
    139,  140,  -1,   142,  143,  144,  -1,   -1,   147,  -1,   149,  150,
    151,  152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,
    -1,   164,  -1,   -1,   -1,   168,  -1,   170,  171,  172,  173,  174,
    175,  176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,
    -1,   188,  189,  -1,   191,  192,  193,  194,  195,  196,  -1,   198,
    -1,   200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,
    -1,   212,  -1,   214,  215,  216,  -1,   218,  219,  220,  -1,   -1,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  -1,   -1,   245,  246,
    247,  248,  -1,   -1,   251,  252,  253,  254,  255,  -1,   257,  -1,
    -1,   260,  261,  262,  -1,   -1,   265,  -1,   267,  268,  269,  -1,
    271,  272,  273,  274,  275,  276,  277,  -1,   279,  280,  -1,   282,
    -1,   284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,
    307,  308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,
    319,  -1,   321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  332,  333,  334,  -1,   336,  337,  -1,   339,  340,  341,  342,
    343,  344,  345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  -1,   -1,   360,  361,  -1,   363,  364,  365,  366,
    367,  368,  369,  -1,   371,  372,  -1,   -1,   375,  376,  -1,   378,
    -1,   -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,
    391,  392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  -1,
    403,  -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,
    -1,   416,  417,  418,  419,  420,  421,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   431,  432,  433,  -1,   -1,   -1,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   27,   28,   29,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
    44,   45,   -1,   -1,   48,   -1,   -1,   -1,   52,   53,   54,   55,
    56,   -1,   -1,   59,   60,   -1,   -1,   63,   -1,   65,   66,   67,
    68,   -1,   -1,   71,   -1,   73,   74,   75,   76,   77,   78,   79,
    80,   -1,   82,   83,   84,   85,   86,   87,   -1,   89,   90,   91,
    92,   -1,   -1,   -1,   96,   -1,   -1,   -1,   100,  101,  102,  103,
    104,  105,  -1,   -1,   108,  -1,   110,  -1,   112,  113,  114,  115,
    116,  -1,   118,  119,  120,  -1,   -1,   123,  124,  125,  126,  127,
    -1,   129,  130,  131,  -1,   133,  134,  135,  -1,   137,  138,  139,
    140,  -1,   142,  143,  144,  -1,   -1,   147,  -1,   149,  150,  -1,
    152,  -1,   154,  -1,   156,  157,  -1,   159,  160,  161,  162,  -1,
    164,  -1,   -1,   -1,   168,  -1,   170,  171,  172,  173,  174,  175,
    176,  177,  178,  179,  -1,   181,  182,  183,  184,  185,  186,  -1,
    188,  189,  -1,   191,  192,  193,  194,  -1,   -1,   -1,   -1,   -1,
    200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  -1,   -1,
    212,  -1,   214,  215,  216,  -1,   218,  219,  220,  -1,   -1,   223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  -1,   239,  -1,   241,  242,  -1,   -1,   245,  246,  247,
    248,  -1,   -1,   251,  -1,   253,  254,  255,  -1,   257,  -1,   -1,
    260,  261,  262,  -1,   -1,   265,  -1,   267,  268,  269,  -1,   271,
    272,  273,  274,  275,  276,  277,  -1,   279,  280,  -1,   282,  -1,
    284,  285,  286,  -1,   288,  289,  290,  291,  292,  293,  294,  295,
    -1,   297,  298,  299,  300,  -1,   302,  303,  304,  305,  306,  307,
    308,  309,  310,  311,  312,  -1,   314,  315,  316,  317,  318,  319,
    -1,   321,  322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    332,  333,  334,  -1,   336,  337,  -1,   339,  340,  341,  342,  343,
    -1,   345,  -1,   347,  348,  349,  350,  351,  352,  353,  354,  355,
    356,  357,  -1,   -1,   360,  361,  -1,   363,  364,  365,  366,  367,
    368,  369,  -1,   -1,   -1,   -1,   -1,   375,  376,  -1,   378,  -1,
    -1,   381,  382,  383,  384,  385,  386,  387,  -1,   -1,   390,  391,
    392,  393,  394,  -1,   -1,   397,  398,  399,  400,  401,  -1,   -1,
    -1,   405,  406,  407,  408,  409,  410,  -1,   -1,   413,  -1,   -1,
    416,  417,  418,  419,  420,  421,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   431,  432,  433};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] = {
    0,    18,   28,   30,   31,   45,   65,   67,   68,   73,   75,   86,
    88,   105,  108,  120,  122,  126,  132,  140,  142,  148,  163,  179,
    218,  219,  224,  235,  246,  285,  297,  302,  303,  305,  310,  315,
    318,  323,  328,  329,  336,  340,  350,  362,  381,  391,  397,  402,
    415,  436,  450,  457,  458,  459,  460,  466,  467,  469,  470,  471,
    472,  473,  474,  475,  477,  478,  482,  494,  499,  500,  503,  504,
    505,  517,  520,  521,  537,  574,  577,  580,  581,  582,  589,  595,
    597,  599,  600,  603,  606,  607,  611,  612,  621,  625,  626,  627,
    628,  629,  632,  634,  635,  636,  637,  638,  645,  658,  659,  663,
    665,  666,  667,  677,  679,  686,  687,  690,  691,  692,  693,  694,
    700,  702,  705,  709,  713,  714,  724,  725,  728,  733,  744,  767,
    770,  771,  772,  775,  778,  780,  782,  784,  785,  790,  791,  794,
    795,  796,  803,  804,  806,  807,  808,  813,  815,  816,  822,  823,
    824,  825,  826,  827,  829,  830,  832,  833,  835,  838,  839,  844,
    850,  853,  855,  856,  864,  866,  871,  878,  882,  883,  884,  885,
    886,  887,  890,  925,  375,  418,  809,  25,   71,   85,   103,  109,
    124,  135,  143,  155,  160,  166,  183,  208,  229,  260,  280,  290,
    317,  322,  324,  330,  333,  361,  362,  365,  369,  378,  383,  395,
    408,  596,  809,  3,    18,   19,   20,   21,   22,   23,   24,   25,
    26,   27,   28,   29,   37,   38,   40,   41,   43,   44,   45,   46,
    47,   49,   50,   52,   53,   54,   55,   56,   59,   60,   61,   62,
    63,   65,   66,   67,   68,   69,   73,   74,   75,   76,   78,   79,
    80,   82,   83,   84,   85,   86,   87,   90,   91,   92,   100,  101,
    102,  103,  104,  105,  106,  107,  108,  110,  112,  113,  114,  115,
    116,  118,  119,  120,  123,  124,  125,  126,  127,  129,  130,  131,
    133,  134,  135,  137,  138,  139,  140,  141,  142,  143,  144,  145,
    147,  149,  150,  151,  152,  154,  156,  160,  161,  162,  164,  165,
    167,  168,  170,  171,  172,  173,  174,  176,  177,  178,  179,  181,
    182,  183,  184,  185,  186,  188,  190,  191,  192,  193,  194,  195,
    196,  198,  200,  203,  205,  206,  207,  208,  209,  212,  213,  215,
    218,  219,  220,  223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  240,  241,  242,  243,  245,
    246,  248,  250,  251,  252,  253,  254,  255,  257,  260,  261,  262,
    265,  266,  268,  270,  271,  272,  273,  274,  275,  276,  277,  279,
    280,  281,  282,  283,  284,  285,  286,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  297,  298,  299,  300,  302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  314,  315,  317,  318,  319,
    320,  321,  322,  323,  324,  325,  326,  327,  328,  330,  331,  332,
    333,  334,  336,  337,  338,  339,  340,  342,  343,  344,  345,  347,
    348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  360,
    361,  363,  365,  366,  367,  368,  369,  371,  372,  375,  376,  377,
    378,  379,  381,  382,  383,  384,  385,  386,  387,  390,  391,  392,
    393,  394,  397,  398,  399,  400,  401,  402,  403,  405,  407,  408,
    409,  410,  413,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  432,  433,  879,  1047, 1061,
    1065, 1066, 406,  840,  258,  286,  809,  48,   528,  883,  25,   37,
    58,   71,   81,   103,  109,  124,  135,  143,  155,  162,  166,  220,
    260,  263,  280,  317,  324,  333,  365,  366,  368,  369,  378,  383,
    389,  392,  395,  538,  579,  682,  734,  745,  26,   285,  1047, 879,
    26,   279,  331,  366,  368,  5,    207,  776,  777,  1056, 25,   37,
    58,   71,   85,   103,  124,  135,  143,  155,  160,  166,  183,  229,
    260,  271,  280,  317,  322,  324,  330,  333,  362,  365,  369,  376,
    378,  383,  395,  408,  596,  695,  809,  1047, 88,   406,  450,  574,
    577,  580,  839,  845,  853,  856,  864,  871,  878,  882,  9,    19,
    26,   43,   150,  156,  158,  180,  209,  241,  288,  304,  441,  442,
    710,  711,  879,  1055, 1057, 26,   88,   301,  329,  715,  716,  717,
    1061, 155,  1061, 1052, 1056, 362,  893,  710,  1061, 375,  1047, 271,
    229,  103,  183,  324,  361,  362,  450,  786,  787,  323,  1061, 26,
    334,  371,  375,  486,  495,  496,  1061, 23,   163,  715,  716,  286,
    809,  1061, 206,  26,   121,  895,  896,  59,   82,   220,  237,  317,
    324,  334,  371,  375,  421,  483,  484,  485,  486,  26,   334,  371,
    375,  486,  375,  259,  936,  1045, 1061, 893,  443,  1061, 159,  450,
    841,  450,  1040, 299,  888,  889,  1047, 888,  883,  884,  887,  0,
    453,  840,  136,  197,  264,  388,  897,  898,  883,  885,  886,  114,
    193,  394,  454,  3,    42,   48,   71,   77,   89,   96,   157,  159,
    175,  189,  201,  202,  204,  214,  216,  239,  247,  267,  269,  316,
    341,  364,  406,  1053, 1061, 1062, 1065, 1067, 697,  1061, 697,  1048,
    1061, 289,  697,  378,  697,  1047, 1061, 102,  362,  723,  1053, 3,
    99,   335,  1058, 1059, 1063, 1065, 1066, 1067, 26,   174,  1045, 253,
    408,  8,    15,   16,   17,   66,   147,  437,  438,  439,  441,  442,
    443,  444,  445,  446,  774,  1007, 1008, 1061, 174,  1047, 26,   1058,
    1059, 1047, 1047, 174,  1045, 1047, 310,  336,  26,   174,  936,  1047,
    326,  1047, 697,  227,  1058, 1059, 174,  1045, 207,  111,  203,  244,
    295,  810,  811,  812,  1045, 1051, 1061, 25,   58,   71,   72,   81,
    85,   103,  124,  135,  143,  155,  160,  183,  208,  229,  260,  280,
    317,  322,  324,  330,  333,  362,  365,  369,  376,  378,  383,  408,
    596,  703,  1056, 1045, 373,  1053, 1047, 450,  697,  378,  1048, 697,
    378,  174,  1047, 102,  362,  366,  368,  1058, 1059, 366,  368,  66,
    147,  774,  308,  1047, 1058, 174,  479,  1061, 1047, 1047, 326,  1047,
    697,  227,  1058, 299,  330,  362,  408,  229,  85,   183,  160,  322,
    376,  382,  590,  26,   1047, 880,  493,  1056, 1063, 777,  174,  1053,
    1047, 174,  781,  174,  1048, 3,    47,   49,   50,   61,   62,   106,
    107,  125,  151,  174,  195,  196,  198,  238,  240,  252,  296,  338,
    344,  371,  372,  403,  699,  952,  954,  956,  958,  960,  962,  963,
    964,  966,  967,  968,  971,  972,  1062, 1065, 378,  102,  362,  174,
    1053, 174,  1059, 1060, 77,   408,  66,   147,  174,  774,  52,   174,
    1047, 174,  1060, 174,  1047, 174,  1047, 174,  1047, 326,  781,  174,
    1047, 174,  699,  174,  227,  1060, 207,  174,  696,  697,  450,  854,
    538,  845,  402,  839,  846,  847,  848,  1063, 840,  1057, 711,  712,
    26,   712,  1057, 712,  26,   712,  1057, 712,  712,  712,  1057, 1055,
    1055, 879,  712,  289,  450,  450,  557,  557,  557,  258,  373,  454,
    557,  324,  936,  937,  454,  805,  1056, 450,  851,  52,   408,  406,
    788,  789,  1045, 1047, 1061, 42,   433,  203,  452,  261,  261,  258,
    158,  1056, 373,  153,  706,  258,  4,    6,    7,    8,    10,   34,
    47,   49,   50,   57,   58,   61,   62,   69,   71,   93,   94,   95,
    96,   97,   98,   99,   106,  107,  141,  145,  146,  151,  165,  167,
    195,  196,  198,  213,  221,  222,  238,  240,  244,  249,  250,  252,
    260,  270,  281,  296,  320,  335,  344,  358,  371,  372,  377,  379,
    380,  389,  395,  403,  423,  424,  425,  426,  427,  428,  429,  430,
    434,  441,  442,  443,  450,  883,  955,  958,  961,  962,  963,  965,
    966,  967,  971,  972,  976,  978,  979,  980,  982,  1003, 1004, 1005,
    1009, 1028, 1033, 1042, 1043, 1053, 1054, 1055, 1056, 1061, 1041, 1042,
    1056, 26,   501,  1044, 1045, 334,  483,  109,  492,  1056, 493,  1056,
    42,   63,   483,  433,  345,  811,  261,  158,  373,  439,  42,   433,
    203,  812,  450,  1045, 443,  448,  452,  1034, 1035, 937,  157,  159,
    406,  836,  837,  839,  157,  842,  109,  976,  1038, 1039, 888,  454,
    450,  843,  451,  451,  459,  1045, 26,   121,  894,  894,  52,   894,
    148,  153,  217,  256,  901,  903,  904,  919,  921,  922,  923,  897,
    898,  158,  199,  936,  938,  1040, 450,  757,  1035, 272,  306,  336,
    452,  698,  272,  306,  336,  3,    80,   130,  223,  272,  306,  336,
    365,  367,  415,  494,  497,  817,  818,  819,  820,  729,  22,   126,
    272,  306,  336,  399,  508,  1047, 336,  22,   126,  394,  476,  419,
    174,  936,  54,   87,   144,  177,  212,  244,  272,  306,  314,  321,
    328,  336,  348,  356,  410,  494,  498,  760,  768,  450,  746,  306,
    476,  180,  141,  22,   28,   68,   119,  126,  129,  185,  242,  244,
    254,  262,  272,  306,  309,  310,  336,  399,  506,  507,  615,  4,
    442,  587,  1057, 26,   174,  1045, 697,  697,  450,  773,  452,  141,
    258,  180,  468,  306,  415,  436,  461,  468,  258,  272,  306,  141,
    53,   101,  182,  230,  232,  242,  271,  306,  311,  336,  350,  506,
    584,  585,  272,  306,  407,  615,  623,  496,  484,  486,  180,  141,
    306,  336,  506,  272,  306,  310,  336,  78,   118,  273,  367,  258,
    22,   28,   126,  272,  306,  336,  518,  519,  153,  306,  336,  461,
    497,  141,  306,  336,  506,  1047, 215,  111,  259,  420,  454,  810,
    396,  834,  258,  1053, 450,  1047, 952,  378,  102,  362,  1053, 253,
    408,  66,   147,  774,  1047, 1047, 326,  153,  1047, 952,  207,  697,
    557,  292,  523,  450,  672,  757,  64,   952,  158,  450,  668,  1047,
    461,  35,   828,  1047, 244,  461,  419,  174,  1045, 461,  697,  697,
    668,  392,  538,  258,  461,  244,  42,   480,  383,  622,  272,  598,
    78,   118,  273,  367,  24,   44,   194,  646,  35,   668,  153,  461,
    408,  174,  1045, 174,  575,  1045, 1045, 408,  697,  77,   735,  1053,
    1047, 153,  596,  48,   100,  192,  242,  325,  141,  757,  55,   312,
    509,  141,  450,  141,  405,  969,  969,  969,  450,  957,  957,  283,
    450,  959,  141,  61,   62,   969,  957,  954,  417,  436,  450,  973,
    450,  973,  454,  509,  34,   953,  62,   450,  970,  104,  172,  231,
    234,  327,  431,  450,  974,  975,  698,  957,  419,  141,  746,  141,
    454,  174,  696,  174,  697,  174,  697,  141,  773,  1060, 141,  258,
    141,  141,  258,  141,  509,  141,  78,   118,  273,  367,  153,  141,
    258,  141,  509,  141,  153,  174,  174,  493,  141,  454,  509,  976,
    1012, 362,  451,  454,  146,  258,  380,  490,  493,  587,  849,  845,
    712,  879,  712,  879,  712,  879,  712,  879,  712,  879,  879,  879,
    712,  879,  450,  558,  559,  1061, 558,  26,   103,  124,  155,  160,
    207,  208,  324,  330,  362,  365,  383,  718,  1044, 1060, 717,  1047,
    180,  454,  867,  1056, 952,  1015, 35,   1060, 735,  451,  454,  215,
    1061, 153,  153,  718,  1060, 323,  1061, 493,  258,  450,  1036, 448,
    883,  1016, 976,  1032, 450,  450,  153,  450,  450,  883,  450,  450,
    450,  450,  450,  450,  976,  450,  450,  450,  450,  450,  450,  450,
    450,  883,  450,  450,  450,  450,  450,  450,  450,  450,  976,  976,
    976,  883,  976,  1012, 1035, 1056, 450,  1056, 3,    8,    11,   15,
    16,   17,   32,   35,   40,   46,   70,   175,  180,  201,  202,  216,
    247,  260,  263,  341,  434,  437,  438,  439,  441,  442,  443,  444,
    445,  446,  1007, 1009, 1011, 416,  991,  269,  976,  199,  454,  891,
    450,  1056, 1035, 891,  112,  176,  502,  454,  63,   109,  493,  35,
    3,    109,  220,  491,  587,  972,  1056, 1056, 83,   123,  988,  92,
    109,  487,  488,  490,  587,  109,  487,  215,  1045, 976,  3,    26,
    30,   31,   32,   33,   34,   35,   36,   39,   51,   57,   58,   64,
    70,   72,   81,   88,   93,   94,   95,   97,   98,   99,   109,  111,
    117,  121,  122,  128,  132,  136,  146,  148,  153,  155,  158,  163,
    166,  169,  180,  187,  197,  199,  210,  211,  217,  221,  222,  244,
    249,  256,  258,  259,  263,  264,  278,  287,  301,  313,  329,  335,
    346,  359,  362,  370,  373,  374,  380,  388,  389,  395,  396,  404,
    411,  412,  414,  415,  443,  1050, 1064, 1065, 1066, 1067, 1068, 1034,
    84,   311,  701,  451,  454,  840,  451,  454,  889,  1046, 1047, 35,
    843,  885,  885,  899,  900,  976,  885,  150,  241,  910,  205,  242,
    295,  339,  394,  26,   905,  976,  906,  908,  976,  978,  919,  920,
    904,  903,  901,  902,  153,  922,  254,  924,  901,  919,  938,  857,
    1045, 35,   1061, 336,  180,  190,  264,  266,  338,  404,  443,  750,
    751,  752,  754,  756,  758,  952,  1062, 272,  306,  336,  373,  373,
    324,  1050, 452,  373,  373,  324,  217,  373,  373,  365,  483,  272,
    817,  819,  439,  821,  153,  163,  180,  315,  730,  731,  64,   81,
    137,  155,  287,  389,  554,  555,  81,   109,  244,  373,  81,   373,
    109,  244,  324,  81,   119,  129,  272,  306,  664,  324,  604,  25,
    58,   71,   85,   124,  135,  155,  160,  229,  260,  324,  330,  333,
    362,  369,  376,  383,  408,  596,  1047, 141,  306,  336,  506,  258,
    587,  328,  212,  373,  373,  249,  587,  113,  200,  324,  334,  375,
    485,  312,  336,  760,  769,  451,  747,  750,  373,  395,  365,  1045,
    72,   137,  545,  554,  1061, 72,   81,   792,  258,  320,  322,  378,
    81,   792,  29,   309,  320,  322,  378,  1045, 185,  254,  697,  450,
    373,  373,  173,  450,  513,  226,  365,  392,  415,  417,  513,  81,
    454,  4,    272,  180,  141,  306,  336,  506,  396,  396,  243,  952,
    272,  336,  774,  1047, 1045, 103,  497,  373,  463,  497,  1045, 373,
    373,  1045, 587,  52,   586,  587,  587,  101,  230,  232,  52,   373,
    461,  324,  461,  242,  585,  373,  373,  249,  1056, 615,  365,  936,
    81,   373,  792,  324,  373,  373,  513,  513,  697,  697,  697,  697,
    1045, 41,   401,  41,   41,   373,  41,   373,  324,  454,  395,  633,
    1059, 373,  463,  1045, 373,  324,  272,  306,  295,  307,  332,  489,
    810,  1051, 1061, 1045, 757,  952,  258,  201,  419,  746,  587,  697,
    697,  773,  258,  201,  258,  78,   118,  273,  367,  952,  258,  201,
    697,  201,  415,  529,  353,  354,  524,  1056, 3,    673,  674,  668,
    450,  35,   697,  669,  670,  1064, 24,   817,  952,  258,  141,  601,
    1047, 244,  450,  462,  682,  396,  299,  408,  1045, 462,  141,  1059,
    88,   163,  481,  537,  581,  645,  713,  733,  813,  1056, 623,  624,
    1059, 223,  697,  697,  697,  697,  254,  114,  193,  381,  394,  647,
    648,  133,  294,  450,  633,  462,  1045, 244,  583,  584,  244,  35,
    254,  450,  557,  557,  174,  578,  1045, 153,  174,  736,  1051, 450,
    748,  35,   952,  207,  415,  417,  881,  325,  1053, 509,  952,  1048,
    450,  1012, 1055, 699,  969,  969,  34,   953,  371,  371,  1055, 1055,
    952,  448,  448,  336,  1055, 373,  373,  373,  450,  373,  1055, 957,
    174,  1047, 1053, 509,  1060, 1059, 141,  509,  141,  396,  141,  396,
    774,  509,  509,  1047, 697,  1060, 1047, 697,  1047, 1047, 952,  1047,
    697,  699,  1060, 633,  141,  141,  509,  696,  697,  451,  454,  174,
    1045, 845,  847,  879,  879,  879,  879,  879,  879,  558,  451,  454,
    451,  161,  331,  363,  1046, 696,  102,  333,  722,  723,  1046, 253,
    1046, 1044, 1044, 1046, 696,  373,  415,  726,  136,  217,  630,  631,
    20,   139,  320,  339,  868,  936,  248,  869,  451,  454,  852,  856,
    864,  871,  882,  373,  1045, 786,  787,  789,  716,  715,  716,  158,
    164,  727,  1061, 25,   72,   103,  124,  135,  155,  160,  208,  229,
    317,  324,  330,  362,  365,  383,  408,  596,  707,  1012, 1034, 449,
    1012, 1016, 1017, 411,  1029, 1030, 976,  1012, 450,  1055, 1055, 3,
    104,  172,  231,  234,  327,  431,  1018, 1019, 1056, 1012, 1012, 1012,
    1055, 1055, 976,  774,  976,  1020, 320,  441,  442,  450,  977,  978,
    1009, 1022, 451,  1012, 976,  1012, 1023, 976,  51,   158,  211,  374,
    976,  1012, 1026, 1012, 236,  978,  976,  986,  987,  988,  236,  976,
    988,  451,  454,  1055, 974,  952,  976,  976,  976,  976,  1064, 371,
    39,   359,  1037, 697,  976,  450,  883,  1027, 121,  123,  146,  244,
    249,  254,  380,  390,  976,  450,  976,  373,  46,   175,  180,  216,
    341,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,  26,
    33,   346,  1006, 166,  149,  992,  320,  450,  1003, 162,  220,  362,
    366,  368,  392,  892,  1045, 1043, 158,  926,  26,   121,  404,  443,
    451,  752,  976,  1013, 1014, 1062, 926,  1045, 375,  450,  1056, 454,
    451,  449,  455,  173,  173,  509,  1045, 837,  838,  1045, 1038, 451,
    454,  450,  454,  36,   117,  396,  742,  450,  907,  1057, 339,  205,
    259,  454,  320,  321,  909,  1044, 248,  343,  870,  920,  902,  396,
    865,  109,  450,  858,  882,  35,   1061, 450,  872,  873,  874,  875,
    876,  1061, 266,  52,   1062, 451,  752,  754,  751,  754,  1062, 264,
    451,  454,  698,  373,  373,  324,  1059, 1047, 1047, 1050, 1059, 1047,
    1047, 1059, 1048, 1047, 109,  490,  1057, 317,  395,  715,  324,  163,
    715,  450,  1047, 396,  737,  205,  205,  396,  450,  573,  174,  1047,
    249,  1059, 1047, 1047, 976,  249,  1047, 1047, 29,   309,  373,  373,
    1047, 373,  605,  1053, 450,  697,  697,  952,  378,  102,  362,  723,
    408,  66,   147,  774,  1047, 697,  1047, 697,  326,  153,  952,  697,
    207,  168,  242,  272,  306,  400,  608,  609,  610,  936,  373,  792,
    324,  249,  113,  200,  1059, 1047, 258,  1047, 451,  454,  1058, 1060,
    1047, 306,  506,  545,  952,  1047, 1061, 1047, 215,  1047, 26,   395,
    1047, 174,  1047, 174,  1061, 322,  378,  322,  378,  215,  1047, 26,
    395,  1047, 1045, 22,   126,  336,  616,  617,  618,  619,  1064, 1059,
    1047, 109,  159,  245,  396,  512,  515,  516,  1064, 1047, 257,  68,
    257,  1047, 507,  373,  365,  1045, 373,  792,  324,  1049, 1061, 1049,
    454,  451,  454,  373,  324,  258,  306,  373,  642,  1048, 1058, 3,
    80,   131,  185,  277,  387,  395,  398,  464,  306,  1059, 1047, 306,
    336,  506,  584,  587,  697,  1047, 587,  1047, 587,  1059, 1047, 1047,
    306,  336,  506,  1047, 1047, 1047, 1047, 1059, 1047, 22,   28,   126,
    272,  306,  336,  272,  306,  336,  668,  306,  336,  306,  336,  306,
    951,  1061, 174,  678,  1061, 174,  1061, 1059, 1047, 1047, 1047, 22,
    519,  333,  1058, 306,  336,  506,  1047, 1047, 373,  373,  76,   386,
    295,  201,  35,   124,  697,  249,  704,  1056, 201,  201,  396,  396,
    201,  697,  704,  697,  207,  697,  704,  201,  704,  257,  158,  373,
    522,  461,  439,  451,  454,  976,  952,  451,  454,  439,  647,  547,
    1064, 1047, 158,  324,  407,  602,  609,  610,  141,  216,  539,  541,
    543,  545,  551,  554,  23,   180,  317,  360,  464,  465,  153,  1049,
    408,  1045, 153,  643,  479,  1061, 480,  263,  538,  155,  1056, 668,
    668,  668,  668,  254,  258,  263,  450,  668,  949,  950,  951,  333,
    450,  141,  141,  140,  882,  697,  539,  1061, 415,  417,  569,  415,
    514,  244,  35,   557,  1056, 244,  258,  451,  749,  750,  755,  35,
    207,  314,  376,  414,  759,  760,  761,  258,  207,  493,  171,  171,
    153,  757,  35,   1012, 451,  451,  509,  448,  433,  433,  451,  451,
    1055, 449,  1055, 1061, 451,  172,  231,  975,  231,  975,  975,  1055,
    234,  451,  141,  509,  746,  696,  697,  1049, 697,  1049, 773,  258,
    509,  258,  509,  509,  207,  258,  509,  509,  333,  153,  493,  509,
    976,  244,  451,  559,  180,  180,  180,  419,  1046, 454,  587,  588,
    166,  719,  720,  1059, 23,   727,  373,  450,  158,  139,  339,  139,
    339,  320,  394,  233,  952,  1059, 415,  576,  1045, 1047, 158,  258,
    719,  52,   509,  1053, 952,  378,  362,  1053, 253,  408,  952,  207,
    697,  451,  449,  449,  454,  976,  128,  1030, 1031, 35,   451,  976,
    451,  451,  451,  158,  451,  451,  451,  451,  451,  454,  451,  278,
    1021, 451,  450,  977,  977,  1012, 11,   15,   16,   17,   180,  201,
    260,  437,  438,  439,  441,  442,  443,  444,  445,  446,  1009, 977,
    451,  451,  153,  158,  1024, 1025, 451,  35,   1026, 1012, 1026, 1026,
    158,  451,  451,  1064, 276,  990,  35,   451,  454,  976,  1064, 454,
    976,  1036, 976,  451,  433,  977,  977,  134,  1012, 158,  121,  123,
    146,  249,  254,  380,  390,  450,  134,  774,  976,  359,  1037, 976,
    1027, 976,  373,  450,  883,  450,  450,  268,  996,  450,  1012, 366,
    368,  366,  368,  1045, 893,  893,  893,  210,  321,  450,  883,  927,
    928,  929,  936,  939,  942,  979,  981,  982,  1053, 1061, 412,  947,
    1013, 1013, 1014, 451,  13,   14,   454,  897,  898,  947,  811,  1055,
    974,  488,  976,  843,  1047, 852,  900,  260,  1007, 1010, 435,  743,
    976,  909,  394,  906,  225,  927,  412,  948,  402,  859,  860,  1061,
    258,  861,  1061, 876,  877,  454,  926,  439,  1036, 758,  698,  754,
    754,  52,   756,  445,  1059, 1047, 1047, 1060, 1060, 258,  1046, 261,
    258,  976,  555,  1049, 450,  450,  450,  573,  183,  558,  656,  141,
    509,  373,  1059, 1047, 493,  757,  952,  1047, 419,  697,  697,  697,
    697,  773,  78,   118,  273,  367,  952,  1047, 591,  1047, 168,  400,
    373,  373,  591,  608,  615,  306,  336,  506,  1047, 1047, 1047, 191,
    249,  750,  271,  336,  373,  262,  613,  656,  126,  310,  336,  508,
    615,  793,  328,  141,  509,  141,  509,  1047, 1047, 1047, 1047, 328,
    618,  619,  618,  451,  454,  620,  1056, 183,  451,  454,  439,  452,
    1059, 1047, 306,  336,  506,  1047, 1047, 1047, 272,  306,  336,  22,
    126,  272,  306,  336,  952,  243,  952,  1059, 1047, 1045, 373,  1060,
    396,  639,  217,  277,  249,  1056, 277,  1060, 393,  373,  373,  324,
    271,  336,  81,   373,  792,  324,  373,  373,  227,  227,  227,  373,
    373,  324,  373,  373,  324,  373,  324,  373,  324,  373,  509,  952,
    244,  1056, 336,  793,  141,  509,  373,  1047, 373,  324,  1059, 1047,
    704,  952,  697,  201,  704,  704,  1049, 1049, 704,  201,  201,  1047,
    201,  704,  523,  450,  525,  526,  260,  441,  442,  587,  671,  754,
    1010, 1056, 1068, 3,    674,  451,  451,  670,  671,  258,  64,   70,
    81,   109,  111,  187,  244,  249,  287,  301,  389,  548,  549,  550,
    140,  411,  461,  493,  1047, 493,  613,  1045, 1045, 451,  454,  1060,
    166,  317,  1060, 1055, 383,  1045, 557,  26,   114,  193,  329,  394,
    644,  373,  641,  42,   480,  308,  362,  102,  514,  558,  1045, 648,
    675,  676,  1056, 451,  454,  1047, 558,  1045, 575,  1045, 1047, 576,
    450,  540,  451,  257,  513,  257,  258,  570,  513,  35,   141,  882,
    514,  373,  141,  1045, 451,  454,  109,  439,  762,  1056, 493,  362,
    753,  754,  153,  763,  415,  761,  764,  114,  193,  329,  394,  801,
    1047, 168,  882,  509,  952,  451,  1055, 973,  973,  449,  449,  970,
    451,  1047, 509,  509,  396,  509,  396,  509,  509,  697,  697,  1047,
    697,  1047, 633,  509,  141,  324,  324,  324,  1046, 723,  454,  1059,
    415,  454,  721,  261,  937,  333,  139,  139,  102,  242,  1060, 718,
    509,  1059, 757,  201,  746,  587,  201,  697,  201,  1016, 370,  976,
    132,  952,  451,  976,  976,  976,  1024, 451,  1012, 454,  952,  977,
    977,  977,  977,  121,  123,  244,  254,  977,  977,  977,  977,  977,
    977,  977,  977,  977,  977,  976,  976,  1025, 1024, 952,  451,  451,
    451,  1012, 451,  454,  52,   978,  451,  1064, 987,  284,  357,  989,
    451,  454,  407,  983,  35,   451,  1056, 976,  32,   32,   976,  451,
    976,  158,  450,  1015, 976,  451,  134,  977,  977,  134,  134,  976,
    976,  898,  412,  450,  997,  1061, 451,  1012, 454,  893,  893,  893,
    893,  1045, 1045, 1045, 883,  942,  158,  883,  928,  929,  35,   930,
    931,  1061, 454,  89,   159,  189,  204,  214,  239,  316,  933,  931,
    35,   930,  932,  1061, 436,  946,  450,  1035, 976,  166,  911,  454,
    897,  897,  897,  976,  976,  404,  1014, 451,  911,  451,  449,  451,
    450,  743,  150,  209,  451,  259,  92,   976,  313,  863,  451,  454,
    1036, 79,   863,  451,  454,  873,  948,  1038, 451,  445,  758,  383,
    161,  331,  363,  384,  732,  153,  732,  451,  450,  561,  562,  739,
    981,  1061, 558,  558,  656,  1051, 451,  111,  187,  242,  244,  657,
    1047, 1047, 35,   1047, 396,  396,  697,  697,  697,  697,  207,  698,
    1059, 1047, 373,  792,  324,  373,  191,  52,   365,  1047, 450,  547,
    244,  513,  102,  244,  352,  355,  513,  383,  1047, 1061, 617,  1047,
    516,  671,  1064, 271,  336,  373,  792,  324,  373,  373,  373,  324,
    160,  260,  355,  680,  681,  160,  260,  688,  689,  373,  373,  324,
    451,  451,  451,  306,  1047, 450,  415,  640,  1057, 1056, 1056, 1056,
    1047, 1047, 1047, 52,   365,  1047, 1047, 1047, 1047, 1047, 1047, 153,
    153,  308,  153,  174,  1059, 1047, 1047, 1059, 1047, 1047, 1047, 1047,
    1047, 1047, 1047, 70,   510,  141,  24,   44,   383,  1061, 1047, 615,
    1047, 1047, 451,  201,  704,  201,  201,  704,  704,  201,  704,  524,
    532,  533,  1064, 48,   90,   115,  130,  134,  154,  157,  170,  249,
    257,  293,  527,  656,  415,  417,  1045, 450,  697,  1047, 977,  112,
    176,  111,  249,  205,  1045, 764,  291,  660,  661,  1061, 601,  450,
    552,  186,  568,  543,  1060, 1060, 952,  450,  514,  1060, 639,  1059,
    174,  1045, 419,  153,  649,  451,  454,  951,  613,  451,  583,  35,
    254,  450,  854,  542,  544,  546,  554,  1061, 569,  568,  75,   365,
    571,  882,  578,  576,  571,  1056, 1051, 737,  755,  976,  976,  454,
    450,  759,  383,  454,  668,  373,  450,  591,  451,  449,  509,  1049,
    1049, 509,  509,  509,  509,  333,  1046, 1046, 1046, 587,  163,  720,
    451,  1047, 102,  727,  158,  201,  249,  708,  1056, 201,  201,  708,
    201,  708,  976,  451,  451,  1025, 451,  976,  158,  121,  123,  254,
    450,  451,  422,  985,  1012, 300,  52,   413,  413,  451,  976,  242,
    976,  454,  984,  954,  976,  976,  976,  1015, 451,  976,  32,   32,
    976,  976,  134,  451,  451,  976,  998,  1061, 451,  976,  1045, 1045,
    1045, 1045, 931,  932,  450,  451,  1061, 450,  928,  204,  267,  934,
    928,  934,  204,  933,  934,  204,  364,  940,  450,  1061, 450,  265,
    1013, 52,   169,  918,  451,  451,  451,  1014, 1056, 918,  1056, 774,
    254,  1042, 882,  860,  258,  450,  862,  439,  876,  863,  383,  451,
    373,  715,  158,  656,  976,  451,  454,  415,  70,   740,  740,  451,
    451,  764,  112,  176,  185,  111,  398,  509,  952,  1049, 1049, 1047,
    1047, 1047, 1047, 1047, 1060, 1047, 614,  618,  249,  249,  1057, 1061,
    952,  509,  509,  439,  52,   365,  1047, 1047, 1047, 1047, 1059, 1047,
    1047, 1055, 1055, 952,  454,  1055, 1055, 454,  1059, 1047, 1047, 373,
    976,  64,   1060, 1047, 373,  373,  1046, 1046, 697,  1046, 141,  697,
    1056, 1056, 952,  509,  509,  201,  704,  704,  704,  704,  396,  530,
    531,  451,  454,  443,  450,  490,  534,  587,  828,  1056, 828,  244,
    249,  293,  828,  828,  160,  190,  160,  158,  655,  976,  244,  549,
    764,  557,  396,  572,  1053, 32,   140,  180,  539,  138,  181,  450,
    333,  396,  558,  35,   640,  480,  244,  450,  1047, 127,  650,  411,
    652,  1056, 514,  882,  697,  539,  576,  451,  454,  415,  570,  569,
    114,  126,  284,  1047, 415,  814,  35,   158,  258,  450,  1056, 752,
    765,  766,  1062, 764,  952,  153,  1045, 158,  373,  783,  188,  592,
    509,  509,  509,  1047, 261,  199,  509,  719,  708,  708,  708,  708,
    451,  977,  158,  450,  1015, 450,  451,  454,  451,  978,  300,  451,
    401,  349,  451,  451,  451,  976,  976,  976,  451,  275,  999,  451,
    943,  944,  981,  930,  450,  1046, 928,  258,  396,  935,  928,  204,
    928,  1061, 950,  450,  950,  1061, 897,  91,   167,  319,  450,  912,
    913,  914,  915,  916,  917,  976,  976,  414,  993,  897,  993,  451,
    879,  81,   738,  739,  122,  450,  883,  1040, 719,  258,  719,  451,
    764,  562,  260,  774,  697,  396,  697,  741,  741,  301,  764,  572,
    451,  373,  336,  869,  451,  454,  510,  671,  1060, 1047, 373,  450,
    1053, 774,  681,  450,  450,  689,  1047, 451,  450,  336,  869,  1047,
    1047, 415,  436,  831,  308,  831,  831,  153,  510,  704,  461,  116,
    533,  490,  535,  536,  1056, 1056, 249,  558,  443,  558,  1056, 1056,
    723,  35,   779,  779,  1045, 656,  451,  572,  228,  560,  183,  450,
    661,  291,  450,  451,  26,   74,   82,   110,  184,  355,  553,  553,
    1044, 1047, 1049, 451,  882,  141,  613,  320,  351,  651,  450,  140,
    35,   576,  540,  451,  544,  262,  571,  570,  321,  321,  56,   64,
    220,  882,  697,  1045, 738,  754,  451,  454,  383,  947,  347,  347,
    451,  591,  242,  400,  593,  594,  1047, 509,  977,  1015, 451,  986,
    1012, 52,   242,  432,  52,   897,  451,  454,  35,   945,  1046, 451,
    976,  450,  928,  935,  450,  451,  950,  451,  451,  450,  337,  450,
    451,  454,  994,  995,  1061, 451,  1047, 451,  454,  245,  394,  721,
    732,  509,  740,  572,  450,  697,  742,  742,  1045, 572,  656,  1047,
    365,  618,  396,  511,  336,  869,  1047, 1015, 746,  153,  684,  773,
    1015, 1015, 976,  365,  696,  697,  696,  697,  1046, 509,  525,  1056,
    451,  454,  558,  779,  38,   178,  153,  242,  556,  159,  274,  342,
    258,  564,  565,  566,  365,  451,  1053, 5,    662,  568,  451,  613,
    147,  683,  514,  814,  1045, 976,  291,  882,  569,  568,  547,  571,
    64,   261,  64,   576,  737,  451,  759,  765,  952,  122,  415,  415,
    400,  591,  613,  451,  451,  451,  300,  401,  1012, 294,  321,  1000,
    946,  943,  450,  451,  1046, 1012, 451,  1012, 450,  1012, 913,  454,
    35,   947,  739,  336,  158,  741,  412,  563,  774,  743,  743,  557,
    656,  1047, 976,  365,  451,  264,  326,  298,  685,  684,  451,  451,
    451,  1047, 831,  536,  127,  185,  114,  394,  258,  566,  258,  565,
    1047, 450,  451,  454,  333,  697,  35,   35,   450,  451,  1053, 814,
    570,  569,  261,  261,  450,  514,  764,  27,   194,  802,  160,  160,
    46,   92,   385,  976,  1001, 1002, 1001, 451,  950,  451,  451,  451,
    912,  451,  995,  997,  872,  719,  742,  450,  656,  451,  560,  869,
    1047, 1053, 52,   685,  869,  697,  320,  55,   242,  312,  336,  567,
    567,  451,  5,    1047, 680,  882,  450,  571,  570,  738,  571,  245,
    450,  797,  799,  804,  856,  864,  871,  882,  723,  723,  1002, 320,
    152,  282,  152,  282,  451,  307,  941,  451,  947,  509,  743,  976,
    564,  869,  746,  697,  652,  21,   109,  249,  613,  814,  4,    653,
    654,  1055, 1056, 1064, 571,  451,  947,  798,  799,  800,  883,  884,
    454,  454,  32,   450,  451,  656,  140,  451,  454,  514,  451,  453,
    373,  158,  1002, 976,  291,  654,  571,  800,  347,  347,  451,  1053,
    947,  415,  415,  450,  160,  160,  653,  723,  723,  451};

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] = {
    0,    456,  457,  458,  458,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
    459,  459,  459,  459,  459,  459,  459,  459,  460,  461,  461,  461,
    462,  462,  463,  463,  464,  464,  464,  464,  464,  464,  464,  464,
    464,  465,  465,  465,  465,  465,  465,  466,  467,  468,  468,  469,
    469,  470,  471,  472,  472,  473,  473,  474,  475,  476,  476,  477,
    477,  478,  478,  478,  478,  479,  479,  480,  480,  481,  481,  481,
    481,  481,  481,  482,  482,  482,  483,  483,  483,  484,  484,  484,
    484,  485,  485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
    486,  486,  487,  487,  488,  488,  489,  489,  489,  489,  490,  490,
    490,  490,  491,  491,  491,  491,  491,  491,  491,  492,  492,  492,
    493,  493,  494,  495,  495,  495,  495,  496,  496,  497,  497,  498,
    498,  499,  499,  499,  499,  499,  500,  501,  501,  502,  502,  503,
    504,  504,  504,  504,  504,  505,  505,  505,  505,  505,  505,  505,
    505,  505,  505,  505,  505,  505,  505,  505,  505,  506,  506,  507,
    507,  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
    507,  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
    507,  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
    507,  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,  508,
    508,  509,  509,  509,  510,  510,  511,  511,  512,  512,  512,  512,
    513,  514,  514,  515,  515,  516,  516,  516,  516,  517,  518,  518,
    519,  519,  519,  519,  520,  520,  521,  521,  522,  522,  523,  523,
    524,  524,  524,  525,  525,  526,  526,  527,  527,  527,  527,  527,
    527,  527,  527,  527,  527,  527,  527,  527,  527,  528,  528,  529,
    529,  530,  530,  531,  531,  532,  532,  533,  534,  534,  534,  534,
    534,  535,  535,  536,  537,  537,  537,  537,  538,  538,  538,  538,
    538,  538,  538,  538,  539,  539,  540,  540,  541,  541,  542,  542,
    543,  543,  543,  544,  544,  545,  546,  547,  547,  548,  548,  548,
    548,  549,  549,  549,  549,  549,  549,  549,  550,  550,  550,  550,
    551,  552,  552,  552,  553,  553,  553,  553,  553,  553,  554,  554,
    555,  555,  555,  555,  555,  555,  555,  556,  556,  557,  557,  558,
    558,  559,  560,  560,  560,  560,  561,  561,  562,  562,  563,  563,
    564,  564,  564,  564,  564,  565,  566,  567,  567,  567,  567,  567,
    568,  568,  569,  569,  569,  569,  570,  570,  570,  570,  571,  571,
    572,  572,  573,  574,  574,  575,  576,  576,  576,  577,  577,  578,
    579,  579,  580,  581,  581,  582,  582,  583,  583,  584,  584,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,  585,  586,
    586,  587,  587,  587,  588,  588,  589,  589,  590,  590,  591,  591,
    592,  592,  593,  593,  594,  594,  595,  595,  596,  596,  597,  598,
    598,  599,  599,  600,  600,  601,  601,  602,  602,  602,  603,  604,
    604,  605,  606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
    606,  606,  606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
    606,  606,  606,  607,  608,  608,  608,  608,  609,  609,  610,  610,
    611,  611,  612,  612,  613,  613,  614,  614,  615,  616,  616,  617,
    617,  617,  617,  618,  619,  620,  621,  622,  622,  623,  623,  624,
    624,  625,  625,  626,  626,  626,  627,  627,  628,  628,  629,  630,
    630,  631,  631,  632,  633,  633,  634,  634,  635,  636,  637,  638,
    638,  639,  639,  640,  640,  641,  641,  642,  642,  643,  643,  644,
    644,  644,  644,  644,  645,  645,  646,  646,  646,  647,  647,  648,
    648,  648,  648,  648,  649,  649,  650,  650,  651,  651,  652,  652,
    653,  653,  653,  654,  654,  654,  654,  655,  655,  656,  656,  657,
    657,  657,  657,  657,  657,  658,  658,  659,  659,  660,  660,  661,
    662,  662,  663,  664,  664,  664,  664,  665,  666,  667,  667,  667,
    667,  667,  667,  667,  667,  667,  667,  667,  667,  667,  667,  668,
    669,  669,  670,  670,  671,  671,  671,  671,  671,  672,  673,  673,
    674,  675,  675,  676,  676,  677,  677,  677,  678,  678,  679,  680,
    680,  681,  681,  681,  681,  681,  682,  682,  683,  683,  684,  684,
    684,  685,  685,  686,  687,  687,  688,  688,  689,  689,  690,  690,
    691,  691,  692,  693,  694,  694,  694,  694,  694,  694,  694,  694,
    695,  695,  695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
    695,  695,  695,  696,  696,  697,  697,  698,  698,  699,  699,  700,
    701,  701,  701,  702,  702,  702,  702,  702,  702,  702,  702,  702,
    702,  702,  702,  702,  702,  702,  702,  702,  702,  703,  703,  703,
    703,  703,  703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
    703,  703,  703,  703,  703,  703,  704,  704,  705,  705,  705,  705,
    705,  705,  705,  706,  706,  707,  707,  707,  707,  707,  707,  707,
    707,  707,  707,  707,  708,  708,  709,  709,  710,  710,  710,  710,
    710,  710,  710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
    711,  711,  712,  712,  713,  714,  714,  715,  715,  715,  715,  715,
    716,  716,  717,  717,  717,  717,  718,  718,  718,  718,  718,  718,
    718,  718,  718,  718,  718,  718,  718,  718,  718,  718,  719,  719,
    720,  720,  721,  721,  722,  722,  723,  724,  725,  725,  726,  726,
    727,  727,  728,  729,  729,  730,  730,  730,  731,  731,  731,  732,
    732,  732,  732,  733,  733,  734,  734,  735,  735,  736,  736,  737,
    737,  738,  738,  739,  739,  739,  740,  740,  741,  741,  741,  742,
    742,  742,  743,  743,  743,  744,  744,  744,  745,  745,  746,  746,
    747,  747,  748,  748,  749,  749,  750,  750,  750,  750,  750,  751,
    751,  751,  751,  751,  752,  753,  754,  754,  754,  755,  755,  755,
    756,  757,  757,  757,  757,  758,  758,  759,  759,  760,  760,  760,
    760,  760,  760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
    761,  761,  761,  761,  761,  762,  762,  763,  763,  764,  764,  765,
    766,  766,  767,  768,  768,  769,  769,  770,  770,  771,  771,  772,
    772,  773,  773,  773,  773,  774,  774,  775,  776,  776,  777,  777,
    778,  778,  778,  779,  779,  779,  780,  781,  781,  782,  783,  783,
    783,  783,  784,  785,  785,  785,  785,  786,  786,  787,  787,  787,
    788,  788,  789,  790,  790,  791,  791,  791,  791,  791,  791,  791,
    791,  791,  791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
    791,  791,  791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
    791,  791,  791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
    791,  791,  791,  791,  791,  792,  792,  793,  793,  794,  794,  794,
    794,  794,  794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
    794,  794,  794,  794,  794,  794,  794,  794,  794,  795,  795,  795,
    795,  795,  795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
    795,  795,  795,  795,  796,  797,  797,  797,  798,  798,  799,  799,
    799,  799,  799,  800,  800,  801,  801,  801,  801,  802,  802,  802,
    803,  803,  804,  805,  805,  806,  807,  807,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,  809,  809,
    809,  810,  810,  810,  810,  810,  811,  811,  811,  812,  812,  813,
    813,  813,  813,  814,  814,  814,  814,  815,  816,  817,  817,  818,
    818,  819,  819,  819,  820,  820,  820,  820,  820,  820,  820,  821,
    821,  822,  822,  822,  823,  824,  824,  825,  825,  826,  827,  827,
    827,  827,  827,  827,  827,  828,  828,  829,  830,  830,  830,  830,
    830,  830,  831,  831,  832,  833,  833,  833,  834,  834,  835,  835,
    835,  835,  835,  836,  836,  837,  837,  837,  837,  838,  838,  839,
    839,  840,  840,  841,  841,  842,  842,  843,  843,  844,  844,  844,
    844,  845,  845,  845,  845,  845,  845,  845,  845,  845,  846,  846,
    847,  848,  848,  849,  849,  849,  850,  851,  851,  852,  852,  852,
    852,  853,  853,  854,  854,  855,  855,  855,  855,  856,  857,  857,
    858,  858,  858,  859,  859,  860,  861,  861,  861,  862,  862,  862,
    863,  863,  864,  865,  865,  866,  867,  867,  868,  868,  868,  868,
    868,  868,  868,  868,  869,  869,  870,  870,  870,  871,  872,  872,
    873,  873,  874,  875,  875,  876,  877,  877,  878,  879,  880,  880,
    880,  880,  880,  881,  881,  881,  882,  882,  883,  883,  884,  884,
    884,  884,  884,  884,  884,  884,  885,  885,  886,  886,  886,  886,
    886,  886,  886,  887,  887,  887,  888,  888,  889,  890,  890,  891,
    891,  892,  892,  892,  892,  892,  892,  892,  892,  892,  893,  893,
    894,  894,  894,  895,  895,  896,  896,  897,  897,  898,  899,  899,
    900,  900,  901,  901,  901,  901,  902,  902,  903,  903,  903,  904,
    904,  905,  905,  906,  907,  907,  907,  908,  909,  909,  910,  910,
    911,  911,  912,  912,  913,  913,  913,  913,  913,  914,  915,  916,
    917,  918,  918,  919,  919,  920,  920,  921,  921,  922,  923,  923,
    923,  923,  924,  924,  925,  925,  926,  926,  927,  927,  928,  928,
    928,  928,  928,  928,  928,  928,  929,  929,  929,  929,  929,  929,
    930,  930,  930,  930,  931,  931,  932,  932,  932,  932,  932,  933,
    933,  933,  933,  934,  934,  935,  935,  936,  936,  936,  936,  937,
    937,  938,  938,  938,  939,  940,  941,  941,  942,  942,  943,  944,
    944,  945,  945,  946,  946,  947,  947,  948,  948,  948,  949,  949,
    950,  950,  951,  952,  952,  952,  952,  952,  952,  953,  953,  953,
    954,  954,  954,  954,  954,  954,  954,  955,  955,  955,  955,  956,
    956,  957,  957,  958,  958,  958,  958,  958,  958,  958,  958,  958,
    958,  958,  959,  959,  960,  960,  961,  961,  962,  963,  964,  964,
    965,  965,  966,  967,  968,  968,  968,  968,  968,  968,  969,  969,
    970,  970,  971,  971,  971,  971,  972,  973,  973,  973,  974,  974,
    974,  974,  974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
    975,  975,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
    976,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
    976,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
    976,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
    976,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
    976,  976,  976,  976,  976,  977,  977,  977,  977,  977,  977,  977,
    977,  977,  977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
    977,  977,  977,  977,  977,  977,  978,  978,  978,  978,  978,  978,
    978,  978,  978,  978,  978,  978,  978,  978,  979,  979,  979,  979,
    979,  979,  979,  980,  980,  981,  981,  982,  982,  982,  982,  982,
    982,  982,  982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
    982,  982,  982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
    982,  982,  982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
    982,  983,  983,  984,  984,  984,  984,  985,  986,  986,  987,  987,
    988,  988,  989,  989,  989,  990,  990,  990,  990,  991,  991,  992,
    992,  993,  993,  994,  994,  995,  996,  996,  996,  997,  998,  998,
    999,  999,  1000, 1000, 1000, 1001, 1001, 1002, 1002, 1002, 1002, 1002,
    1003, 1003, 1003, 1004, 1004, 1005, 1006, 1006, 1006, 1007, 1007, 1008,
    1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1009,
    1009, 1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1012, 1012, 1013,
    1013, 1014, 1014, 1014, 1015, 1015, 1016, 1016, 1016, 1017, 1017, 1018,
    1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 1020, 1021,
    1022, 1022, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1025, 1026, 1026,
    1026, 1027, 1027, 1028, 1029, 1029, 1030, 1031, 1031, 1032, 1032, 1033,
    1033, 1034, 1034, 1034, 1034, 1035, 1035, 1036, 1036, 1037, 1037, 1038,
    1038, 1039, 1039, 1040, 1041, 1041, 1042, 1042, 1043, 1043, 1043, 1043,
    1044, 1044, 1045, 1045, 1046, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
    1053, 1053, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
    1054, 1054, 1054, 1055, 1056, 1057, 1057, 1057, 1058, 1059, 1059, 1059,
    1060, 1060, 1061, 1061, 1061, 1062, 1062, 1062, 1063, 1063, 1063, 1063,
    1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
    1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1066, 1066, 1066,
    1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
    1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
    1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
    1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1067, 1067, 1067,
    1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
    1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1068, 1068, 1068, 1068,
    1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
    1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
    1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
    1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
    1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
    1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
    1068};

/* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] = {
    0,  2,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  5,  1,  1,  0,  2,
    0,  2,  0,  2,  2,  3,  3,  1,  3,  3,  2,  1,  1,  2,  2,  2,  3,  3,  5,
    5,  0,  3,  5,  5,  5,  4,  3,  5,  3,  5,  5,  6,  1,  1,  3,  5,  6,  4,
    9,  7,  1,  0,  2,  0,  1,  1,  1,  1,  1,  1,  2,  3,  3,  2,  5,  1,  3,
    3,  3,  3,  1,  3,  3,  2,  2,  2,  2,  3,  3,  3,  3,  1,  3,  1,  3,  1,
    1,  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  3,  5,  1,  1,  1,  1,  1,  0,
    1,  1,  2,  1,  2,  3,  2,  1,  1,  2,  1,  2,  1,  2,  3,  4,  3,  2,  4,
    1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  4,  6,  10, 13, 4,  6,  10, 13, 4,
    6,  4,  6,  5,  7,  11, 14, 1,  3,  2,  3,  4,  6,  6,  6,  5,  5,  6,  6,
    4,  8,  4,  2,  4,  3,  6,  4,  3,  3,  3,  3,  2,  2,  3,  4,  4,  3,  3,
    3,  3,  3,  3,  4,  4,  3,  2,  3,  2,  2,  3,  3,  2,  2,  3,  4,  4,  1,
    3,  2,  1,  1,  0,  2,  0,  2,  0,  1,  1,  1,  3,  3,  2,  0,  1,  3,  3,
    1,  5,  3,  4,  1,  3,  4,  6,  4,  8,  2,  2,  11, 7,  1,  1,  1,  0,  1,
    1,  1,  1,  3,  2,  0,  1,  1,  1,  3,  3,  1,  1,  3,  3,  3,  3,  4,  3,
    2,  1,  0,  2,  0,  3,  0,  1,  0,  1,  3,  2,  1,  1,  1,  3,  0,  1,  3,
    1,  11, 14, 10, 13, 1,  1,  2,  2,  2,  2,  1,  0,  1,  0,  3,  0,  1,  3,
    1,  3,  1,  1,  1,  1,  1,  4,  4,  2,  0,  3,  1,  1,  2,  2,  1,  3,  4,
    5,  2,  5,  1,  2,  2,  2,  3,  3,  3,  0,  1,  1,  1,  1,  1,  1,  3,  1,
    5,  7,  3,  8,  4,  9,  11, 2,  0,  3,  0,  1,  3,  1,  2,  2,  2,  0,  1,
    3,  3,  6,  4,  0,  1,  1,  2,  2,  0,  3,  3,  2,  1,  1,  2,  2,  4,  0,
    2,  2,  2,  0,  3,  4,  4,  0,  2,  0,  4,  0,  3,  7,  10, 5,  2,  3,  0,
    8,  11, 4,  1,  0,  6,  5,  8,  4,  6,  1,  0,  1,  2,  2,  1,  2,  3,  2,
    2,  2,  2,  3,  3,  1,  3,  1,  0,  1,  2,  1,  1,  3,  6,  10, 1,  0,  1,
    2,  2,  0,  2,  2,  1,  0,  5,  7,  1,  0,  7,  2,  0,  3,  5,  5,  8,  2,
    0,  2,  2,  2,  5,  2,  0,  2,  7,  10, 6,  6,  6,  6,  7,  7,  9,  9,  6,
    7,  6,  8,  8,  8,  8,  6,  6,  7,  7,  8,  6,  9,  6,  7,  2,  2,  2,  2,
    1,  2,  1,  0,  6,  8,  7,  6,  4,  0,  1,  3,  4,  1,  3,  1,  2,  2,  2,
    2,  1,  1,  10, 2,  0,  2,  2,  1,  0,  4,  6,  5,  4,  4,  11, 14, 5,  7,
    11, 2,  1,  4,  0,  8,  1,  1,  7,  9,  8,  9,  8,  6,  8,  4,  0,  5,  0,
    2,  0,  2,  0,  2,  0,  1,  1,  1,  1,  1,  15, 20, 1,  1,  2,  1,  3,  1,
    1,  1,  3,  1,  3,  0,  1,  0,  1,  1,  4,  0,  1,  3,  0,  1,  1,  1,  1,
    2,  0,  0,  2,  2,  1,  2,  2,  2,  2,  6,  8,  11, 13, 1,  3,  5,  1,  3,
    5,  1,  2,  2,  1,  8,  4,  5,  4,  4,  4,  3,  7,  8,  6,  6,  6,  6,  6,
    4,  5,  3,  1,  3,  3,  1,  1,  1,  1,  1,  1,  3,  1,  3,  3,  1,  0,  1,
    3,  7,  9,  9,  3,  0,  13, 1,  3,  5,  6,  4,  7,  2,  1,  0,  2,  0,  2,
    4,  0,  1,  0,  6,  8,  8,  1,  3,  5,  5,  7,  9,  7,  9,  5,  6,  6,  4,
    4,  6,  4,  6,  5,  7,  1,  1,  1,  2,  1,  2,  2,  1,  1,  1,  1,  3,  3,
    3,  3,  1,  3,  1,  2,  2,  3,  1,  3,  5,  2,  2,  0,  6,  6,  6,  7,  7,
    7,  8,  9,  8,  8,  6,  9,  8,  9,  9,  7,  10, 7,  1,  1,  1,  1,  1,  1,
    1,  2,  1,  1,  1,  1,  1,  2,  1,  3,  2,  3,  3,  3,  3,  1,  1,  8,  8,
    8,  9,  9,  9,  9,  2,  0,  1,  1,  2,  2,  1,  1,  1,  1,  1,  1,  2,  1,
    1,  2,  2,  1,  2,  3,  3,  3,  3,  4,  4,  3,  3,  3,  4,  4,  3,  4,  4,
    1,  1,  1,  0,  7,  7,  10, 1,  1,  2,  4,  5,  1,  3,  2,  2,  2,  2,  1,
    2,  2,  4,  3,  2,  2,  2,  2,  3,  2,  2,  2,  5,  5,  5,  1,  3,  1,  2,
    3,  0,  1,  3,  2,  6,  6,  9,  3,  0,  3,  0,  5,  2,  0,  3,  3,  3,  7,
    7,  10, 1,  1,  1,  1,  14, 17, 1,  0,  1,  0,  1,  0,  2,  0,  1,  3,  5,
    5,  7,  2,  0,  1,  2,  0,  1,  1,  0,  2,  2,  0,  9,  12, 7,  2,  0,  3,
    2,  1,  3,  3,  2,  1,  3,  3,  3,  2,  2,  1,  1,  1,  1,  2,  1,  1,  1,
    1,  4,  5,  1,  3,  3,  1,  3,  3,  5,  6,  1,  3,  1,  2,  4,  5,  1,  1,
    1,  1,  3,  3,  2,  2,  1,  2,  2,  2,  1,  2,  2,  2,  1,  1,  1,  3,  3,
    5,  2,  0,  2,  1,  3,  5,  1,  2,  1,  0,  5,  7,  5,  7,  5,  7,  3,  5,
    5,  5,  1,  3,  2,  1,  2,  1,  2,  11, 10, 10, 2,  2,  0,  9,  2,  0,  10,
    11, 11, 5,  5,  8,  3,  3,  6,  6,  1,  1,  1,  1,  1,  1,  3,  1,  5,  5,
    7,  6,  6,  6,  6,  8,  8,  6,  6,  7,  9,  9,  8,  10, 6,  6,  6,  8,  6,
    8,  6,  8,  7,  9,  6,  8,  7,  9,  8,  10, 9,  11, 8,  10, 9,  11, 8,  8,
    7,  6,  6,  6,  8,  8,  8,  8,  6,  9,  1,  0,  2,  0,  7,  6,  6,  6,  6,
    6,  7,  9,  9,  6,  8,  8,  8,  8,  8,  6,  8,  6,  8,  7,  9,  7,  9,  6,
    7,  6,  6,  6,  6,  6,  7,  7,  7,  9,  9,  6,  6,  6,  8,  8,  8,  6,  7,
    13, 1,  1,  3,  3,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,
    0,  6,  8,  3,  2,  0,  2,  2,  2,  2,  3,  3,  2,  2,  2,  2,  3,  2,  5,
    4,  3,  3,  3,  1,  1,  0,  3,  2,  2,  1,  2,  1,  3,  2,  1,  0,  9,  11,
    12, 14, 3,  4,  4,  0,  2,  5,  1,  0,  1,  2,  3,  3,  3,  1,  2,  1,  1,
    1,  1,  1,  1,  0,  5,  4,  6,  4,  3,  5,  4,  4,  6,  4,  6,  6,  5,  7,
    9,  6,  1,  0,  6,  11, 11, 11, 13, 9,  11, 1,  1,  10, 4,  2,  5,  2,  0,
    4,  5,  5,  4,  6,  1,  3,  1,  1,  1,  1,  2,  4,  1,  1,  1,  0,  1,  0,
    1,  0,  3,  0,  2,  4,  3,  5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,
    2,  1,  1,  1,  1,  0,  5,  3,  0,  1,  1,  1,  1,  3,  9,  3,  0,  2,  3,
    2,  3,  7,  1,  3,  1,  4,  2,  1,  3,  2,  8,  5,  0,  4,  3,  0,  2,  0,
    7,  2,  0,  5,  3,  0,  2,  2,  2,  3,  1,  3,  1,  2,  1,  0,  1,  2,  0,
    8,  1,  3,  1,  1,  3,  5,  5,  2,  1,  3,  7,  1,  0,  3,  2,  2,  2,  0,
    2,  2,  1,  1,  3,  3,  1,  2,  4,  4,  2,  3,  5,  5,  1,  1,  9,  9,  1,
    2,  4,  4,  4,  2,  2,  3,  1,  3,  6,  1,  0,  2,  0,  3,  3,  4,  4,  4,
    4,  3,  2,  1,  1,  0,  1,  1,  0,  1,  5,  1,  0,  1,  0,  3,  1,  3,  4,
    3,  2,  2,  1,  1,  1,  0,  2,  4,  5,  2,  3,  1,  1,  1,  1,  3,  0,  1,
    1,  1,  1,  1,  3,  0,  1,  3,  1,  1,  1,  1,  1,  2,  4,  4,  5,  2,  0,
    1,  3,  1,  0,  1,  2,  3,  2,  4,  2,  3,  2,  0,  2,  3,  2,  0,  1,  3,
    2,  1,  2,  3,  2,  3,  1,  4,  3,  4,  5,  4,  5,  4,  5,  2,  4,  1,  1,
    0,  1,  4,  5,  4,  0,  2,  2,  2,  1,  1,  0,  4,  2,  1,  2,  2,  4,  1,
    3,  1,  2,  3,  3,  6,  4,  0,  2,  6,  2,  1,  3,  4,  0,  2,  0,  2,  0,
    2,  4,  0,  1,  0,  1,  3,  3,  2,  3,  5,  6,  2,  3,  3,  4,  0,  1,  1,
    1,  1,  1,  2,  4,  1,  1,  1,  1,  2,  3,  3,  0,  1,  1,  1,  1,  1,  2,
    2,  2,  2,  2,  1,  3,  0,  1,  1,  1,  1,  5,  2,  1,  1,  1,  1,  5,  2,
    2,  2,  1,  3,  3,  2,  1,  0,  3,  0,  5,  2,  5,  2,  1,  3,  3,  0,  1,
    1,  1,  1,  1,  1,  3,  3,  3,  3,  3,  3,  3,  0,  1,  4,  1,  3,  3,  5,
    2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  2,  3,  3,
    2,  2,  3,  5,  4,  6,  3,  5,  4,  6,  4,  6,  5,  7,  3,  2,  4,  2,  3,
    3,  4,  3,  4,  3,  4,  5,  6,  6,  7,  6,  7,  6,  7,  3,  4,  4,  6,  2,
    3,  4,  1,  3,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    2,  2,  5,  6,  6,  7,  3,  4,  1,  1,  2,  4,  1,  1,  1,  2,  2,  2,  2,
    1,  1,  4,  3,  5,  6,  8,  6,  6,  4,  4,  1,  1,  1,  5,  1,  1,  4,  1,
    4,  1,  4,  1,  4,  1,  1,  1,  1,  1,  1,  6,  4,  4,  4,  4,  6,  5,  5,
    5,  4,  6,  4,  4,  4,  4,  5,  7,  7,  9,  5,  4,  6,  5,  7,  7,  7,  2,
    3,  3,  3,  4,  0,  4,  1,  3,  3,  1,  1,  1,  2,  2,  0,  2,  4,  4,  6,
    5,  0,  5,  0,  2,  0,  1,  3,  3,  2,  2,  0,  6,  1,  0,  3,  0,  2,  2,
    0,  1,  4,  2,  2,  2,  2,  2,  4,  3,  5,  4,  3,  5,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  4,  1,  4,  1,  4,  1,
    2,  1,  2,  1,  3,  1,  3,  1,  3,  3,  1,  3,  3,  3,  2,  1,  3,  3,  0,
    1,  1,  1,  1,  1,  1,  1,  1,  4,  3,  2,  3,  0,  3,  3,  2,  2,  1,  0,
    2,  2,  3,  2,  1,  1,  3,  5,  1,  2,  4,  2,  0,  1,  0,  1,  2,  2,  2,
    3,  5,  1,  2,  0,  2,  1,  0,  1,  1,  1,  3,  3,  1,  0,  1,  3,  3,  2,
    1,  1,  1,  3,  1,  2,  1,  3,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,
    1,  1,  2,  6,  2,  3,  5,  1,  1,  1,  1,  1,  1,  2,  2,  1,  1,  1,  1,
    1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

#define yyerrok (yyerrstatus = 0)
#define yyclearin (yychar = YYEMPTY)
#define YYEMPTY (-2)
#define YYEOF 0

#define YYACCEPT goto yyacceptlab
#define YYABORT goto yyabortlab
#define YYERROR goto yyerrorlab

#define YYRECOVERING() (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                          \
  do                                                                    \
    if (yychar == YYEMPTY) {                                            \
      yychar = (Token);                                                 \
      yylval = (Value);                                                 \
      YYPOPSTACK(yylen);                                                \
      yystate = *yyssp;                                                 \
      goto yybackup;                                                    \
    } else {                                                            \
      yyerror(&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
      YYERROR;                                                          \
    }                                                                   \
  while (0)

/* Error token number */
#define YYTERROR 1
#define YYERRCODE 256

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
#define YYLLOC_DEFAULT(Current, Rhs, N)                                        \
  do                                                                           \
    if (N) {                                                                   \
      (Current).first_line = YYRHSLOC(Rhs, 1).first_line;                      \
      (Current).first_column = YYRHSLOC(Rhs, 1).first_column;                  \
      (Current).last_line = YYRHSLOC(Rhs, N).last_line;                        \
      (Current).last_column = YYRHSLOC(Rhs, N).last_column;                    \
    } else {                                                                   \
      (Current).first_line = (Current).last_line = YYRHSLOC(Rhs, 0).last_line; \
      (Current).first_column = (Current).last_column =                         \
          YYRHSLOC(Rhs, 0).last_column;                                        \
    }                                                                          \
  while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])

/* Enable debugging if requested.  */
#if YYDEBUG

#ifndef YYFPRINTF
#include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#define YYFPRINTF fprintf
#endif

#define YYDPRINTF(Args)          \
  do {                           \
    if (yydebug) YYFPRINTF Args; \
  } while (0)

/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned yy_location_print_(FILE *yyo, YYLTYPE const *const yylocp) {
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line) {
    res += YYFPRINTF(yyo, "%d", yylocp->first_line);
    if (0 <= yylocp->first_column)
      res += YYFPRINTF(yyo, ".%d", yylocp->first_column);
  }
  if (0 <= yylocp->last_line) {
    if (yylocp->first_line < yylocp->last_line) {
      res += YYFPRINTF(yyo, "-%d", yylocp->last_line);
      if (0 <= end_col) res += YYFPRINTF(yyo, ".%d", end_col);
    } else if (0 <= end_col && yylocp->first_column < end_col)
      res += YYFPRINTF(yyo, "-%d", end_col);
  }
  return res;
}

#define YY_LOCATION_PRINT(File, Loc) yy_location_print_(File, &(Loc))

#else
#define YY_LOCATION_PRINT(File, Loc) ((void)0)
#endif
#endif

#define YY_SYMBOL_PRINT(Title, Type, Value, Location)            \
  do {                                                           \
    if (yydebug) {                                               \
      YYFPRINTF(stderr, "%s ", Title);                           \
      yy_symbol_print(stderr, Type, Value, Location, yyscanner); \
      YYFPRINTF(stderr, "\n");                                   \
    }                                                            \
  } while (0)

/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void yy_symbol_value_print(FILE *yyoutput, int yytype,
                                  YYSTYPE const *const yyvaluep,
                                  YYLTYPE const *const yylocationp,
                                  core_yyscan_t yyscanner) {
  FILE *yyo = yyoutput;
  YYUSE(yyo);
  YYUSE(yylocationp);
  YYUSE(yyscanner);
  if (!yyvaluep) return;
#ifdef YYPRINT
  if (yytype < YYNTOKENS) YYPRINT(yyoutput, yytoknum[yytype], *yyvaluep);
#endif
  YYUSE(yytype);
}

/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void yy_symbol_print(FILE *yyoutput, int yytype,
                            YYSTYPE const *const yyvaluep,
                            YYLTYPE const *const yylocationp,
                            core_yyscan_t yyscanner) {
  YYFPRINTF(yyoutput, "%s %s (", yytype < YYNTOKENS ? "token" : "nterm",
            yytname[yytype]);

  YY_LOCATION_PRINT(yyoutput, *yylocationp);
  YYFPRINTF(yyoutput, ": ");
  yy_symbol_value_print(yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF(yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void yy_stack_print(yytype_int16 *yybottom, yytype_int16 *yytop) {
  YYFPRINTF(stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++) {
    int yybot = *yybottom;
    YYFPRINTF(stderr, " %d", yybot);
  }
  YYFPRINTF(stderr, "\n");
}

#define YY_STACK_PRINT(Bottom, Top)               \
  do {                                            \
    if (yydebug) yy_stack_print((Bottom), (Top)); \
  } while (0)

/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void yy_reduce_print(yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                            int yyrule, core_yyscan_t yyscanner) {
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF(stderr, "Reducing stack by rule %d (line %lu):\n", yyrule - 1,
            yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++) {
    YYFPRINTF(stderr, "   $%d = ", yyi + 1);
    yy_symbol_print(stderr, yystos[yyssp[yyi + 1 - yynrhs]],
                    &(yyvsp[(yyi + 1) - (yynrhs)]),
                    &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
    YYFPRINTF(stderr, "\n");
  }
}

#define YY_REDUCE_PRINT(Rule)                                           \
  do {                                                                  \
    if (yydebug) yy_reduce_print(yyssp, yyvsp, yylsp, Rule, yyscanner); \
  } while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
#define YYDPRINTF(Args)
#define YY_SYMBOL_PRINT(Title, Type, Value, Location)
#define YY_STACK_PRINT(Bottom, Top)
#define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

#if YYERROR_VERBOSE

#ifndef yystrlen
#if defined __GLIBC__ && defined _STRING_H
#define yystrlen strlen
#else
/* Return the length of YYSTR.  */
static YYSIZE_T yystrlen(const char *yystr) {
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++) continue;
  return yylen;
}
#endif
#endif

#ifndef yystpcpy
#if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#define yystpcpy stpcpy
#else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *yystpcpy(char *yydest, const char *yysrc) {
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0') continue;

  return yyd - 1;
}
#endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T yytnamerr(char *yyres, const char *yystr) {
  if (*yystr == '"') {
    YYSIZE_T yyn = 0;
    char const *yyp = yystr;

    for (;;) switch (*++yyp) {
        case '\'':
        case ',':
          goto do_not_strip_quotes;

        case '\\':
          if (*++yyp != '\\') goto do_not_strip_quotes;
        /* Fall through.  */
        default:
          if (yyres) yyres[yyn] = *yyp;
          yyn++;
          break;

        case '"':
          if (yyres) yyres[yyn] = '\0';
          return yyn;
      }
  do_not_strip_quotes:
    ;
  }

  if (!yyres) return yystrlen(yystr);

  return yystpcpy(yyres, yystr) - yyres;
}
#endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int yysyntax_error(YYSIZE_T *yymsg_alloc, char **yymsg,
                          yytype_int16 *yyssp, int yytoken) {
  YYSIZE_T yysize0 = yytnamerr(YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY) {
    int yyn = yypact[*yyssp];
    yyarg[yycount++] = yytname[yytoken];
    if (!yypact_value_is_default(yyn)) {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR &&
            !yytable_value_is_error(yytable[yyx + yyn])) {
          if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM) {
            yycount = 1;
            yysize = yysize0;
            break;
          }
          yyarg[yycount++] = yytname[yyx];
          {
            YYSIZE_T yysize1 = yysize + yytnamerr(YY_NULLPTR, yytname[yyx]);
            if (!(yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
              return 2;
            yysize = yysize1;
          }
        }
    }
  }

  switch (yycount) {
#define YYCASE_(N, S) \
  case N:             \
    yyformat = S;     \
    break
    YYCASE_(0, YY_("syntax error"));
    YYCASE_(1, YY_("syntax error, unexpected %s"));
    YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
    YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
    YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
    YYCASE_(5,
            YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
  }

  {
    YYSIZE_T yysize1 = yysize + yystrlen(yyformat);
    if (!(yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)) return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize) {
    *yymsg_alloc = 2 * yysize;
    if (!(yysize <= *yymsg_alloc && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
      *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
    return 1;
  }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount) {
        yyp += yytnamerr(yyp, yyarg[yyi++]);
        yyformat += 2;
      } else {
        yyp++;
        yyformat++;
      }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void yydestruct(const char *yymsg, int yytype, YYSTYPE *yyvaluep,
                       YYLTYPE *yylocationp, core_yyscan_t yyscanner) {
  YYUSE(yyvaluep);
  YYUSE(yylocationp);
  YYUSE(yyscanner);
  if (!yymsg) yymsg = "Deleting";
  YY_SYMBOL_PRINT(yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE(yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}

/*----------.
| yyparse.  |
`----------*/

int yyparse(core_yyscan_t yyscanner) {
  /* The lookahead symbol.  */
  int yychar;

  /* The semantic value of the lookahead symbol.  */
  /* Default value used for initialization, for pacifying older GCCs
     or non-GCC compilers.  */
  YY_INITIAL_VALUE(static YYSTYPE yyval_default;)
  YYSTYPE yylval YY_INITIAL_VALUE(= yyval_default);

  /* Location data for the lookahead symbol.  */
  static YYLTYPE yyloc_default
#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
      =
  { 1,
    1,
    1,
    1 }
#endif
  ;
  YYLTYPE yylloc = yyloc_default;

  /* Number of syntax errors so far.  */
  int yynerrs;

  int yystate;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;

  /* The stacks and their tools:
     'yyss': related to states.
     'yyvs': related to semantic values.
     'yyls': related to locations.

     Refer to the stacks through separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs;
  YYSTYPE *yyvsp;

  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls;
  YYLTYPE *yylsp;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N) (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp) {
    /* Get the current used size of the three stacks, in elements.  */
    YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
    {
      /* Give user a chance to reallocate the stack.  Use copies of
         these so that the &'s don't force the real ones into
         memory.  */
      YYSTYPE *yyvs1 = yyvs;
      yytype_int16 *yyss1 = yyss;
      YYLTYPE *yyls1 = yyls;

      /* Each stack pointer address is followed by the size of the
         data in use in that stack, in bytes.  This used to be a
         conditional around just the two extra args, but that might
         be undefined if yyoverflow is a macro.  */
      yyoverflow(YY_("memory exhausted"), &yyss1, yysize * sizeof(*yyssp),
                 &yyvs1, yysize * sizeof(*yyvsp), &yyls1,
                 yysize * sizeof(*yylsp), &yystacksize);

      yyls = yyls1;
      yyss = yyss1;
      yyvs = yyvs1;
    }
#else /* no yyoverflow */
#ifndef YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    /* Extend the stack our own way.  */
    if (YYMAXDEPTH <= yystacksize) goto yyexhaustedlab;
    yystacksize *= 2;
    if (YYMAXDEPTH < yystacksize) yystacksize = YYMAXDEPTH;

    {
      yytype_int16 *yyss1 = yyss;
      union yyalloc *yyptr =
          (union yyalloc *)YYSTACK_ALLOC(YYSTACK_BYTES(yystacksize));
      if (!yyptr) goto yyexhaustedlab;
      YYSTACK_RELOCATE(yyss_alloc, yyss);
      YYSTACK_RELOCATE(yyvs_alloc, yyvs);
      YYSTACK_RELOCATE(yyls_alloc, yyls);
#undef YYSTACK_RELOCATE
      if (yyss1 != yyssa) YYSTACK_FREE(yyss1);
    }
#endif
#endif /* no yyoverflow */

    yyssp = yyss + yysize - 1;
    yyvsp = yyvs + yysize - 1;
    yylsp = yyls + yysize - 1;

    YYDPRINTF((stderr, "Stack size increased to %lu\n",
               (unsigned long int)yystacksize));

    if (yyss + yystacksize - 1 <= yyssp) YYABORT;
  }

  YYDPRINTF((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL) YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default(yyn)) goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY) {
    YYDPRINTF((stderr, "Reading a token: "));
    yychar = yylex(&yylval, &yylloc, yyscanner);
  }

  if (yychar <= YYEOF) {
    yychar = yytoken = YYEOF;
    YYDPRINTF((stderr, "Now at end of input.\n"));
  } else {
    yytoken = YYTRANSLATE(yychar);
    YY_SYMBOL_PRINT("Next token is", yytoken, &yylval, &yylloc);
  }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken) goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0) {
    if (yytable_value_is_error(yyn)) goto yyerrlab;
    yyn = -yyn;
    goto yyreduce;
  }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus) yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;

/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0) goto yyerrlab;
  goto yyreduce;

/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1 - yylen];

  /* Default location.  */
  YYLLOC_DEFAULT(yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT(yyn);
  switch (yyn) {
    case 2:
#line 734 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
    }
#line 23347 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 3:
#line 741 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) != NULL)
        (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
      else
        (yyval.list) = (yyvsp[-2].list);
    }
#line 23358 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 4:
#line 748 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) != NULL)
        (yyval.list) = list_make1((yyvsp[0].node));
      else
        (yyval.list) = NIL;
    }
#line 23369 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 127:
#line 880 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 23375 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 128:
#line 891 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateRoleStmt *n = makeNode(CreateRoleStmt);
      n->stmt_type = ROLESTMT_ROLE;
      n->role = (yyvsp[-2].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23387 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 129:
#line 901 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 23393 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 130:
#line 902 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 23399 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 131:
#line 903 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 23405 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 132:
#line 912 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 23411 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 133:
#line 913 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 23417 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 134:
#line 917 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 23423 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 135:
#line 918 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 23429 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 136:
#line 923 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("password", (Node *)makeString((yyvsp[0].str)));
    }
#line 23438 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 137:
#line 928 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("password", NULL);
    }
#line 23446 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 138:
#line 932 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("encryptedPassword", (Node *)makeString((yyvsp[0].str)));
    }
#line 23455 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 139:
#line 937 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("unencryptedPassword",
                                   (Node *)makeString((yyvsp[0].str)));
    }
#line 23464 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 140:
#line 942 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("inherit", (Node *)makeInteger(TRUE));
    }
#line 23472 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 141:
#line 946 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("connectionlimit", (Node *)makeInteger((yyvsp[0].ival)));
    }
#line 23480 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 142:
#line 950 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("validUntil", (Node *)makeString((yyvsp[0].str)));
    }
#line 23488 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 143:
#line 955 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("rolemembers", (Node *)(yyvsp[0].list));
    }
#line 23496 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 144:
#line 959 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * We handle identifiers that aren't parser keywords with
       * the following special-case codes, to avoid bloating the
       * size of the main parser.
       */
      if (strcmp((yyvsp[0].str), "superuser") == 0)
        (yyval.defelt) = makeDefElem("superuser", (Node *)makeInteger(TRUE));
      else if (strcmp((yyvsp[0].str), "nosuperuser") == 0)
        (yyval.defelt) = makeDefElem("superuser", (Node *)makeInteger(FALSE));
      else if (strcmp((yyvsp[0].str), "createuser") == 0) {
        /* For backwards compatibility, synonym for SUPERUSER */
        (yyval.defelt) = makeDefElem("superuser", (Node *)makeInteger(TRUE));
      } else if (strcmp((yyvsp[0].str), "nocreateuser") == 0) {
        /* For backwards compatibility, synonym for SUPERUSER */
        (yyval.defelt) = makeDefElem("superuser", (Node *)makeInteger(FALSE));
      } else if (strcmp((yyvsp[0].str), "createrole") == 0)
        (yyval.defelt) = makeDefElem("createrole", (Node *)makeInteger(TRUE));
      else if (strcmp((yyvsp[0].str), "nocreaterole") == 0)
        (yyval.defelt) = makeDefElem("createrole", (Node *)makeInteger(FALSE));
      else if (strcmp((yyvsp[0].str), "replication") == 0)
        (yyval.defelt) =
            makeDefElem("isreplication", (Node *)makeInteger(TRUE));
      else if (strcmp((yyvsp[0].str), "noreplication") == 0)
        (yyval.defelt) =
            makeDefElem("isreplication", (Node *)makeInteger(FALSE));
      else if (strcmp((yyvsp[0].str), "createdb") == 0)
        (yyval.defelt) = makeDefElem("createdb", (Node *)makeInteger(TRUE));
      else if (strcmp((yyvsp[0].str), "nocreatedb") == 0)
        (yyval.defelt) = makeDefElem("createdb", (Node *)makeInteger(FALSE));
      else if (strcmp((yyvsp[0].str), "login") == 0)
        (yyval.defelt) = makeDefElem("canlogin", (Node *)makeInteger(TRUE));
      else if (strcmp((yyvsp[0].str), "nologin") == 0)
        (yyval.defelt) = makeDefElem("canlogin", (Node *)makeInteger(FALSE));
      else if (strcmp((yyvsp[0].str), "bypassrls") == 0)
        (yyval.defelt) = makeDefElem("bypassrls", (Node *)makeInteger(TRUE));
      else if (strcmp((yyvsp[0].str), "nobypassrls") == 0)
        (yyval.defelt) = makeDefElem("bypassrls", (Node *)makeInteger(FALSE));
      else if (strcmp((yyvsp[0].str), "noinherit") == 0) {
        /*
         * Note that INHERIT is a keyword, so it's handled by main parser, but
         * NOINHERIT is handled here.
         */
        (yyval.defelt) = makeDefElem("inherit", (Node *)makeInteger(FALSE));
      } else
        ereport(ERROR,
                (errcode(ERRCODE_SYNTAX_ERROR),
                 errmsg("unrecognized role option \"%s\"", (yyvsp[0].str)),
                 parser_errposition((yylsp[0]))));
    }
#line 23555 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 145:
#line 1016 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = (yyvsp[0].defelt);
    }
#line 23561 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 146:
#line 1019 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("sysid", (Node *)makeInteger((yyvsp[0].ival)));
    }
#line 23569 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 147:
#line 1023 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("adminmembers", (Node *)(yyvsp[0].list));
    }
#line 23577 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 148:
#line 1027 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("rolemembers", (Node *)(yyvsp[0].list));
    }
#line 23585 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 149:
#line 1031 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("addroleto", (Node *)(yyvsp[0].list));
    }
#line 23593 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 150:
#line 1035 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("addroleto", (Node *)(yyvsp[0].list));
    }
#line 23601 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 151:
#line 1049 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateRoleStmt *n = makeNode(CreateRoleStmt);
      n->stmt_type = ROLESTMT_USER;
      n->role = (yyvsp[-2].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23613 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 152:
#line 1067 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterRoleStmt *n = makeNode(AlterRoleStmt);
      n->role = (yyvsp[-2].node);
      n->action = +1; /* add, if there are members */
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23625 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 153:
#line 1077 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 23631 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 154:
#line 1078 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 23637 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 155:
#line 1083 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterRoleSetStmt *n = makeNode(AlterRoleSetStmt);
      n->role = (yyvsp[-2].node);
      n->database = (yyvsp[-1].str);
      n->setstmt = (yyvsp[0].vsetstmt);
      (yyval.node) = (Node *)n;
    }
#line 23649 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 156:
#line 1091 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterRoleSetStmt *n = makeNode(AlterRoleSetStmt);
      n->role = NULL;
      n->database = (yyvsp[-1].str);
      n->setstmt = (yyvsp[0].vsetstmt);
      (yyval.node) = (Node *)n;
    }
#line 23661 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 157:
#line 1109 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterRoleStmt *n = makeNode(AlterRoleStmt);
      n->role = (yyvsp[-2].node);
      n->action = +1; /* add, if there are members */
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23673 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 158:
#line 1121 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterRoleSetStmt *n = makeNode(AlterRoleSetStmt);
      n->role = (yyvsp[-1].node);
      n->database = NULL;
      n->setstmt = (yyvsp[0].vsetstmt);
      (yyval.node) = (Node *)n;
    }
#line 23685 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 159:
#line 1142 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropRoleStmt *n = makeNode(DropRoleStmt);
      n->missing_ok = FALSE;
      n->roles = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23696 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 160:
#line 1149 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropRoleStmt *n = makeNode(DropRoleStmt);
      n->missing_ok = TRUE;
      n->roles = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23707 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 161:
#line 1168 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropRoleStmt *n = makeNode(DropRoleStmt);
      n->missing_ok = FALSE;
      n->roles = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23718 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 162:
#line 1175 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropRoleStmt *n = makeNode(DropRoleStmt);
      n->roles = (yyvsp[0].list);
      n->missing_ok = TRUE;
      (yyval.node) = (Node *)n;
    }
#line 23729 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 163:
#line 1192 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateRoleStmt *n = makeNode(CreateRoleStmt);
      n->stmt_type = ROLESTMT_GROUP;
      n->role = (yyvsp[-2].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23741 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 164:
#line 1210 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterRoleStmt *n = makeNode(AlterRoleStmt);
      n->role = (yyvsp[-3].node);
      n->action = (yyvsp[-2].ival);
      n->options =
          list_make1(makeDefElem("rolemembers", (Node *)(yyvsp[0].list)));
      (yyval.node) = (Node *)n;
    }
#line 23754 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 165:
#line 1220 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = +1;
    }
#line 23760 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 166:
#line 1221 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = -1;
    }
#line 23766 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 167:
#line 1234 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropRoleStmt *n = makeNode(DropRoleStmt);
      n->missing_ok = FALSE;
      n->roles = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23777 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 168:
#line 1241 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropRoleStmt *n = makeNode(DropRoleStmt);
      n->missing_ok = TRUE;
      n->roles = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 23788 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 169:
#line 1258 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateSchemaStmt *n = makeNode(CreateSchemaStmt);
      /* One can omit the schema name or the authorization id. */
      n->schemaname = (yyvsp[-3].str);
      n->authrole = (yyvsp[-1].node);
      n->schemaElts = (yyvsp[0].list);
      n->if_not_exists = false;
      (yyval.node) = (Node *)n;
    }
#line 23802 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 170:
#line 1268 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateSchemaStmt *n = makeNode(CreateSchemaStmt);
      /* ...but not both */
      n->schemaname = (yyvsp[-1].str);
      n->authrole = NULL;
      n->schemaElts = (yyvsp[0].list);
      n->if_not_exists = false;
      (yyval.node) = (Node *)n;
    }
#line 23816 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 171:
#line 1278 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateSchemaStmt *n = makeNode(CreateSchemaStmt);
      /* schema name can be omitted here, too */
      n->schemaname = (yyvsp[-3].str);
      n->authrole = (yyvsp[-1].node);
      if ((yyvsp[0].list) != NIL)
        ereport(
            ERROR,
            (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
             errmsg(
                 "CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
             parser_errposition((yylsp[0]))));
      n->schemaElts = (yyvsp[0].list);
      n->if_not_exists = true;
      (yyval.node) = (Node *)n;
    }
#line 23835 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 172:
#line 1293 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateSchemaStmt *n = makeNode(CreateSchemaStmt);
      /* ...but not here */
      n->schemaname = (yyvsp[-1].str);
      n->authrole = NULL;
      if ((yyvsp[0].list) != NIL)
        ereport(
            ERROR,
            (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
             errmsg(
                 "CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
             parser_errposition((yylsp[0]))));
      n->schemaElts = (yyvsp[0].list);
      n->if_not_exists = true;
      (yyval.node) = (Node *)n;
    }
#line 23854 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 173:
#line 1310 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 23860 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 174:
#line 1311 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 23866 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 175:
#line 1316 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyloc) < 0) /* see comments for YYLLOC_DEFAULT */
        (yyloc) = (yylsp[0]);
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
    }
#line 23876 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 176:
#line 1322 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 23882 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 183:
#line 1350 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = (yyvsp[0].vsetstmt);
      n->is_local = false;
      (yyval.node) = (Node *)n;
    }
#line 23892 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 184:
#line 1356 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = (yyvsp[0].vsetstmt);
      n->is_local = true;
      (yyval.node) = (Node *)n;
    }
#line 23902 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 185:
#line 1362 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = (yyvsp[0].vsetstmt);
      n->is_local = false;
      (yyval.node) = (Node *)n;
    }
#line 23912 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 186:
#line 1371 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_MULTI;
      n->name = "TRANSACTION";
      n->args = (yyvsp[0].list);
      (yyval.vsetstmt) = n;
    }
#line 23924 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 187:
#line 1379 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_MULTI;
      n->name = "SESSION CHARACTERISTICS";
      n->args = (yyvsp[0].list);
      (yyval.vsetstmt) = n;
    }
#line 23936 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 189:
#line 1391 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_VALUE;
      n->name = (yyvsp[-2].str);
      n->args = (yyvsp[0].list);
      (yyval.vsetstmt) = n;
    }
#line 23948 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 190:
#line 1399 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_VALUE;
      n->name = (yyvsp[-2].str);
      n->args = (yyvsp[0].list);
      (yyval.vsetstmt) = n;
    }
#line 23960 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 191:
#line 1407 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_DEFAULT;
      n->name = (yyvsp[-2].str);
      (yyval.vsetstmt) = n;
    }
#line 23971 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 192:
#line 1414 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_DEFAULT;
      n->name = (yyvsp[-2].str);
      (yyval.vsetstmt) = n;
    }
#line 23982 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 193:
#line 1422 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.vsetstmt) = (yyvsp[0].vsetstmt);
    }
#line 23988 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 194:
#line 1424 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_CURRENT;
      n->name = (yyvsp[-2].str);
      (yyval.vsetstmt) = n;
    }
#line 23999 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 195:
#line 1432 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_VALUE;
      n->name = "timezone";
      if ((yyvsp[0].node) != NULL)
        n->args = list_make1((yyvsp[0].node));
      else
        n->kind = VAR_SET_DEFAULT;
      (yyval.vsetstmt) = n;
    }
#line 24014 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 196:
#line 1443 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ereport(ERROR, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                      errmsg("current database cannot be changed"),
                      parser_errposition((yylsp[0]))));
      (yyval.vsetstmt) = NULL; /*not reached*/
    }
#line 24026 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 197:
#line 1451 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_VALUE;
      n->name = "search_path";
      n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
      (yyval.vsetstmt) = n;
    }
#line 24038 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 198:
#line 1459 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_VALUE;
      n->name = "client_encoding";
      if ((yyvsp[0].str) != NULL)
        n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
      else
        n->kind = VAR_SET_DEFAULT;
      (yyval.vsetstmt) = n;
    }
#line 24053 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 199:
#line 1470 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_VALUE;
      n->name = "role";
      n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
      (yyval.vsetstmt) = n;
    }
#line 24065 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 200:
#line 1478 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_VALUE;
      n->name = "session_authorization";
      n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
      (yyval.vsetstmt) = n;
    }
#line 24077 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 201:
#line 1486 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_DEFAULT;
      n->name = "session_authorization";
      (yyval.vsetstmt) = n;
    }
#line 24088 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 202:
#line 1493 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_VALUE;
      n->name = "xmloption";
      n->args = list_make1(makeStringConst((yyvsp[0].ival) == XMLOPTION_DOCUMENT
                                               ? static_cast<char *>("DOCUMENT")
                                               : static_cast<char *>("CONTENT"),
                                           (yylsp[0])));
      (yyval.vsetstmt) = n;
    }
#line 24100 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 203:
#line 1502 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_SET_MULTI;
      n->name = "TRANSACTION SNAPSHOT";
      n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
      (yyval.vsetstmt) = n;
    }
#line 24112 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 204:
#line 1511 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 24118 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 205:
#line 1513 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str));
    }
#line 24124 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 206:
#line 1516 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 24130 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 207:
#line 1517 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 24136 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 208:
#line 1521 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
    }
#line 24142 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 209:
#line 1523 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0]));
    }
#line 24148 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 210:
#line 1526 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "read uncommitted";
    }
#line 24154 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 211:
#line 1527 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "read committed";
    }
#line 24160 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 212:
#line 1528 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "repeatable read";
    }
#line 24166 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 213:
#line 1529 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "serializable";
    }
#line 24172 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 214:
#line 1533 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "true";
    }
#line 24178 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 215:
#line 1534 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "false";
    }
#line 24184 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 216:
#line 1535 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "on";
    }
#line 24190 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 217:
#line 1541 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 24196 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 218:
#line 1554 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
    }
#line 24204 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 219:
#line 1558 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
    }
#line 24212 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 220:
#line 1562 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TypeName *t = (yyvsp[-2].typnam);
      if ((yyvsp[0].list) != NIL) {
        A_Const *n = (A_Const *)linitial((yyvsp[0].list));
        if ((n->val.val.ival &
             ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
          ereport(ERROR,
                  (errcode(ERRCODE_SYNTAX_ERROR),
                   errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
                   parser_errposition((yylsp[0]))));
      }
      t->typmods = (yyvsp[0].list);
      (yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
    }
#line 24231 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 221:
#line 1577 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TypeName *t = (yyvsp[-4].typnam);
      t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
                              makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
      (yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
    }
#line 24242 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 222:
#line 1583 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0]));
    }
#line 24248 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 223:
#line 1584 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 24254 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 224:
#line 1585 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 24260 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 225:
#line 1589 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 24266 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 226:
#line 1590 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 24272 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 227:
#line 1591 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 24278 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 228:
#line 1595 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 24284 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 229:
#line 1596 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 24290 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 230:
#line 1600 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[0].vsetstmt);
    }
#line 24296 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 231:
#line 1604 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.vsetstmt) = (yyvsp[0].vsetstmt);
    }
#line 24302 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 232:
#line 1606 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_RESET;
      n->name = "timezone";
      (yyval.vsetstmt) = n;
    }
#line 24313 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 233:
#line 1613 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_RESET;
      n->name = "transaction_isolation";
      (yyval.vsetstmt) = n;
    }
#line 24324 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 234:
#line 1620 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_RESET;
      n->name = "session_authorization";
      (yyval.vsetstmt) = n;
    }
#line 24335 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 235:
#line 1630 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_RESET;
      n->name = (yyvsp[0].str);
      (yyval.vsetstmt) = n;
    }
#line 24346 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 236:
#line 1637 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableSetStmt *n = makeNode(VariableSetStmt);
      n->kind = VAR_RESET_ALL;
      (yyval.vsetstmt) = n;
    }
#line 24356 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 237:
#line 1646 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.vsetstmt) = (yyvsp[0].vsetstmt);
    }
#line 24362 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 238:
#line 1647 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.vsetstmt) = (VariableSetStmt *)(yyvsp[0].node);
    }
#line 24368 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 239:
#line 1652 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.vsetstmt) = (yyvsp[0].vsetstmt);
    }
#line 24374 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 240:
#line 1653 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.vsetstmt) = (VariableSetStmt *)(yyvsp[0].node);
    }
#line 24380 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 241:
#line 1659 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableShowStmt *n = makeNode(VariableShowStmt);
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 24390 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 242:
#line 1665 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableShowStmt *n = makeNode(VariableShowStmt);
      n->name = "timezone";
      (yyval.node) = (Node *)n;
    }
#line 24400 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 243:
#line 1671 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableShowStmt *n = makeNode(VariableShowStmt);
      n->name = "transaction_isolation";
      (yyval.node) = (Node *)n;
    }
#line 24410 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 244:
#line 1677 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableShowStmt *n = makeNode(VariableShowStmt);
      n->name = "session_authorization";
      (yyval.node) = (Node *)n;
    }
#line 24420 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 245:
#line 1683 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VariableShowStmt *n = makeNode(VariableShowStmt);
      n->name = "all";
      (yyval.node) = (Node *)n;
    }
#line 24430 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 246:
#line 1693 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ConstraintsSetStmt *n = makeNode(ConstraintsSetStmt);
      n->constraints = (yyvsp[-1].list);
      n->deferred = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 24441 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 247:
#line 1702 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 24447 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 248:
#line 1703 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 24453 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 249:
#line 1707 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 24459 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 250:
#line 1708 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 24465 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 251:
#line 1717 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CheckPointStmt *n = makeNode(CheckPointStmt);
      (yyval.node) = (Node *)n;
    }
#line 24474 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 252:
#line 1732 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DiscardStmt *n = makeNode(DiscardStmt);
      n->target = DISCARD_ALL;
      (yyval.node) = (Node *)n;
    }
#line 24484 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 253:
#line 1738 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DiscardStmt *n = makeNode(DiscardStmt);
      n->target = DISCARD_TEMP;
      (yyval.node) = (Node *)n;
    }
#line 24494 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 254:
#line 1744 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DiscardStmt *n = makeNode(DiscardStmt);
      n->target = DISCARD_TEMP;
      (yyval.node) = (Node *)n;
    }
#line 24504 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 255:
#line 1750 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DiscardStmt *n = makeNode(DiscardStmt);
      n->target = DISCARD_PLANS;
      (yyval.node) = (Node *)n;
    }
#line 24514 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 256:
#line 1756 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DiscardStmt *n = makeNode(DiscardStmt);
      n->target = DISCARD_SEQUENCES;
      (yyval.node) = (Node *)n;
    }
#line 24524 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 257:
#line 1775 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_TABLE;
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 24537 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 258:
#line 1784 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_TABLE;
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 24550 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 259:
#line 1793 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableMoveAllStmt *n = makeNode(AlterTableMoveAllStmt);
      n->orig_tablespacename = (yyvsp[-4].str);
      n->objtype = OBJECT_TABLE;
      n->roles = NIL;
      n->new_tablespacename = (yyvsp[-1].str);
      n->nowait = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 24565 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 260:
#line 1804 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableMoveAllStmt *n = makeNode(AlterTableMoveAllStmt);
      n->orig_tablespacename = (yyvsp[-7].str);
      n->objtype = OBJECT_TABLE;
      n->roles = (yyvsp[-4].list);
      n->new_tablespacename = (yyvsp[-1].str);
      n->nowait = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 24580 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 261:
#line 1815 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_INDEX;
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 24593 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 262:
#line 1824 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_INDEX;
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 24606 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 263:
#line 1833 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableMoveAllStmt *n = makeNode(AlterTableMoveAllStmt);
      n->orig_tablespacename = (yyvsp[-4].str);
      n->objtype = OBJECT_INDEX;
      n->roles = NIL;
      n->new_tablespacename = (yyvsp[-1].str);
      n->nowait = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 24621 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 264:
#line 1844 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableMoveAllStmt *n = makeNode(AlterTableMoveAllStmt);
      n->orig_tablespacename = (yyvsp[-7].str);
      n->objtype = OBJECT_INDEX;
      n->roles = (yyvsp[-4].list);
      n->new_tablespacename = (yyvsp[-1].str);
      n->nowait = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 24636 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 265:
#line 1855 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_SEQUENCE;
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 24649 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 266:
#line 1864 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_SEQUENCE;
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 24662 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 267:
#line 1873 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_VIEW;
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 24675 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 268:
#line 1882 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_VIEW;
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 24688 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 269:
#line 1891 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_MATVIEW;
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 24701 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 270:
#line 1900 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_MATVIEW;
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 24714 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 271:
#line 1909 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableMoveAllStmt *n = makeNode(AlterTableMoveAllStmt);
      n->orig_tablespacename = (yyvsp[-4].str);
      n->objtype = OBJECT_MATVIEW;
      n->roles = NIL;
      n->new_tablespacename = (yyvsp[-1].str);
      n->nowait = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 24729 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 272:
#line 1920 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableMoveAllStmt *n = makeNode(AlterTableMoveAllStmt);
      n->orig_tablespacename = (yyvsp[-7].str);
      n->objtype = OBJECT_MATVIEW;
      n->roles = (yyvsp[-4].list);
      n->new_tablespacename = (yyvsp[-1].str);
      n->nowait = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 24744 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 273:
#line 1933 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 24750 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 274:
#line 1934 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 24756 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 275:
#line 1940 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_AddColumn;
      n->def = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 24767 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 276:
#line 1948 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_AddColumn;
      n->def = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 24778 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 277:
#line 1956 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_ColumnDefault;
      n->name = (yyvsp[-1].str);
      n->def = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 24790 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 278:
#line 1965 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropNotNull;
      n->name = (yyvsp[-3].str);
      (yyval.node) = (Node *)n;
    }
#line 24801 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 279:
#line 1973 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_SetNotNull;
      n->name = (yyvsp[-3].str);
      (yyval.node) = (Node *)n;
    }
#line 24812 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 280:
#line 1981 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_SetStatistics;
      n->name = (yyvsp[-3].str);
      n->def = (Node *)makeInteger((yyvsp[0].ival));
      (yyval.node) = (Node *)n;
    }
#line 24824 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 281:
#line 1990 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_SetOptions;
      n->name = (yyvsp[-2].str);
      n->def = (Node *)(yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 24836 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 282:
#line 1999 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_ResetOptions;
      n->name = (yyvsp[-2].str);
      n->def = (Node *)(yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 24848 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 283:
#line 2008 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_SetStorage;
      n->name = (yyvsp[-3].str);
      n->def = (Node *)makeString((yyvsp[0].str));
      (yyval.node) = (Node *)n;
    }
#line 24860 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 284:
#line 2017 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropColumn;
      n->name = (yyvsp[-1].str);
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = TRUE;
      (yyval.node) = (Node *)n;
    }
#line 24873 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 285:
#line 2027 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropColumn;
      n->name = (yyvsp[-1].str);
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = FALSE;
      (yyval.node) = (Node *)n;
    }
#line 24886 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 286:
#line 2040 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      ColumnDef *def = makeNode(ColumnDef);
      n->subtype = AT_AlterColumnType;
      n->name = (yyvsp[-5].str);
      n->def = (Node *)def;
      /* We only use these fields of the ColumnDef node */
      def->typeName = (yyvsp[-2].typnam);
      def->collClause = (CollateClause *)(yyvsp[-1].node);
      def->raw_default = (yyvsp[0].node);
      def->location = (yylsp[-5]);
      (yyval.node) = (Node *)n;
    }
#line 24904 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 287:
#line 2055 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_AlterColumnGenericOptions;
      n->name = (yyvsp[-1].str);
      n->def = (Node *)(yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 24916 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 288:
#line 2064 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_AddConstraint;
      n->def = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 24927 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 289:
#line 2072 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      Constraint *c = makeNode(Constraint);
      n->subtype = AT_AlterConstraint;
      n->def = (Node *)c;
      c->contype = CONSTR_FOREIGN; /* others not supported, yet */
      c->conname = (yyvsp[-1].str);
      processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
                     &c->deferrable, &c->initdeferred, NULL, NULL, yyscanner);
      (yyval.node) = (Node *)n;
    }
#line 24945 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 290:
#line 2087 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_ValidateConstraint;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 24956 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 291:
#line 2095 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropConstraint;
      n->name = (yyvsp[-1].str);
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = TRUE;
      (yyval.node) = (Node *)n;
    }
#line 24969 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 292:
#line 2105 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropConstraint;
      n->name = (yyvsp[-1].str);
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = FALSE;
      (yyval.node) = (Node *)n;
    }
#line 24982 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 293:
#line 2115 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_AddOids;
      (yyval.node) = (Node *)n;
    }
#line 24992 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 294:
#line 2122 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropOids;
      (yyval.node) = (Node *)n;
    }
#line 25002 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 295:
#line 2129 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_ClusterOn;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25013 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 296:
#line 2137 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropCluster;
      n->name = NULL;
      (yyval.node) = (Node *)n;
    }
#line 25024 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 297:
#line 2145 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_SetLogged;
      (yyval.node) = (Node *)n;
    }
#line 25034 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 298:
#line 2152 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_SetUnLogged;
      (yyval.node) = (Node *)n;
    }
#line 25044 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 299:
#line 2159 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_EnableTrig;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25055 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 300:
#line 2167 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_EnableAlwaysTrig;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25066 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 301:
#line 2175 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_EnableReplicaTrig;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25077 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 302:
#line 2183 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_EnableTrigAll;
      (yyval.node) = (Node *)n;
    }
#line 25087 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 303:
#line 2190 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_EnableTrigUser;
      (yyval.node) = (Node *)n;
    }
#line 25097 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 304:
#line 2197 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DisableTrig;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25108 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 305:
#line 2205 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DisableTrigAll;
      (yyval.node) = (Node *)n;
    }
#line 25118 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 306:
#line 2212 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DisableTrigUser;
      (yyval.node) = (Node *)n;
    }
#line 25128 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 307:
#line 2219 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_EnableRule;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25139 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 308:
#line 2227 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_EnableAlwaysRule;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25150 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 309:
#line 2235 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_EnableReplicaRule;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25161 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 310:
#line 2243 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DisableRule;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25172 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 311:
#line 2251 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_AddInherit;
      n->def = (Node *)(yyvsp[0].range);
      (yyval.node) = (Node *)n;
    }
#line 25183 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 312:
#line 2259 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropInherit;
      n->def = (Node *)(yyvsp[0].range);
      (yyval.node) = (Node *)n;
    }
#line 25194 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 313:
#line 2267 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      TypeName *def = makeTypeNameFromNameList((yyvsp[0].list));
      def->location = (yylsp[0]);
      n->subtype = AT_AddOf;
      n->def = (Node *)def;
      (yyval.node) = (Node *)n;
    }
#line 25207 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 314:
#line 2277 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropOf;
      (yyval.node) = (Node *)n;
    }
#line 25217 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 315:
#line 2284 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_ChangeOwner;
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 25228 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 316:
#line 2292 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_SetTableSpace;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25239 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 317:
#line 2300 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_SetRelOptions;
      n->def = (Node *)(yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 25250 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 318:
#line 2308 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_ResetRelOptions;
      n->def = (Node *)(yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 25261 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 319:
#line 2316 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_ReplicaIdentity;
      n->def = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 25272 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 320:
#line 2324 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_EnableRowSecurity;
      (yyval.node) = (Node *)n;
    }
#line 25282 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 321:
#line 2331 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DisableRowSecurity;
      (yyval.node) = (Node *)n;
    }
#line 25292 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 322:
#line 2337 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_GenericOptions;
      n->def = (Node *)(yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 25303 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 323:
#line 2346 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 25309 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 324:
#line 2347 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 25315 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 325:
#line 2351 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.dbehavior) = DROP_CASCADE;
    }
#line 25321 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 326:
#line 2352 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.dbehavior) = DROP_RESTRICT;
    }
#line 25327 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 327:
#line 2353 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.dbehavior) = DROP_RESTRICT; /* default */
    }
#line 25333 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 328:
#line 2358 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CollateClause *n = makeNode(CollateClause);
      n->arg = NULL;
      n->collname = (yyvsp[0].list);
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 25345 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 329:
#line 2365 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 25351 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 330:
#line 2369 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 25357 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 331:
#line 2370 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 25363 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 332:
#line 2375 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ReplicaIdentityStmt *n = makeNode(ReplicaIdentityStmt);
      n->identity_type = REPLICA_IDENTITY_NOTHING;
      n->name = NULL;
      (yyval.node) = (Node *)n;
    }
#line 25374 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 333:
#line 2382 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ReplicaIdentityStmt *n = makeNode(ReplicaIdentityStmt);
      n->identity_type = REPLICA_IDENTITY_FULL;
      n->name = NULL;
      (yyval.node) = (Node *)n;
    }
#line 25385 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 334:
#line 2389 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ReplicaIdentityStmt *n = makeNode(ReplicaIdentityStmt);
      n->identity_type = REPLICA_IDENTITY_DEFAULT;
      n->name = NULL;
      (yyval.node) = (Node *)n;
    }
#line 25396 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 335:
#line 2396 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ReplicaIdentityStmt *n = makeNode(ReplicaIdentityStmt);
      n->identity_type = REPLICA_IDENTITY_INDEX;
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25407 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 336:
#line 2405 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 25413 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 337:
#line 2408 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 25419 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 338:
#line 2409 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 25425 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 339:
#line 2413 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 25431 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 340:
#line 2414 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
    }
#line 25437 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 341:
#line 2420 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[-2].str), (Node *)(yyvsp[0].node));
    }
#line 25445 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 342:
#line 2424 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[0].str), NULL);
    }
#line 25453 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 343:
#line 2428 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str),
                              (Node *)(yyvsp[0].node), DEFELEM_UNSPEC);
    }
#line 25462 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 344:
#line 2433 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str),
                                           NULL, DEFELEM_UNSPEC);
    }
#line 25470 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 345:
#line 2448 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);

      /* can't use qualified_name, sigh */
      n->relation =
          makeRangeVarFromAnyName((yyvsp[-1].list), (yylsp[-1]), yyscanner);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_TYPE;
      (yyval.node) = (Node *)n;
    }
#line 25484 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 346:
#line 2460 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 25490 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 347:
#line 2461 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 25496 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 348:
#line 2467 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_AddColumn;
      n->def = (yyvsp[-1].node);
      n->behavior = (yyvsp[0].dbehavior);
      (yyval.node) = (Node *)n;
    }
#line 25508 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 349:
#line 2476 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropColumn;
      n->name = (yyvsp[-1].str);
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = TRUE;
      (yyval.node) = (Node *)n;
    }
#line 25521 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 350:
#line 2486 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      n->subtype = AT_DropColumn;
      n->name = (yyvsp[-1].str);
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = FALSE;
      (yyval.node) = (Node *)n;
    }
#line 25534 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 351:
#line 2496 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableCmd *n = makeNode(AlterTableCmd);
      ColumnDef *def = makeNode(ColumnDef);
      n->subtype = AT_AlterColumnType;
      n->name = (yyvsp[-5].str);
      n->def = (Node *)def;
      n->behavior = (yyvsp[0].dbehavior);
      /* We only use these fields of the ColumnDef node */
      def->typeName = (yyvsp[-2].typnam);
      def->collClause = (CollateClause *)(yyvsp[-1].node);
      def->raw_default = NULL;
      def->location = (yylsp[-5]);
      (yyval.node) = (Node *)n;
    }
#line 25553 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 352:
#line 2522 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ClosePortalStmt *n = makeNode(ClosePortalStmt);
      n->portalname = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 25563 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 353:
#line 2528 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ClosePortalStmt *n = makeNode(ClosePortalStmt);
      n->portalname = NULL;
      (yyval.node) = (Node *)n;
    }
#line 25573 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 354:
#line 2559 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CopyStmt *n = makeNode(CopyStmt);
      n->relation = (yyvsp[-8].range);
      n->query = NULL;
      n->attlist = (yyvsp[-7].list);
      n->is_from = (yyvsp[-5].boolean);
      n->is_program = (yyvsp[-4].boolean);
      n->filename = (yyvsp[-3].str);

      if (n->is_program && n->filename == NULL)
        ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("STDIN/STDOUT not allowed with PROGRAM"),
                        parser_errposition((yylsp[-3]))));

      n->options = NIL;
      /* Concatenate user-supplied flags */
      if ((yyvsp[-9].defelt))
        n->options = lappend(n->options, (yyvsp[-9].defelt));
      if ((yyvsp[-6].defelt))
        n->options = lappend(n->options, (yyvsp[-6].defelt));
      if ((yyvsp[-2].defelt))
        n->options = lappend(n->options, (yyvsp[-2].defelt));
      if ((yyvsp[0].list))
        n->options = list_concat(n->options, (yyvsp[0].list));
      (yyval.node) = (Node *)n;
    }
#line 25605 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 355:
#line 2587 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CopyStmt *n = makeNode(CopyStmt);
      n->relation = NULL;
      n->query = (yyvsp[-5].node);
      n->attlist = NIL;
      n->is_from = false;
      n->is_program = (yyvsp[-3].boolean);
      n->filename = (yyvsp[-2].str);
      n->options = (yyvsp[0].list);

      if (n->is_program && n->filename == NULL)
        ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("STDIN/STDOUT not allowed with PROGRAM"),
                        parser_errposition((yylsp[-2]))));

      (yyval.node) = (Node *)n;
    }
#line 25628 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 356:
#line 2608 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 25634 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 357:
#line 2609 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 25640 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 358:
#line 2613 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 25646 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 359:
#line 2614 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 25652 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 360:
#line 2623 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 25658 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 361:
#line 2624 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 25664 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 362:
#line 2625 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 25670 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 363:
#line 2628 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 25676 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 364:
#line 2629 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 25682 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 365:
#line 2634 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 25688 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 366:
#line 2635 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 25694 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 367:
#line 2640 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("format", (Node *)makeString("binary"));
    }
#line 25702 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 368:
#line 2644 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("oids", (Node *)makeInteger(TRUE));
    }
#line 25710 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 369:
#line 2648 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("freeze", (Node *)makeInteger(TRUE));
    }
#line 25718 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 370:
#line 2652 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("delimiter", (Node *)makeString((yyvsp[0].str)));
    }
#line 25726 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 371:
#line 2656 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("null", (Node *)makeString((yyvsp[0].str)));
    }
#line 25734 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 372:
#line 2660 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("format", (Node *)makeString("csv"));
    }
#line 25742 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 373:
#line 2664 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("header", (Node *)makeInteger(TRUE));
    }
#line 25750 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 374:
#line 2668 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("quote", (Node *)makeString((yyvsp[0].str)));
    }
#line 25758 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 375:
#line 2672 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("escape", (Node *)makeString((yyvsp[0].str)));
    }
#line 25766 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 376:
#line 2676 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("force_quote", (Node *)(yyvsp[0].list));
    }
#line 25774 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 377:
#line 2680 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("force_quote", (Node *)makeNode(A_Star));
    }
#line 25782 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 378:
#line 2684 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("force_not_null", (Node *)(yyvsp[0].list));
    }
#line 25790 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 379:
#line 2688 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("force_null", (Node *)(yyvsp[0].list));
    }
#line 25798 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 380:
#line 2692 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("encoding", (Node *)makeString((yyvsp[0].str)));
    }
#line 25806 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 381:
#line 2701 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("format", (Node *)makeString("binary"));
    }
#line 25814 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 382:
#line 2704 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = NULL;
    }
#line 25820 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 383:
#line 2709 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("oids", (Node *)makeInteger(TRUE));
    }
#line 25828 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 384:
#line 2712 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = NULL;
    }
#line 25834 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 385:
#line 2717 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("delimiter", (Node *)makeString((yyvsp[0].str)));
    }
#line 25842 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 386:
#line 2720 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = NULL;
    }
#line 25848 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 387:
#line 2724 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 25854 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 388:
#line 2725 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 25860 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 389:
#line 2731 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 25868 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 390:
#line 2735 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
    }
#line 25876 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 391:
#line 2742 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node));
    }
#line 25884 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 392:
#line 2748 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeString((yyvsp[0].str));
    }
#line 25890 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 393:
#line 2749 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[0].value);
    }
#line 25896 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 394:
#line 2750 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeNode(A_Star);
    }
#line 25902 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 395:
#line 2751 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[-1].list);
    }
#line 25908 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 396:
#line 2752 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 25914 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 397:
#line 2757 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 25922 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 398:
#line 2761 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 25930 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 399:
#line 2768 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeString((yyvsp[0].str));
    }
#line 25936 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 400:
#line 2781 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateStmt *n = makeNode(CreateStmt);
      (yyvsp[-7].range)->relpersistence = (yyvsp[-9].ival);
      n->relation = (yyvsp[-7].range);
      n->tableElts = (yyvsp[-5].list);
      n->inhRelations = (yyvsp[-3].list);
      n->ofTypename = NULL;
      n->constraints = NIL;
      n->options = (yyvsp[-2].list);
      n->oncommit = (yyvsp[-1].oncommit);
      n->tablespacename = (yyvsp[0].str);
      n->if_not_exists = false;
      (yyval.node) = (Node *)n;
    }
#line 25955 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 401:
#line 2798 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateStmt *n = makeNode(CreateStmt);
      (yyvsp[-7].range)->relpersistence = (yyvsp[-12].ival);
      n->relation = (yyvsp[-7].range);
      n->tableElts = (yyvsp[-5].list);
      n->inhRelations = (yyvsp[-3].list);
      n->ofTypename = NULL;
      n->constraints = NIL;
      n->options = (yyvsp[-2].list);
      n->oncommit = (yyvsp[-1].oncommit);
      n->tablespacename = (yyvsp[0].str);
      n->if_not_exists = true;
      (yyval.node) = (Node *)n;
    }
#line 25974 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 402:
#line 2814 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateStmt *n = makeNode(CreateStmt);
      (yyvsp[-6].range)->relpersistence = (yyvsp[-8].ival);
      n->relation = (yyvsp[-6].range);
      n->tableElts = (yyvsp[-3].list);
      n->inhRelations = NIL;
      n->ofTypename = makeTypeNameFromNameList((yyvsp[-4].list));
      n->ofTypename->location = (yylsp[-4]);
      n->constraints = NIL;
      n->options = (yyvsp[-2].list);
      n->oncommit = (yyvsp[-1].oncommit);
      n->tablespacename = (yyvsp[0].str);
      n->if_not_exists = false;
      (yyval.node) = (Node *)n;
    }
#line 25994 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 403:
#line 2831 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateStmt *n = makeNode(CreateStmt);
      (yyvsp[-6].range)->relpersistence = (yyvsp[-11].ival);
      n->relation = (yyvsp[-6].range);
      n->tableElts = (yyvsp[-3].list);
      n->inhRelations = NIL;
      n->ofTypename = makeTypeNameFromNameList((yyvsp[-4].list));
      n->ofTypename->location = (yylsp[-4]);
      n->constraints = NIL;
      n->options = (yyvsp[-2].list);
      n->oncommit = (yyvsp[-1].oncommit);
      n->tablespacename = (yyvsp[0].str);
      n->if_not_exists = true;
      (yyval.node) = (Node *)n;
    }
#line 26014 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 404:
#line 2859 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RELPERSISTENCE_TEMP;
    }
#line 26020 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 405:
#line 2860 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RELPERSISTENCE_TEMP;
    }
#line 26026 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 406:
#line 2861 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RELPERSISTENCE_TEMP;
    }
#line 26032 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 407:
#line 2862 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RELPERSISTENCE_TEMP;
    }
#line 26038 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 408:
#line 2864 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ereport(WARNING,
              (errmsg("GLOBAL is deprecated in temporary table creation"),
               parser_errposition((yylsp[-1]))));
      (yyval.ival) = RELPERSISTENCE_TEMP;
    }
#line 26049 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 409:
#line 2871 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ereport(WARNING,
              (errmsg("GLOBAL is deprecated in temporary table creation"),
               parser_errposition((yylsp[-1]))));
      (yyval.ival) = RELPERSISTENCE_TEMP;
    }
#line 26060 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 410:
#line 2877 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RELPERSISTENCE_UNLOGGED;
    }
#line 26066 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 411:
#line 2878 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RELPERSISTENCE_PERMANENT;
    }
#line 26072 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 412:
#line 2882 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 26078 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 413:
#line 2883 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 26084 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 414:
#line 2887 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 26090 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 415:
#line 2888 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 26096 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 416:
#line 2893 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 26104 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 417:
#line 2897 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 26112 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 418:
#line 2904 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 26120 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 419:
#line 2908 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 26128 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 420:
#line 2914 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 26134 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 421:
#line 2915 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 26140 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 422:
#line 2916 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 26146 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 423:
#line 2920 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 26152 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 424:
#line 2921 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 26158 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 425:
#line 2925 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ColumnDef *n = makeNode(ColumnDef);
      n->colname = (yyvsp[-3].str);
      n->typeName = (yyvsp[-2].typnam);
      n->inhcount = 0;
      n->is_local = true;
      n->is_not_null = false;
      n->is_from_type = false;
      n->storage = 0;
      n->raw_default = NULL;
      n->cooked_default = NULL;
      n->collOid = InvalidOid;
      n->fdwoptions = (yyvsp[-1].list);
      SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
                       yyscanner);
      n->location = (yylsp[-3]);
      (yyval.node) = (Node *)n;
    }
#line 26181 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 426:
#line 2946 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ColumnDef *n = makeNode(ColumnDef);
      n->colname = (yyvsp[-3].str);
      n->typeName = NULL;
      n->inhcount = 0;
      n->is_local = true;
      n->is_not_null = false;
      n->is_from_type = false;
      n->storage = 0;
      n->raw_default = NULL;
      n->cooked_default = NULL;
      n->collOid = InvalidOid;
      SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
                       yyscanner);
      n->location = (yylsp[-3]);
      (yyval.node) = (Node *)n;
    }
#line 26203 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 427:
#line 2966 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
    }
#line 26209 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 428:
#line 2967 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 26215 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 429:
#line 2972 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = (Constraint *)(yyvsp[0].node);
      Assert(IsA(n, Constraint));
      n->conname = (yyvsp[-1].str);
      n->location = (yylsp[-2]);
      (yyval.node) = (Node *)n;
    }
#line 26227 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 430:
#line 2979 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 26233 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 431:
#line 2980 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 26239 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 432:
#line 2982 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Note: the CollateClause is momentarily included in
       * the list built by ColQualList, but we split it out
       * again in SplitColQualList.
       */
      CollateClause *n = makeNode(CollateClause);
      n->arg = NULL;
      n->collname = (yyvsp[0].list);
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 26256 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 433:
#line 3013 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_NOTNULL;
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 26267 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 434:
#line 3020 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_NULL;
      n->location = (yylsp[0]);
      (yyval.node) = (Node *)n;
    }
#line 26278 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 435:
#line 3027 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_UNIQUE;
      n->location = (yylsp[-2]);
      n->keys = NULL;
      n->options = (yyvsp[-1].list);
      n->indexname = NULL;
      n->indexspace = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 26293 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 436:
#line 3038 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_PRIMARY;
      n->location = (yylsp[-3]);
      n->keys = NULL;
      n->options = (yyvsp[-1].list);
      n->indexname = NULL;
      n->indexspace = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 26308 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 437:
#line 3049 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_CHECK;
      n->location = (yylsp[-4]);
      n->is_no_inherit = (yyvsp[0].boolean);
      n->raw_expr = (yyvsp[-2].node);
      n->cooked_expr = NULL;
      (yyval.node) = (Node *)n;
    }
#line 26322 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 438:
#line 3059 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_DEFAULT;
      n->location = (yylsp[-1]);
      n->raw_expr = (yyvsp[0].node);
      n->cooked_expr = NULL;
      (yyval.node) = (Node *)n;
    }
#line 26335 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 439:
#line 3068 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_FOREIGN;
      n->location = (yylsp[-4]);
      n->pktable = (yyvsp[-3].range);
      n->fk_attrs = NIL;
      n->pk_attrs = (yyvsp[-2].list);
      n->fk_matchtype = (yyvsp[-1].ival);
      n->fk_upd_action = (char)((yyvsp[0].ival) >> 8);
      n->fk_del_action = (char)((yyvsp[0].ival) & 0xFF);
      n->skip_validation = false;
      n->initially_valid = true;
      (yyval.node) = (Node *)n;
    }
#line 26354 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 440:
#line 3101 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_ATTR_DEFERRABLE;
      n->location = (yylsp[0]);
      (yyval.node) = (Node *)n;
    }
#line 26365 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 441:
#line 3108 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_ATTR_NOT_DEFERRABLE;
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 26376 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 442:
#line 3115 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_ATTR_DEFERRED;
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 26387 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 443:
#line 3122 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_ATTR_IMMEDIATE;
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 26398 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 444:
#line 3133 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TableLikeClause *n = makeNode(TableLikeClause);
      n->relation = (yyvsp[-1].range);
      n->options = (yyvsp[0].ival);
      (yyval.node) = (Node *)n;
    }
#line 26409 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 445:
#line 3142 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival);
    }
#line 26415 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 446:
#line 3143 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival);
    }
#line 26421 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 447:
#line 3144 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 26427 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 448:
#line 3148 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CREATE_TABLE_LIKE_DEFAULTS;
    }
#line 26433 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 449:
#line 3149 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CREATE_TABLE_LIKE_CONSTRAINTS;
    }
#line 26439 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 450:
#line 3150 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CREATE_TABLE_LIKE_INDEXES;
    }
#line 26445 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 451:
#line 3151 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CREATE_TABLE_LIKE_STORAGE;
    }
#line 26451 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 452:
#line 3152 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CREATE_TABLE_LIKE_COMMENTS;
    }
#line 26457 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 453:
#line 3153 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CREATE_TABLE_LIKE_ALL;
    }
#line 26463 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 454:
#line 3163 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = (Constraint *)(yyvsp[0].node);
      Assert(IsA(n, Constraint));
      n->conname = (yyvsp[-1].str);
      n->location = (yylsp[-2]);
      (yyval.node) = (Node *)n;
    }
#line 26475 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 455:
#line 3170 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 26481 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 456:
#line 3175 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_CHECK;
      n->location = (yylsp[-4]);
      n->raw_expr = (yyvsp[-2].node);
      n->cooked_expr = NULL;
      processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK", NULL, NULL,
                     &n->skip_validation, &n->is_no_inherit, yyscanner);
      n->initially_valid = !n->skip_validation;
      (yyval.node) = (Node *)n;
    }
#line 26498 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 457:
#line 3189 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_UNIQUE;
      n->location = (yylsp[-6]);
      n->keys = (yyvsp[-4].list);
      n->options = (yyvsp[-2].list);
      n->indexname = NULL;
      n->indexspace = (yyvsp[-1].str);
      processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE", &n->deferrable,
                     &n->initdeferred, NULL, NULL, yyscanner);
      (yyval.node) = (Node *)n;
    }
#line 26516 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 458:
#line 3203 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_UNIQUE;
      n->location = (yylsp[-2]);
      n->keys = NIL;
      n->options = NIL;
      n->indexname = (yyvsp[-1].str);
      n->indexspace = NULL;
      processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE", &n->deferrable,
                     &n->initdeferred, NULL, NULL, yyscanner);
      (yyval.node) = (Node *)n;
    }
#line 26534 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 459:
#line 3218 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_PRIMARY;
      n->location = (yylsp[-7]);
      n->keys = (yyvsp[-4].list);
      n->options = (yyvsp[-2].list);
      n->indexname = NULL;
      n->indexspace = (yyvsp[-1].str);
      processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY", &n->deferrable,
                     &n->initdeferred, NULL, NULL, yyscanner);
      (yyval.node) = (Node *)n;
    }
#line 26552 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 460:
#line 3232 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_PRIMARY;
      n->location = (yylsp[-3]);
      n->keys = NIL;
      n->options = NIL;
      n->indexname = (yyvsp[-1].str);
      n->indexspace = NULL;
      processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY", &n->deferrable,
                     &n->initdeferred, NULL, NULL, yyscanner);
      (yyval.node) = (Node *)n;
    }
#line 26570 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 461:
#line 3248 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_EXCLUSION;
      n->location = (yylsp[-8]);
      n->access_method = (yyvsp[-7].str);
      n->exclusions = (yyvsp[-5].list);
      n->options = (yyvsp[-3].list);
      n->indexname = NULL;
      n->indexspace = (yyvsp[-2].str);
      n->where_clause = (yyvsp[-1].node);
      processCASbits((yyvsp[0].ival), (yylsp[0]), "EXCLUDE", &n->deferrable,
                     &n->initdeferred, NULL, NULL, yyscanner);
      (yyval.node) = (Node *)n;
    }
#line 26590 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 462:
#line 3265 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Constraint *n = makeNode(Constraint);
      n->contype = CONSTR_FOREIGN;
      n->location = (yylsp[-10]);
      n->pktable = (yyvsp[-4].range);
      n->fk_attrs = (yyvsp[-7].list);
      n->pk_attrs = (yyvsp[-3].list);
      n->fk_matchtype = (yyvsp[-2].ival);
      n->fk_upd_action = (char)((yyvsp[-1].ival) >> 8);
      n->fk_del_action = (char)((yyvsp[-1].ival) & 0xFF);
      processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY", &n->deferrable,
                     &n->initdeferred, &n->skip_validation, NULL, yyscanner);
      n->initially_valid = !n->skip_validation;
      (yyval.node) = (Node *)n;
    }
#line 26612 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 463:
#line 3284 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 26618 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 464:
#line 3285 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 26624 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 465:
#line 3289 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 26630 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 466:
#line 3290 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 26636 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 467:
#line 3294 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 26642 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 468:
#line 3295 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 26648 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 469:
#line 3299 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeString((yyvsp[0].str));
    }
#line 26656 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 470:
#line 3305 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FKCONSTR_MATCH_FULL;
    }
#line 26664 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 471:
#line 3309 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ereport(ERROR, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                      errmsg("MATCH PARTIAL not yet implemented"),
                      parser_errposition((yylsp[-1]))));
      (yyval.ival) = FKCONSTR_MATCH_PARTIAL;
    }
#line 26676 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 472:
#line 3317 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FKCONSTR_MATCH_SIMPLE;
    }
#line 26684 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 473:
#line 3321 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FKCONSTR_MATCH_SIMPLE;
    }
#line 26692 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 474:
#line 3327 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].list));
    }
#line 26698 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 475:
#line 3329 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list));
    }
#line 26704 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 476:
#line 3333 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[-2].ielem), (yyvsp[0].list));
    }
#line 26712 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 477:
#line 3338 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[-5].ielem), (yyvsp[-1].list));
    }
#line 26720 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 478:
#line 3344 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].node);
    }
#line 26726 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 479:
#line 3345 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 26732 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 480:
#line 3356 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ((yyvsp[0].ival) << 8) | (FKCONSTR_ACTION_NOACTION & 0xFF);
    }
#line 26738 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 481:
#line 3358 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF);
    }
#line 26744 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 482:
#line 3360 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF);
    }
#line 26750 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 483:
#line 3362 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF);
    }
#line 26756 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 484:
#line 3364 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) =
          (FKCONSTR_ACTION_NOACTION << 8) | (FKCONSTR_ACTION_NOACTION & 0xFF);
    }
#line 26762 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 485:
#line 3367 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[0].ival);
    }
#line 26768 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 486:
#line 3370 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[0].ival);
    }
#line 26774 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 487:
#line 3374 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FKCONSTR_ACTION_NOACTION;
    }
#line 26780 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 488:
#line 3375 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FKCONSTR_ACTION_RESTRICT;
    }
#line 26786 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 489:
#line 3376 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FKCONSTR_ACTION_CASCADE;
    }
#line 26792 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 490:
#line 3377 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FKCONSTR_ACTION_SETNULL;
    }
#line 26798 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 491:
#line 3378 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FKCONSTR_ACTION_SETDEFAULT;
    }
#line 26804 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 492:
#line 3381 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 26810 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 493:
#line 3382 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 26816 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 494:
#line 3387 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 26822 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 495:
#line 3388 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(defWithOids(true));
    }
#line 26828 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 496:
#line 3389 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(defWithOids(false));
    }
#line 26834 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 497:
#line 3390 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 26840 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 498:
#line 3393 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.oncommit) = ONCOMMIT_DROP;
    }
#line 26846 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 499:
#line 3394 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.oncommit) = ONCOMMIT_DELETE_ROWS;
    }
#line 26852 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 500:
#line 3395 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.oncommit) = ONCOMMIT_PRESERVE_ROWS;
    }
#line 26858 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 501:
#line 3396 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.oncommit) = ONCOMMIT_NOOP;
    }
#line 26864 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 502:
#line 3399 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 26870 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 503:
#line 3400 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 26876 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 504:
#line 3403 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 26882 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 505:
#line 3404 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 26888 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 506:
#line 3407 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 26894 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 507:
#line 3423 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTableAsStmt *ctas = makeNode(CreateTableAsStmt);
      ctas->query = (yyvsp[-1].node);
      ctas->into = (yyvsp[-3].into);
      ctas->relkind = OBJECT_TABLE;
      ctas->is_select_into = false;
      ctas->if_not_exists = false;
      /* cram additional flags into the IntoClause */
      (yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
      (yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
      (yyval.node) = (Node *)ctas;
    }
#line 26911 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 508:
#line 3436 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTableAsStmt *ctas = makeNode(CreateTableAsStmt);
      ctas->query = (yyvsp[-1].node);
      ctas->into = (yyvsp[-3].into);
      ctas->relkind = OBJECT_TABLE;
      ctas->is_select_into = false;
      ctas->if_not_exists = true;
      /* cram additional flags into the IntoClause */
      (yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
      (yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
      (yyval.node) = (Node *)ctas;
    }
#line 26928 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 509:
#line 3452 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.into) = makeNode(IntoClause);
      (yyval.into)->rel = (yyvsp[-4].range);
      (yyval.into)->colNames = (yyvsp[-3].list);
      (yyval.into)->options = (yyvsp[-2].list);
      (yyval.into)->onCommit = (yyvsp[-1].oncommit);
      (yyval.into)->tableSpaceName = (yyvsp[0].str);
      (yyval.into)->viewQuery = NULL;
      (yyval.into)->skipData = false; /* might get changed later */
    }
#line 26943 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 510:
#line 3465 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 26949 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 511:
#line 3466 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 26955 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 512:
#line 3467 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 26961 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 513:
#line 3480 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTableAsStmt *ctas = makeNode(CreateTableAsStmt);
      ctas->query = (yyvsp[-1].node);
      ctas->into = (yyvsp[-3].into);
      ctas->relkind = OBJECT_MATVIEW;
      ctas->is_select_into = false;
      ctas->if_not_exists = false;
      /* cram additional flags into the IntoClause */
      (yyvsp[-3].into)->rel->relpersistence = (yyvsp[-6].ival);
      (yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
      (yyval.node) = (Node *)ctas;
    }
#line 26978 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 514:
#line 3493 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTableAsStmt *ctas = makeNode(CreateTableAsStmt);
      ctas->query = (yyvsp[-1].node);
      ctas->into = (yyvsp[-3].into);
      ctas->relkind = OBJECT_MATVIEW;
      ctas->is_select_into = false;
      ctas->if_not_exists = true;
      /* cram additional flags into the IntoClause */
      (yyvsp[-3].into)->rel->relpersistence = (yyvsp[-9].ival);
      (yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
      (yyval.node) = (Node *)ctas;
    }
#line 26995 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 515:
#line 3509 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.into) = makeNode(IntoClause);
      (yyval.into)->rel = (yyvsp[-3].range);
      (yyval.into)->colNames = (yyvsp[-2].list);
      (yyval.into)->options = (yyvsp[-1].list);
      (yyval.into)->onCommit = ONCOMMIT_NOOP;
      (yyval.into)->tableSpaceName = (yyvsp[0].str);
      (yyval.into)->viewQuery = NULL; /* filled at analysis time */
      (yyval.into)->skipData = false; /* might get changed later */
    }
#line 27010 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 516:
#line 3521 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RELPERSISTENCE_UNLOGGED;
    }
#line 27016 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 517:
#line 3522 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RELPERSISTENCE_PERMANENT;
    }
#line 27022 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 518:
#line 3535 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RefreshMatViewStmt *n = makeNode(RefreshMatViewStmt);
      n->concurrent = (yyvsp[-2].boolean);
      n->relation = (yyvsp[-1].range);
      n->skipData = !((yyvsp[0].boolean));
      (yyval.node) = (Node *)n;
    }
#line 27034 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 519:
#line 3555 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateSeqStmt *n = makeNode(CreateSeqStmt);
      (yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
      n->sequence = (yyvsp[-1].range);
      n->options = (yyvsp[0].list);
      n->ownerId = InvalidOid;
      n->if_not_exists = false;
      (yyval.node) = (Node *)n;
    }
#line 27048 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 520:
#line 3565 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateSeqStmt *n = makeNode(CreateSeqStmt);
      (yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
      n->sequence = (yyvsp[-1].range);
      n->options = (yyvsp[0].list);
      n->ownerId = InvalidOid;
      n->if_not_exists = true;
      (yyval.node) = (Node *)n;
    }
#line 27062 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 521:
#line 3578 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterSeqStmt *n = makeNode(AlterSeqStmt);
      n->sequence = (yyvsp[-1].range);
      n->options = (yyvsp[0].list);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 27074 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 522:
#line 3586 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterSeqStmt *n = makeNode(AlterSeqStmt);
      n->sequence = (yyvsp[-1].range);
      n->options = (yyvsp[0].list);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 27086 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 523:
#line 3596 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 27092 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 524:
#line 3597 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 27098 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 525:
#line 3600 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 27104 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 526:
#line 3601 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 27110 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 527:
#line 3605 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("cache", (Node *)(yyvsp[0].value));
    }
#line 27118 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 528:
#line 3609 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("cycle", (Node *)makeInteger(TRUE));
    }
#line 27126 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 529:
#line 3613 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("cycle", (Node *)makeInteger(FALSE));
    }
#line 27134 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 530:
#line 3617 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("increment", (Node *)(yyvsp[0].value));
    }
#line 27142 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 531:
#line 3621 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("maxvalue", (Node *)(yyvsp[0].value));
    }
#line 27150 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 532:
#line 3625 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("minvalue", (Node *)(yyvsp[0].value));
    }
#line 27158 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 533:
#line 3629 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("maxvalue", NULL);
    }
#line 27166 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 534:
#line 3633 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("minvalue", NULL);
    }
#line 27174 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 535:
#line 3637 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("owned_by", (Node *)(yyvsp[0].list));
    }
#line 27182 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 536:
#line 3641 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("start", (Node *)(yyvsp[0].value));
    }
#line 27190 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 537:
#line 3645 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("restart", NULL);
    }
#line 27198 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 538:
#line 3649 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("restart", (Node *)(yyvsp[0].value));
    }
#line 27206 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 539:
#line 3654 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 27212 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 540:
#line 3655 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 27218 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 541:
#line 3659 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.value) = makeFloat((yyvsp[0].str));
    }
#line 27224 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 542:
#line 3661 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.value) = makeFloat((yyvsp[0].str));
      doNegateFloat((yyval.value));
    }
#line 27233 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 543:
#line 3665 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.value) = makeInteger((yyvsp[0].ival));
    }
#line 27239 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 544:
#line 3668 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].value));
    }
#line 27245 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 545:
#line 3669 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].value));
    }
#line 27251 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 546:
#line 3682 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreatePLangStmt *n = makeNode(CreatePLangStmt);
      n->replace = (yyvsp[-4].boolean);
      n->plname = (yyvsp[0].str);
      /* parameters are all to be supplied by system */
      n->plhandler = NIL;
      n->plinline = NIL;
      n->plvalidator = NIL;
      n->pltrusted = false;
      (yyval.node) = (Node *)n;
    }
#line 27267 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 547:
#line 3695 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreatePLangStmt *n = makeNode(CreatePLangStmt);
      n->replace = (yyvsp[-8].boolean);
      n->plname = (yyvsp[-4].str);
      n->plhandler = (yyvsp[-2].list);
      n->plinline = (yyvsp[-1].list);
      n->plvalidator = (yyvsp[0].list);
      n->pltrusted = (yyvsp[-7].boolean);
      (yyval.node) = (Node *)n;
    }
#line 27282 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 548:
#line 3708 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 27288 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 549:
#line 3709 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 27294 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 550:
#line 3717 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 27300 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 551:
#line 3718 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list));
    }
#line 27306 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 552:
#line 3722 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 27312 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 553:
#line 3723 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 27318 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 554:
#line 3727 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 27324 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 555:
#line 3728 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 27330 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 556:
#line 3732 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 27336 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 557:
#line 3733 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 27342 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 558:
#line 3738 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_LANGUAGE;
      n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 27357 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 559:
#line 3749 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_LANGUAGE;
      n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 27371 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 560:
#line 3761 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 27377 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 561:
#line 3762 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 27383 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 562:
#line 3773 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTableSpaceStmt *n = makeNode(CreateTableSpaceStmt);
      n->tablespacename = (yyvsp[-4].str);
      n->owner = (yyvsp[-3].node);
      n->location = (yyvsp[-1].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27396 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 563:
#line 3783 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 27402 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 564:
#line 3784 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 27408 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 565:
#line 3798 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropTableSpaceStmt *n = makeNode(DropTableSpaceStmt);
      n->tablespacename = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 27419 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 566:
#line 3805 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropTableSpaceStmt *n = makeNode(DropTableSpaceStmt);
      n->tablespacename = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 27430 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 567:
#line 3822 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateExtensionStmt *n = makeNode(CreateExtensionStmt);
      n->extname = (yyvsp[-2].str);
      n->if_not_exists = false;
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27442 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 568:
#line 3830 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateExtensionStmt *n = makeNode(CreateExtensionStmt);
      n->extname = (yyvsp[-2].str);
      n->if_not_exists = true;
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27454 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 569:
#line 3841 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 27460 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 570:
#line 3843 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 27466 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 571:
#line 3848 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("schema", (Node *)makeString((yyvsp[0].str)));
    }
#line 27474 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 572:
#line 3852 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("new_version", (Node *)makeString((yyvsp[0].str)));
    }
#line 27482 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 573:
#line 3856 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("old_version", (Node *)makeString((yyvsp[0].str)));
    }
#line 27490 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 574:
#line 3868 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionStmt *n = makeNode(AlterExtensionStmt);
      n->extname = (yyvsp[-2].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27501 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 575:
#line 3878 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 27507 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 576:
#line 3880 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 27513 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 577:
#line 3885 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("new_version", (Node *)makeString((yyvsp[0].str)));
    }
#line 27521 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 578:
#line 3898 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-4].str);
      n->action = (yyvsp[-3].ival);
      n->objtype = OBJECT_AGGREGATE;
      n->objname = (yyvsp[-1].list);
      n->objargs = extractAggrArgTypes((yyvsp[0].list));
      (yyval.node) = (Node *)n;
    }
#line 27535 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 579:
#line 3908 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-7].str);
      n->action = (yyvsp[-6].ival);
      n->objtype = OBJECT_CAST;
      n->objname = list_make1((yyvsp[-3].typnam));
      n->objargs = list_make1((yyvsp[-1].typnam));
      (yyval.node) = (Node *)n;
    }
#line 27549 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 580:
#line 3918 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_COLLATION;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27562 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 581:
#line 3927 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_CONVERSION;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27575 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 582:
#line 3936 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_DOMAIN;
      n->objname = list_make1((yyvsp[0].typnam));
      (yyval.node) = (Node *)n;
    }
#line 27588 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 583:
#line 3945 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_FUNCTION;
      n->objname = (yyvsp[0].funwithargs)->funcname;
      n->objargs = (yyvsp[0].funwithargs)->funcargs;
      (yyval.node) = (Node *)n;
    }
#line 27602 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 584:
#line 3955 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-4].str);
      n->action = (yyvsp[-3].ival);
      n->objtype = OBJECT_LANGUAGE;
      n->objname = list_make1(makeString((yyvsp[0].str)));
      (yyval.node) = (Node *)n;
    }
#line 27615 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 585:
#line 3964 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-4].str);
      n->action = (yyvsp[-3].ival);
      n->objtype = OBJECT_OPERATOR;
      n->objname = (yyvsp[-1].list);
      n->objargs = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27629 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 586:
#line 3974 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-6].str);
      n->action = (yyvsp[-5].ival);
      n->objtype = OBJECT_OPCLASS;
      n->objname = lcons(makeString((yyvsp[0].str)), (yyvsp[-2].list));
      (yyval.node) = (Node *)n;
    }
#line 27642 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 587:
#line 3983 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-6].str);
      n->action = (yyvsp[-5].ival);
      n->objtype = OBJECT_OPFAMILY;
      n->objname = lcons(makeString((yyvsp[0].str)), (yyvsp[-2].list));
      (yyval.node) = (Node *)n;
    }
#line 27655 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 588:
#line 3992 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_SCHEMA;
      n->objname = list_make1(makeString((yyvsp[0].str)));
      (yyval.node) = (Node *)n;
    }
#line 27668 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 589:
#line 4001 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-4].str);
      n->action = (yyvsp[-3].ival);
      n->objtype = OBJECT_EVENT_TRIGGER;
      n->objname = list_make1(makeString((yyvsp[0].str)));
      (yyval.node) = (Node *)n;
    }
#line 27681 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 590:
#line 4010 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_TABLE;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27694 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 591:
#line 4019 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-5].str);
      n->action = (yyvsp[-4].ival);
      n->objtype = OBJECT_TSPARSER;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27707 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 592:
#line 4028 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-5].str);
      n->action = (yyvsp[-4].ival);
      n->objtype = OBJECT_TSDICTIONARY;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27720 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 593:
#line 4037 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-5].str);
      n->action = (yyvsp[-4].ival);
      n->objtype = OBJECT_TSTEMPLATE;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27733 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 594:
#line 4046 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-5].str);
      n->action = (yyvsp[-4].ival);
      n->objtype = OBJECT_TSCONFIGURATION;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27746 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 595:
#line 4055 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_SEQUENCE;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27759 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 596:
#line 4064 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_VIEW;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27772 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 597:
#line 4073 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-4].str);
      n->action = (yyvsp[-3].ival);
      n->objtype = OBJECT_MATVIEW;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27785 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 598:
#line 4082 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-4].str);
      n->action = (yyvsp[-3].ival);
      n->objtype = OBJECT_FOREIGN_TABLE;
      n->objname = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27798 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 599:
#line 4091 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-5].str);
      n->action = (yyvsp[-4].ival);
      n->objtype = OBJECT_FDW;
      n->objname = list_make1(makeString((yyvsp[0].str)));
      (yyval.node) = (Node *)n;
    }
#line 27811 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 600:
#line 4100 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_FOREIGN_SERVER;
      n->objname = list_make1(makeString((yyvsp[0].str)));
      (yyval.node) = (Node *)n;
    }
#line 27824 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 601:
#line 4109 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-6].str);
      n->action = (yyvsp[-5].ival);
      n->objtype = OBJECT_TRANSFORM;
      n->objname = list_make1((yyvsp[-2].typnam));
      n->objargs = list_make1(makeString((yyvsp[0].str)));
      (yyval.node) = (Node *)n;
    }
#line 27838 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 602:
#line 4119 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterExtensionContentsStmt *n = makeNode(AlterExtensionContentsStmt);
      n->extname = (yyvsp[-3].str);
      n->action = (yyvsp[-2].ival);
      n->objtype = OBJECT_TYPE;
      n->objname = list_make1((yyvsp[0].typnam));
      (yyval.node) = (Node *)n;
    }
#line 27851 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 603:
#line 4137 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateFdwStmt *n = makeNode(CreateFdwStmt);
      n->fdwname = (yyvsp[-2].str);
      n->func_options = (yyvsp[-1].list);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27863 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 604:
#line 4147 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("handler", (Node *)(yyvsp[0].list));
    }
#line 27869 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 605:
#line 4148 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("handler", NULL);
    }
#line 27875 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 606:
#line 4149 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("validator", (Node *)(yyvsp[0].list));
    }
#line 27881 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 607:
#line 4150 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("validator", NULL);
    }
#line 27887 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 608:
#line 4154 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 27893 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 609:
#line 4155 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 27899 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 610:
#line 4159 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 27905 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 611:
#line 4160 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 27911 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 612:
#line 4171 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_FDW;
      n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
      n->arguments = NIL;
      n->missing_ok = false;
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 27926 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 613:
#line 4182 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_FDW;
      n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
      n->arguments = NIL;
      n->missing_ok = true;
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 27941 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 614:
#line 4202 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterFdwStmt *n = makeNode(AlterFdwStmt);
      n->fdwname = (yyvsp[-2].str);
      n->func_options = (yyvsp[-1].list);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 27953 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 615:
#line 4210 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterFdwStmt *n = makeNode(AlterFdwStmt);
      n->fdwname = (yyvsp[-1].str);
      n->func_options = (yyvsp[0].list);
      n->options = NIL;
      (yyval.node) = (Node *)n;
    }
#line 27965 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 616:
#line 4221 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 27971 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 617:
#line 4222 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 27977 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 618:
#line 4227 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 27985 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 619:
#line 4231 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
    }
#line 27993 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 620:
#line 4238 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 27999 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 621:
#line 4243 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 28007 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 622:
#line 4247 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
    }
#line 28015 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 623:
#line 4254 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = (yyvsp[0].defelt);
    }
#line 28023 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 624:
#line 4258 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = (yyvsp[0].defelt);
      (yyval.defelt)->defaction = DEFELEM_SET;
    }
#line 28032 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 625:
#line 4263 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = (yyvsp[0].defelt);
      (yyval.defelt)->defaction = DEFELEM_ADD;
    }
#line 28041 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 626:
#line 4268 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP);
    }
#line 28049 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 627:
#line 4275 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node));
    }
#line 28057 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 628:
#line 4281 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 28063 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 629:
#line 4286 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeString((yyvsp[0].str));
    }
#line 28069 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 630:
#line 4298 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateForeignServerStmt *n = makeNode(CreateForeignServerStmt);
      n->servername = (yyvsp[-7].str);
      n->servertype = (yyvsp[-6].str);
      n->version = (yyvsp[-5].str);
      n->fdwname = (yyvsp[-1].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 28083 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 631:
#line 4310 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 28089 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 632:
#line 4311 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 28095 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 633:
#line 4316 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 28101 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 634:
#line 4317 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 28107 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 635:
#line 4321 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 28113 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 636:
#line 4322 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 28119 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 637:
#line 4333 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_FOREIGN_SERVER;
      n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
      n->arguments = NIL;
      n->missing_ok = false;
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 28134 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 638:
#line 4344 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_FOREIGN_SERVER;
      n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
      n->arguments = NIL;
      n->missing_ok = true;
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 28149 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 639:
#line 4364 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterForeignServerStmt *n = makeNode(AlterForeignServerStmt);
      n->servername = (yyvsp[-2].str);
      n->version = (yyvsp[-1].str);
      n->options = (yyvsp[0].list);
      n->has_version = true;
      (yyval.node) = (Node *)n;
    }
#line 28162 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 640:
#line 4373 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterForeignServerStmt *n = makeNode(AlterForeignServerStmt);
      n->servername = (yyvsp[-1].str);
      n->version = (yyvsp[0].str);
      n->has_version = true;
      (yyval.node) = (Node *)n;
    }
#line 28174 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 641:
#line 4381 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterForeignServerStmt *n = makeNode(AlterForeignServerStmt);
      n->servername = (yyvsp[-1].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 28185 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 642:
#line 4400 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateForeignTableStmt *n = makeNode(CreateForeignTableStmt);
      (yyvsp[-7].range)->relpersistence = RELPERSISTENCE_PERMANENT;
      n->base.relation = (yyvsp[-7].range);
      n->base.tableElts = (yyvsp[-5].list);
      n->base.inhRelations = (yyvsp[-3].list);
      n->base.ofTypename = NULL;
      n->base.constraints = NIL;
      n->base.options = NIL;
      n->base.oncommit = ONCOMMIT_NOOP;
      n->base.tablespacename = NULL;
      n->base.if_not_exists = false;
      /* FDW-specific data */
      n->servername = (yyvsp[-1].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 28207 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 643:
#line 4420 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateForeignTableStmt *n = makeNode(CreateForeignTableStmt);
      (yyvsp[-7].range)->relpersistence = RELPERSISTENCE_PERMANENT;
      n->base.relation = (yyvsp[-7].range);
      n->base.tableElts = (yyvsp[-5].list);
      n->base.inhRelations = (yyvsp[-3].list);
      n->base.ofTypename = NULL;
      n->base.constraints = NIL;
      n->base.options = NIL;
      n->base.oncommit = ONCOMMIT_NOOP;
      n->base.tablespacename = NULL;
      n->base.if_not_exists = true;
      /* FDW-specific data */
      n->servername = (yyvsp[-1].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 28229 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 644:
#line 4448 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_FOREIGN_TABLE;
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 28242 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 645:
#line 4457 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableStmt *n = makeNode(AlterTableStmt);
      n->relation = (yyvsp[-1].range);
      n->cmds = (yyvsp[0].list);
      n->relkind = OBJECT_FOREIGN_TABLE;
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 28255 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 646:
#line 4479 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ImportForeignSchemaStmt *n = makeNode(ImportForeignSchemaStmt);
      n->server_name = (yyvsp[-3].str);
      n->remote_schema = (yyvsp[-7].str);
      n->local_schema = (yyvsp[-1].str);
      n->list_type = (yyvsp[-6].importqual)->type;
      n->table_list = (yyvsp[-6].importqual)->table_names;
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 28270 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 647:
#line 4492 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FDW_IMPORT_SCHEMA_LIMIT_TO;
    }
#line 28276 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 648:
#line 4493 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = FDW_IMPORT_SCHEMA_EXCEPT;
    }
#line 28282 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 649:
#line 4498 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ImportQual *n = (ImportQual *)palloc(sizeof(ImportQual));
      n->type = static_cast<ImportForeignSchemaType>((yyvsp[-3].ival));
      n->table_names = (yyvsp[-1].list);
      (yyval.importqual) = n;
    }
#line 28293 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 650:
#line 4505 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ImportQual *n = (ImportQual *)palloc(sizeof(ImportQual));
      n->type = FDW_IMPORT_SCHEMA_ALL;
      n->table_names = NIL;
      (yyval.importqual) = n;
    }
#line 28304 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 651:
#line 4521 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateUserMappingStmt *n = makeNode(CreateUserMappingStmt);
      n->user = (yyvsp[-3].node);
      n->servername = (yyvsp[-1].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 28316 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 652:
#line 4531 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 28322 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 653:
#line 4532 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeRoleSpec(ROLESPEC_CURRENT_USER, (yylsp[0]));
    }
#line 28328 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 654:
#line 4543 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropUserMappingStmt *n = makeNode(DropUserMappingStmt);
      n->user = (yyvsp[-2].node);
      n->servername = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 28340 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 655:
#line 4551 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropUserMappingStmt *n = makeNode(DropUserMappingStmt);
      n->user = (yyvsp[-2].node);
      n->servername = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 28352 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 656:
#line 4568 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterUserMappingStmt *n = makeNode(AlterUserMappingStmt);
      n->user = (yyvsp[-3].node);
      n->servername = (yyvsp[-1].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 28364 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 657:
#line 4592 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreatePolicyStmt *n = makeNode(CreatePolicyStmt);
      n->policy_name = (yyvsp[-6].str);
      n->table = (yyvsp[-4].range);
      n->cmd = (yyvsp[-3].str);
      n->roles = (yyvsp[-2].list);
      n->qual = (yyvsp[-1].node);
      n->with_check = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 28379 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 658:
#line 4607 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterPolicyStmt *n = makeNode(AlterPolicyStmt);
      n->policy_name = (yyvsp[-5].str);
      n->table = (yyvsp[-3].range);
      n->roles = (yyvsp[-2].list);
      n->qual = (yyvsp[-1].node);
      n->with_check = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 28393 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 659:
#line 4620 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_POLICY;
      n->objects =
          list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 28408 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 660:
#line 4631 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_POLICY;
      n->objects =
          list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 28423 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 661:
#line 4644 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].node);
    }
#line 28429 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 662:
#line 4645 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 28435 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 663:
#line 4649 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].node);
    }
#line 28441 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 664:
#line 4650 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 28447 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 665:
#line 4654 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 28453 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 666:
#line 4655 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeRoleSpec(ROLESPEC_PUBLIC, -1));
    }
#line 28459 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 667:
#line 4659 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 28465 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 668:
#line 4660 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NULL;
    }
#line 28471 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 669:
#line 4664 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 28477 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 670:
#line 4665 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "all";
    }
#line 28483 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 671:
#line 4669 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "all";
    }
#line 28489 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 672:
#line 4670 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "select";
    }
#line 28495 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 673:
#line 4671 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "insert";
    }
#line 28501 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 674:
#line 4672 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "update";
    }
#line 28507 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 675:
#line 4673 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "delete";
    }
#line 28513 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 676:
#line 4688 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTrigStmt *n = makeNode(CreateTrigStmt);
      n->trigname = (yyvsp[-12].str);
      n->relation = (yyvsp[-8].range);
      n->funcname = (yyvsp[-3].list);
      n->args = (yyvsp[-1].list);
      n->row = (yyvsp[-7].boolean);
      n->timing = (yyvsp[-11].ival);
      n->events = intVal(linitial((yyvsp[-10].list)));
      n->columns = (List *)lsecond((yyvsp[-10].list));
      n->whenClause = (yyvsp[-6].node);
      n->isconstraint = FALSE;
      n->deferrable = FALSE;
      n->initdeferred = FALSE;
      n->constrrel = NULL;
      (yyval.node) = (Node *)n;
    }
#line 28535 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 677:
#line 4709 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTrigStmt *n = makeNode(CreateTrigStmt);
      n->trigname = (yyvsp[-16].str);
      n->relation = (yyvsp[-12].range);
      n->funcname = (yyvsp[-3].list);
      n->args = (yyvsp[-1].list);
      n->row = TRUE;
      n->timing = TRIGGER_TYPE_AFTER;
      n->events = intVal(linitial((yyvsp[-14].list)));
      n->columns = (List *)lsecond((yyvsp[-14].list));
      n->whenClause = (yyvsp[-6].node);
      n->isconstraint = TRUE;
      processCASbits((yyvsp[-10].ival), (yylsp[-10]), "TRIGGER", &n->deferrable,
                     &n->initdeferred, NULL, NULL, yyscanner);
      n->constrrel = (yyvsp[-11].range);
      (yyval.node) = (Node *)n;
    }
#line 28558 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 678:
#line 4730 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = TRIGGER_TYPE_BEFORE;
    }
#line 28564 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 679:
#line 4731 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = TRIGGER_TYPE_AFTER;
    }
#line 28570 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 680:
#line 4732 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = TRIGGER_TYPE_INSTEAD;
    }
#line 28576 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 681:
#line 4737 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 28582 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 682:
#line 4739 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      int events1 = intVal(linitial((yyvsp[-2].list)));
      int events2 = intVal(linitial((yyvsp[0].list)));
      List *columns1 = (List *)lsecond((yyvsp[-2].list));
      List *columns2 = (List *)lsecond((yyvsp[0].list));

      if (events1 & events2)
        parser_yyerror("duplicate trigger events specified");
      /*
       * concat'ing the columns lists loses information about
       * which columns went with which event, but so long as
       * only UPDATE carries columns and we disallow multiple
       * UPDATE items, it doesn't matter.  Command execution
       * should just ignore the columns for non-UPDATE events.
       */
      (yyval.list) = list_make2(makeInteger(events1 | events2),
                                list_concat(columns1, columns2));
    }
#line 28605 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 683:
#line 4761 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(makeInteger(TRIGGER_TYPE_INSERT), NIL);
    }
#line 28611 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 684:
#line 4763 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(makeInteger(TRIGGER_TYPE_DELETE), NIL);
    }
#line 28617 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 685:
#line 4765 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(makeInteger(TRIGGER_TYPE_UPDATE), NIL);
    }
#line 28623 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 686:
#line 4767 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) =
          list_make2(makeInteger(TRIGGER_TYPE_UPDATE), (yyvsp[0].list));
    }
#line 28629 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 687:
#line 4769 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(makeInteger(TRIGGER_TYPE_TRUNCATE), NIL);
    }
#line 28635 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 688:
#line 4774 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = (yyvsp[0].boolean);
    }
#line 28643 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 689:
#line 4778 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * If ROW/STATEMENT not specified, default to
       * STATEMENT, per SQL
       */
      (yyval.boolean) = FALSE;
    }
#line 28655 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 690:
#line 4788 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 28661 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 691:
#line 4789 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 28667 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 692:
#line 4793 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 28673 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 693:
#line 4794 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 28679 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 694:
#line 4798 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].node);
    }
#line 28685 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 695:
#line 4799 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 28691 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 696:
#line 4803 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].value));
    }
#line 28697 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 697:
#line 4804 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].value));
    }
#line 28703 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 698:
#line 4805 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 28709 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 699:
#line 4810 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.value) = makeString(psprintf("%d", (yyvsp[0].ival)));
    }
#line 28717 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 700:
#line 4813 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.value) = makeString((yyvsp[0].str));
    }
#line 28723 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 701:
#line 4814 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.value) = makeString((yyvsp[0].str));
    }
#line 28729 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 702:
#line 4815 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.value) = makeString((yyvsp[0].str));
    }
#line 28735 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 703:
#line 4819 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
    }
#line 28741 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 704:
#line 4820 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = NULL;
    }
#line 28747 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 705:
#line 4825 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 28753 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 706:
#line 4827 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * We must complain about conflicting options.
       * We could, but choose not to, complain about redundant
       * options (ie, where $2's bit is already set in $1).
       */
      int newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

      /* special message for this case */
      if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) ==
          (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
        ereport(
            ERROR,
            (errcode(ERRCODE_SYNTAX_ERROR),
             errmsg(
                 "constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
             parser_errposition((yylsp[0]))));
      /* generic message for other conflicts */
      if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) ==
              (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
          (newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) ==
              (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
        ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("conflicting constraint properties"),
                        parser_errposition((yylsp[0]))));
      (yyval.ival) = newspec;
    }
#line 28781 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 707:
#line 4853 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CAS_NOT_DEFERRABLE;
    }
#line 28787 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 708:
#line 4854 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CAS_DEFERRABLE;
    }
#line 28793 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 709:
#line 4855 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CAS_INITIALLY_IMMEDIATE;
    }
#line 28799 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 710:
#line 4856 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CAS_INITIALLY_DEFERRED;
    }
#line 28805 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 711:
#line 4857 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CAS_NOT_VALID;
    }
#line 28811 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 712:
#line 4858 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CAS_NO_INHERIT;
    }
#line 28817 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 713:
#line 4864 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_TRIGGER;
      n->objects =
          list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 28832 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 714:
#line 4875 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_TRIGGER;
      n->objects =
          list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 28847 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 715:
#line 4899 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateEventTrigStmt *n = makeNode(CreateEventTrigStmt);
      n->trigname = (yyvsp[-7].str);
      n->eventname = (yyvsp[-5].str);
      n->whenclause = NULL;
      n->funcname = (yyvsp[-2].list);
      (yyval.node) = (Node *)n;
    }
#line 28860 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 716:
#line 4910 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateEventTrigStmt *n = makeNode(CreateEventTrigStmt);
      n->trigname = (yyvsp[-9].str);
      n->eventname = (yyvsp[-7].str);
      n->whenclause = (yyvsp[-5].list);
      n->funcname = (yyvsp[-2].list);
      (yyval.node) = (Node *)n;
    }
#line 28873 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 717:
#line 4922 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 28879 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 718:
#line 4924 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
    }
#line 28885 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 719:
#line 4929 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[-4].str), (Node *)(yyvsp[-1].list));
    }
#line 28891 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 720:
#line 4934 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 28897 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 721:
#line 4936 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str)));
    }
#line 28903 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 722:
#line 4941 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterEventTrigStmt *n = makeNode(AlterEventTrigStmt);
      n->trigname = (yyvsp[-1].str);
      n->tgenabled = (yyvsp[0].chr);
      (yyval.node) = (Node *)n;
    }
#line 28914 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 723:
#line 4950 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.chr) = TRIGGER_FIRES_ON_ORIGIN;
    }
#line 28920 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 724:
#line 4951 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.chr) = TRIGGER_FIRES_ON_REPLICA;
    }
#line 28926 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 725:
#line 4952 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.chr) = TRIGGER_FIRES_ALWAYS;
    }
#line 28932 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 726:
#line 4953 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.chr) = TRIGGER_DISABLED;
    }
#line 28938 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 727:
#line 4967 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTrigStmt *n = makeNode(CreateTrigStmt);
      n->trigname = (yyvsp[-5].str);
      n->args = list_make1((yyvsp[-2].node));
      n->isconstraint = TRUE;
      processCASbits((yyvsp[0].ival), (yylsp[0]), "ASSERTION", &n->deferrable,
                     &n->initdeferred, NULL, NULL, yyscanner);

      ereport(ERROR, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                      errmsg("CREATE ASSERTION is not yet implemented")));

      (yyval.node) = (Node *)n;
    }
#line 28958 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 728:
#line 4986 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->objects = NIL;
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->removeType = OBJECT_TRIGGER; /* XXX */
      ereport(ERROR, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                      errmsg("DROP ASSERTION is not yet implemented")));
      (yyval.node) = (Node *)n;
    }
#line 28974 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 729:
#line 5009 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_AGGREGATE;
      n->oldstyle = false;
      n->defnames = (yyvsp[-2].list);
      n->args = (yyvsp[-1].list);
      n->definition = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 28988 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 730:
#line 5019 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* old-style (pre-8.2) syntax for CREATE AGGREGATE */
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_AGGREGATE;
      n->oldstyle = true;
      n->defnames = (yyvsp[-1].list);
      n->args = NIL;
      n->definition = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29003 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 731:
#line 5030 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_OPERATOR;
      n->oldstyle = false;
      n->defnames = (yyvsp[-1].list);
      n->args = NIL;
      n->definition = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29017 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 732:
#line 5040 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_TYPE;
      n->oldstyle = false;
      n->defnames = (yyvsp[-1].list);
      n->args = NIL;
      n->definition = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29031 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 733:
#line 5050 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* Shell type (identified by lack of definition) */
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_TYPE;
      n->oldstyle = false;
      n->defnames = (yyvsp[0].list);
      n->args = NIL;
      n->definition = NIL;
      (yyval.node) = (Node *)n;
    }
#line 29046 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 734:
#line 5061 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CompositeTypeStmt *n = makeNode(CompositeTypeStmt);

      /* can't use qualified_name, sigh */
      n->typevar =
          makeRangeVarFromAnyName((yyvsp[-4].list), (yylsp[-4]), yyscanner);
      n->coldeflist = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 29059 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 735:
#line 5070 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateEnumStmt *n = makeNode(CreateEnumStmt);
      n->typeName = (yyvsp[-5].list);
      n->vals = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 29070 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 736:
#line 5077 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateRangeStmt *n = makeNode(CreateRangeStmt);
      n->typeName = (yyvsp[-3].list);
      n->params = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29081 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 737:
#line 5084 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_TSPARSER;
      n->args = NIL;
      n->defnames = (yyvsp[-1].list);
      n->definition = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29094 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 738:
#line 5093 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_TSDICTIONARY;
      n->args = NIL;
      n->defnames = (yyvsp[-1].list);
      n->definition = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29107 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 739:
#line 5102 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_TSTEMPLATE;
      n->args = NIL;
      n->defnames = (yyvsp[-1].list);
      n->definition = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29120 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 740:
#line 5111 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_TSCONFIGURATION;
      n->args = NIL;
      n->defnames = (yyvsp[-1].list);
      n->definition = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29133 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 741:
#line 5120 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_COLLATION;
      n->args = NIL;
      n->defnames = (yyvsp[-1].list);
      n->definition = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29146 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 742:
#line 5129 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DefineStmt *n = makeNode(DefineStmt);
      n->kind = OBJECT_COLLATION;
      n->args = NIL;
      n->defnames = (yyvsp[-2].list);
      n->definition = list_make1(makeDefElem("from", (Node *)(yyvsp[0].list)));
      (yyval.node) = (Node *)n;
    }
#line 29159 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 743:
#line 5139 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 29165 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 744:
#line 5142 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 29171 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 745:
#line 5143 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
    }
#line 29177 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 746:
#line 5147 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[-2].str), (Node *)(yyvsp[0].node));
    }
#line 29185 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 747:
#line 5151 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[0].str), NULL);
    }
#line 29193 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 748:
#line 5157 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[0].typnam);
    }
#line 29199 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 749:
#line 5158 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeString(pstrdup((yyvsp[0].keyword)));
    }
#line 29205 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 750:
#line 5159 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[0].list);
    }
#line 29211 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 751:
#line 5160 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[0].value);
    }
#line 29217 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 752:
#line 5161 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeString((yyvsp[0].str));
    }
#line 29223 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 753:
#line 5164 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 29229 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 754:
#line 5167 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 29235 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 755:
#line 5168 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
    }
#line 29241 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 756:
#line 5177 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[-2].str), (Node *)(yyvsp[0].node));
    }
#line 29249 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 757:
#line 5183 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 29255 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 758:
#line 5184 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 29261 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 759:
#line 5188 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 29267 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 760:
#line 5190 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str)));
    }
#line 29273 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 761:
#line 5201 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterEnumStmt *n = makeNode(AlterEnumStmt);
      n->typeName = (yyvsp[-4].list);
      n->newVal = (yyvsp[0].str);
      n->newValNeighbor = NULL;
      n->newValIsAfter = true;
      n->skipIfExists = (yyvsp[-1].boolean);
      (yyval.node) = (Node *)n;
    }
#line 29287 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 762:
#line 5211 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterEnumStmt *n = makeNode(AlterEnumStmt);
      n->typeName = (yyvsp[-6].list);
      n->newVal = (yyvsp[-2].str);
      n->newValNeighbor = (yyvsp[0].str);
      n->newValIsAfter = false;
      n->skipIfExists = (yyvsp[-3].boolean);
      (yyval.node) = (Node *)n;
    }
#line 29301 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 763:
#line 5221 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterEnumStmt *n = makeNode(AlterEnumStmt);
      n->typeName = (yyvsp[-6].list);
      n->newVal = (yyvsp[-2].str);
      n->newValNeighbor = (yyvsp[0].str);
      n->newValIsAfter = true;
      n->skipIfExists = (yyvsp[-3].boolean);
      (yyval.node) = (Node *)n;
    }
#line 29315 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 764:
#line 5232 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = true;
    }
#line 29321 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 765:
#line 5233 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = false;
    }
#line 29327 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 766:
#line 5251 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateOpClassStmt *n = makeNode(CreateOpClassStmt);
      n->opclassname = (yyvsp[-9].list);
      n->isDefault = (yyvsp[-8].boolean);
      n->datatype = (yyvsp[-5].typnam);
      n->amname = (yyvsp[-3].str);
      n->opfamilyname = (yyvsp[-2].list);
      n->items = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29342 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 767:
#line 5264 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 29348 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 768:
#line 5265 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 29354 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 769:
#line 5270 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateOpClassItem *n = makeNode(CreateOpClassItem);
      n->itemtype = OPCLASS_ITEM_OPERATOR;
      n->name = (yyvsp[-2].list);
      n->args = NIL;
      n->number = (yyvsp[-3].ival);
      n->order_family = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 29368 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 770:
#line 5281 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateOpClassItem *n = makeNode(CreateOpClassItem);
      n->itemtype = OPCLASS_ITEM_OPERATOR;
      n->name = (yyvsp[-3].list);
      n->args = (yyvsp[-2].list);
      n->number = (yyvsp[-4].ival);
      n->order_family = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 29382 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 771:
#line 5291 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateOpClassItem *n = makeNode(CreateOpClassItem);
      n->itemtype = OPCLASS_ITEM_FUNCTION;
      n->name = (yyvsp[-1].list);
      n->args = extractArgTypes((yyvsp[0].list));
      n->number = (yyvsp[-2].ival);
      (yyval.node) = (Node *)n;
    }
#line 29395 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 772:
#line 5300 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateOpClassItem *n = makeNode(CreateOpClassItem);
      n->itemtype = OPCLASS_ITEM_FUNCTION;
      n->name = (yyvsp[-1].list);
      n->args = extractArgTypes((yyvsp[0].list));
      n->number = (yyvsp[-5].ival);
      n->class_args = (yyvsp[-3].list);
      (yyval.node) = (Node *)n;
    }
#line 29409 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 773:
#line 5310 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateOpClassItem *n = makeNode(CreateOpClassItem);
      n->itemtype = OPCLASS_ITEM_STORAGETYPE;
      n->storedtype = (yyvsp[0].typnam);
      (yyval.node) = (Node *)n;
    }
#line 29420 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 774:
#line 5318 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 29426 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 775:
#line 5319 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 29432 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 776:
#line 5322 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 29438 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 777:
#line 5323 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 29444 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 778:
#line 5326 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 29450 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 779:
#line 5327 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 29456 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 780:
#line 5328 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 29462 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 781:
#line 5332 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * RECHECK no longer does anything in opclass definitions,
       * but we still accept it to ease porting of old database
       * dumps.
       */
      ereport(NOTICE, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                       errmsg("RECHECK is no longer required"),
                       errhint("Update your data type."),
                       parser_errposition((yylsp[0]))));
      (yyval.boolean) = TRUE;
    }
#line 29480 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 782:
#line 5345 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 29486 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 783:
#line 5351 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateOpFamilyStmt *n = makeNode(CreateOpFamilyStmt);
      n->opfamilyname = (yyvsp[-2].list);
      n->amname = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 29497 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 784:
#line 5361 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOpFamilyStmt *n = makeNode(AlterOpFamilyStmt);
      n->opfamilyname = (yyvsp[-4].list);
      n->amname = (yyvsp[-2].str);
      n->isDrop = false;
      n->items = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29510 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 785:
#line 5370 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOpFamilyStmt *n = makeNode(AlterOpFamilyStmt);
      n->opfamilyname = (yyvsp[-4].list);
      n->amname = (yyvsp[-2].str);
      n->isDrop = true;
      n->items = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 29523 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 786:
#line 5381 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 29529 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 787:
#line 5382 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 29535 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 788:
#line 5387 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateOpClassItem *n = makeNode(CreateOpClassItem);
      n->itemtype = OPCLASS_ITEM_OPERATOR;
      n->number = (yyvsp[-3].ival);
      n->args = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 29547 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 789:
#line 5395 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateOpClassItem *n = makeNode(CreateOpClassItem);
      n->itemtype = OPCLASS_ITEM_FUNCTION;
      n->number = (yyvsp[-3].ival);
      n->args = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 29559 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 790:
#line 5407 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->objects =
          list_make1(lcons(makeString((yyvsp[-1].str)), (yyvsp[-3].list)));
      n->removeType = OBJECT_OPCLASS;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29573 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 791:
#line 5417 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->objects =
          list_make1(lcons(makeString((yyvsp[-1].str)), (yyvsp[-3].list)));
      n->removeType = OBJECT_OPCLASS;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29587 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 792:
#line 5430 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->objects =
          list_make1(lcons(makeString((yyvsp[-1].str)), (yyvsp[-3].list)));
      n->removeType = OBJECT_OPFAMILY;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29601 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 793:
#line 5440 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->objects =
          list_make1(lcons(makeString((yyvsp[-1].str)), (yyvsp[-3].list)));
      n->removeType = OBJECT_OPFAMILY;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29615 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 794:
#line 5462 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropOwnedStmt *n = makeNode(DropOwnedStmt);
      n->roles = (yyvsp[-1].list);
      n->behavior = (yyvsp[0].dbehavior);
      (yyval.node) = (Node *)n;
    }
#line 29626 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 795:
#line 5472 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ReassignOwnedStmt *n = makeNode(ReassignOwnedStmt);
      n->roles = (yyvsp[-2].list);
      n->newrole = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 29637 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 796:
#line 5490 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = (yyvsp[-4].objtype);
      n->missing_ok = TRUE;
      n->objects = (yyvsp[-1].list);
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29652 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 797:
#line 5501 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = (yyvsp[-2].objtype);
      n->missing_ok = FALSE;
      n->objects = (yyvsp[-1].list);
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29667 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 798:
#line 5512 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_TYPE;
      n->missing_ok = FALSE;
      n->objects = (yyvsp[-1].list);
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29681 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 799:
#line 5522 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_TYPE;
      n->missing_ok = TRUE;
      n->objects = (yyvsp[-1].list);
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29695 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 800:
#line 5532 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_DOMAIN;
      n->missing_ok = FALSE;
      n->objects = (yyvsp[-1].list);
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29709 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 801:
#line 5542 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_DOMAIN;
      n->missing_ok = TRUE;
      n->objects = (yyvsp[-1].list);
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 29723 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 802:
#line 5552 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_INDEX;
      n->missing_ok = FALSE;
      n->objects = (yyvsp[-1].list);
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = true;
      (yyval.node) = (Node *)n;
    }
#line 29738 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 803:
#line 5563 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_INDEX;
      n->missing_ok = TRUE;
      n->objects = (yyvsp[-1].list);
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->concurrent = true;
      (yyval.node) = (Node *)n;
    }
#line 29753 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 804:
#line 5576 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TABLE;
    }
#line 29759 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 805:
#line 5577 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_SEQUENCE;
    }
#line 29765 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 806:
#line 5578 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_VIEW;
    }
#line 29771 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 807:
#line 5579 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_MATVIEW;
    }
#line 29777 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 808:
#line 5580 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_INDEX;
    }
#line 29783 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 809:
#line 5581 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_FOREIGN_TABLE;
    }
#line 29789 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 810:
#line 5582 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_EVENT_TRIGGER;
    }
#line 29795 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 811:
#line 5583 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_COLLATION;
    }
#line 29801 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 812:
#line 5584 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_CONVERSION;
    }
#line 29807 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 813:
#line 5585 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_SCHEMA;
    }
#line 29813 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 814:
#line 5586 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_EXTENSION;
    }
#line 29819 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 815:
#line 5587 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TSPARSER;
    }
#line 29825 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 816:
#line 5588 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TSDICTIONARY;
    }
#line 29831 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 817:
#line 5589 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TSTEMPLATE;
    }
#line 29837 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 818:
#line 5590 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TSCONFIGURATION;
    }
#line 29843 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 819:
#line 5594 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].list));
    }
#line 29849 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 820:
#line 5595 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list));
    }
#line 29855 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 821:
#line 5598 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 29861 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 822:
#line 5599 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list));
    }
#line 29867 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 823:
#line 5603 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 29873 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 824:
#line 5605 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str)));
    }
#line 29879 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 825:
#line 5609 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(list_make1((yyvsp[0].typnam)));
    }
#line 29885 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 826:
#line 5610 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), list_make1((yyvsp[0].typnam)));
    }
#line 29891 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 827:
#line 5621 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TruncateStmt *n = makeNode(TruncateStmt);
      n->relations = (yyvsp[-2].list);
      n->restart_seqs = (yyvsp[-1].boolean);
      n->behavior = (yyvsp[0].dbehavior);
      (yyval.node) = (Node *)n;
    }
#line 29903 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 828:
#line 5631 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = false;
    }
#line 29909 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 829:
#line 5632 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = true;
    }
#line 29915 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 830:
#line 5633 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = false;
    }
#line 29921 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 831:
#line 5667 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = (yyvsp[-3].objtype);
      n->objname = (yyvsp[-2].list);
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 29934 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 832:
#line 5676 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_TYPE;
      n->objname = list_make1((yyvsp[-2].typnam));
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 29947 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 833:
#line 5685 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_DOMAIN;
      n->objname = list_make1((yyvsp[-2].typnam));
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 29960 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 834:
#line 5694 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_AGGREGATE;
      n->objname = (yyvsp[-3].list);
      n->objargs = extractAggrArgTypes((yyvsp[-2].list));
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 29973 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 835:
#line 5703 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_FUNCTION;
      n->objname = (yyvsp[-3].list);
      n->objargs = extractArgTypes((yyvsp[-2].list));
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 29986 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 836:
#line 5712 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_OPERATOR;
      n->objname = (yyvsp[-3].list);
      n->objargs = (yyvsp[-2].list);
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 29999 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 837:
#line 5721 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_TABCONSTRAINT;
      n->objname = lappend((yyvsp[-2].list), makeString((yyvsp[-4].str)));
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30012 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 838:
#line 5730 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_DOMCONSTRAINT;
      /*
       * should use Typename not any_name in the production, but
       * there's a shift/reduce conflict if we do that, so fix it
       * up here.
       */
      n->objname = list_make1(makeTypeNameFromNameList((yyvsp[-2].list)));
      n->objargs = list_make1(makeString((yyvsp[-5].str)));
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30030 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 839:
#line 5744 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_POLICY;
      n->objname = lappend((yyvsp[-2].list), makeString((yyvsp[-4].str)));
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30043 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 840:
#line 5753 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_RULE;
      n->objname = lappend((yyvsp[-2].list), makeString((yyvsp[-4].str)));
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30056 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 841:
#line 5762 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* Obsolete syntax supported for awhile for compatibility */
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_RULE;
      n->objname = list_make1(makeString((yyvsp[-2].str)));
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30070 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 842:
#line 5772 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_TRANSFORM;
      n->objname = list_make1((yyvsp[-4].typnam));
      n->objargs = list_make1(makeString((yyvsp[-2].str)));
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30083 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 843:
#line 5781 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_TRIGGER;
      n->objname = lappend((yyvsp[-2].list), makeString((yyvsp[-4].str)));
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30096 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 844:
#line 5790 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_OPCLASS;
      n->objname = lcons(makeString((yyvsp[-2].str)), (yyvsp[-4].list));
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30108 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 845:
#line 5798 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_OPFAMILY;
      n->objname = lcons(makeString((yyvsp[-2].str)), (yyvsp[-4].list));
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30121 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 846:
#line 5807 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_LARGEOBJECT;
      n->objname = list_make1((yyvsp[-2].value));
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30134 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 847:
#line 5816 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_CAST;
      n->objname = list_make1((yyvsp[-5].typnam));
      n->objargs = list_make1((yyvsp[-3].typnam));
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30147 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 848:
#line 5825 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommentStmt *n = makeNode(CommentStmt);
      n->objtype = OBJECT_LANGUAGE;
      n->objname = (yyvsp[-2].list);
      n->objargs = NIL;
      n->comment = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30160 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 849:
#line 5836 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_COLUMN;
    }
#line 30166 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 850:
#line 5837 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_DATABASE;
    }
#line 30172 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 851:
#line 5838 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_SCHEMA;
    }
#line 30178 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 852:
#line 5839 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_INDEX;
    }
#line 30184 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 853:
#line 5840 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_SEQUENCE;
    }
#line 30190 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 854:
#line 5841 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TABLE;
    }
#line 30196 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 855:
#line 5842 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_VIEW;
    }
#line 30202 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 856:
#line 5843 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_MATVIEW;
    }
#line 30208 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 857:
#line 5844 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_COLLATION;
    }
#line 30214 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 858:
#line 5845 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_CONVERSION;
    }
#line 30220 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 859:
#line 5846 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TABLESPACE;
    }
#line 30226 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 860:
#line 5847 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_EXTENSION;
    }
#line 30232 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 861:
#line 5848 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_ROLE;
    }
#line 30238 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 862:
#line 5849 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_FOREIGN_TABLE;
    }
#line 30244 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 863:
#line 5850 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_FOREIGN_SERVER;
    }
#line 30250 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 864:
#line 5851 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_FDW;
    }
#line 30256 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 865:
#line 5852 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_EVENT_TRIGGER;
    }
#line 30262 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 866:
#line 5853 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TSCONFIGURATION;
    }
#line 30268 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 867:
#line 5854 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TSDICTIONARY;
    }
#line 30274 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 868:
#line 5855 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TSPARSER;
    }
#line 30280 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 869:
#line 5856 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TSTEMPLATE;
    }
#line 30286 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 870:
#line 5860 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 30292 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 871:
#line 5861 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 30298 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 872:
#line 5877 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SecLabelStmt *n = makeNode(SecLabelStmt);
      n->provider = (yyvsp[-5].str);
      n->objtype = (yyvsp[-3].objtype);
      n->objname = (yyvsp[-2].list);
      n->objargs = NIL;
      n->label = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30312 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 873:
#line 5888 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SecLabelStmt *n = makeNode(SecLabelStmt);
      n->provider = (yyvsp[-5].str);
      n->objtype = OBJECT_TYPE;
      n->objname = list_make1((yyvsp[-2].typnam));
      n->objargs = NIL;
      n->label = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30326 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 874:
#line 5899 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SecLabelStmt *n = makeNode(SecLabelStmt);
      n->provider = (yyvsp[-5].str);
      n->objtype = OBJECT_TYPE;
      n->objname = list_make1((yyvsp[-2].typnam));
      n->objargs = NIL;
      n->label = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30340 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 875:
#line 5910 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SecLabelStmt *n = makeNode(SecLabelStmt);
      n->provider = (yyvsp[-6].str);
      n->objtype = OBJECT_AGGREGATE;
      n->objname = (yyvsp[-3].list);
      n->objargs = extractAggrArgTypes((yyvsp[-2].list));
      n->label = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30354 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 876:
#line 5921 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SecLabelStmt *n = makeNode(SecLabelStmt);
      n->provider = (yyvsp[-6].str);
      n->objtype = OBJECT_FUNCTION;
      n->objname = (yyvsp[-3].list);
      n->objargs = extractArgTypes((yyvsp[-2].list));
      n->label = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30368 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 877:
#line 5932 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SecLabelStmt *n = makeNode(SecLabelStmt);
      n->provider = (yyvsp[-6].str);
      n->objtype = OBJECT_LARGEOBJECT;
      n->objname = list_make1((yyvsp[-2].value));
      n->objargs = NIL;
      n->label = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30382 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 878:
#line 5943 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SecLabelStmt *n = makeNode(SecLabelStmt);
      n->provider = (yyvsp[-6].str);
      n->objtype = OBJECT_LANGUAGE;
      n->objname = (yyvsp[-2].list);
      n->objargs = NIL;
      n->label = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 30396 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 879:
#line 5954 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 30402 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 880:
#line 5955 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 30408 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 881:
#line 5959 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_COLUMN;
    }
#line 30414 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 882:
#line 5960 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_DATABASE;
    }
#line 30420 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 883:
#line 5961 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_EVENT_TRIGGER;
    }
#line 30426 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 884:
#line 5962 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_FOREIGN_TABLE;
    }
#line 30432 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 885:
#line 5963 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_SCHEMA;
    }
#line 30438 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 886:
#line 5964 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_SEQUENCE;
    }
#line 30444 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 887:
#line 5965 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TABLE;
    }
#line 30450 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 888:
#line 5966 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_ROLE;
    }
#line 30456 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 889:
#line 5967 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_TABLESPACE;
    }
#line 30462 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 890:
#line 5968 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_VIEW;
    }
#line 30468 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 891:
#line 5969 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.objtype) = OBJECT_MATVIEW;
    }
#line 30474 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 892:
#line 5972 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 30480 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 893:
#line 5973 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 30486 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 894:
#line 5984 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = (FetchStmt *)(yyvsp[0].node);
      n->ismove = FALSE;
      (yyval.node) = (Node *)n;
    }
#line 30496 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 895:
#line 5990 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = (FetchStmt *)(yyvsp[0].node);
      n->ismove = TRUE;
      (yyval.node) = (Node *)n;
    }
#line 30506 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 896:
#line 5998 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_FORWARD;
      n->howMany = 1;
      (yyval.node) = (Node *)n;
    }
#line 30518 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 897:
#line 6006 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_FORWARD;
      n->howMany = 1;
      (yyval.node) = (Node *)n;
    }
#line 30530 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 898:
#line 6014 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_FORWARD;
      n->howMany = 1;
      (yyval.node) = (Node *)n;
    }
#line 30542 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 899:
#line 6022 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_BACKWARD;
      n->howMany = 1;
      (yyval.node) = (Node *)n;
    }
#line 30554 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 900:
#line 6030 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_ABSOLUTE;
      n->howMany = 1;
      (yyval.node) = (Node *)n;
    }
#line 30566 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 901:
#line 6038 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_ABSOLUTE;
      n->howMany = -1;
      (yyval.node) = (Node *)n;
    }
#line 30578 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 902:
#line 6046 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_ABSOLUTE;
      n->howMany = (yyvsp[-2].ival);
      (yyval.node) = (Node *)n;
    }
#line 30590 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 903:
#line 6054 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_RELATIVE;
      n->howMany = (yyvsp[-2].ival);
      (yyval.node) = (Node *)n;
    }
#line 30602 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 904:
#line 6062 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_FORWARD;
      n->howMany = (yyvsp[-2].ival);
      (yyval.node) = (Node *)n;
    }
#line 30614 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 905:
#line 6070 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_FORWARD;
      n->howMany = FETCH_ALL;
      (yyval.node) = (Node *)n;
    }
#line 30626 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 906:
#line 6078 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_FORWARD;
      n->howMany = 1;
      (yyval.node) = (Node *)n;
    }
#line 30638 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 907:
#line 6086 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_FORWARD;
      n->howMany = (yyvsp[-2].ival);
      (yyval.node) = (Node *)n;
    }
#line 30650 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 908:
#line 6094 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_FORWARD;
      n->howMany = FETCH_ALL;
      (yyval.node) = (Node *)n;
    }
#line 30662 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 909:
#line 6102 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_BACKWARD;
      n->howMany = 1;
      (yyval.node) = (Node *)n;
    }
#line 30674 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 910:
#line 6110 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_BACKWARD;
      n->howMany = (yyvsp[-2].ival);
      (yyval.node) = (Node *)n;
    }
#line 30686 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 911:
#line 6118 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FetchStmt *n = makeNode(FetchStmt);
      n->portalname = (yyvsp[0].str);
      n->direction = FETCH_BACKWARD;
      n->howMany = FETCH_ALL;
      (yyval.node) = (Node *)n;
    }
#line 30698 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 912:
#line 6127 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 30704 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 913:
#line 6128 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 30710 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 914:
#line 6131 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 30716 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 915:
#line 6132 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 30722 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 916:
#line 6144 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GrantStmt *n = makeNode(GrantStmt);
      n->is_grant = true;
      n->privileges = (yyvsp[-5].list);
      n->targtype = ((yyvsp[-3].privtarget))->targtype;
      n->objtype = ((yyvsp[-3].privtarget))->objtype;
      n->objects = ((yyvsp[-3].privtarget))->objs;
      n->grantees = (yyvsp[-1].list);
      n->grant_option = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 30738 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 917:
#line 6160 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GrantStmt *n = makeNode(GrantStmt);
      n->is_grant = false;
      n->grant_option = false;
      n->privileges = (yyvsp[-5].list);
      n->targtype = ((yyvsp[-3].privtarget))->targtype;
      n->objtype = ((yyvsp[-3].privtarget))->objtype;
      n->objects = ((yyvsp[-3].privtarget))->objs;
      n->grantees = (yyvsp[-1].list);
      n->behavior = (yyvsp[0].dbehavior);
      (yyval.node) = (Node *)n;
    }
#line 30755 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 918:
#line 6174 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GrantStmt *n = makeNode(GrantStmt);
      n->is_grant = false;
      n->grant_option = true;
      n->privileges = (yyvsp[-5].list);
      n->targtype = ((yyvsp[-3].privtarget))->targtype;
      n->objtype = ((yyvsp[-3].privtarget))->objtype;
      n->objects = ((yyvsp[-3].privtarget))->objs;
      n->grantees = (yyvsp[-1].list);
      n->behavior = (yyvsp[0].dbehavior);
      (yyval.node) = (Node *)n;
    }
#line 30772 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 919:
#line 6199 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 30778 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 920:
#line 6201 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 30784 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 921:
#line 6203 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 30790 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 922:
#line 6205 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AccessPriv *n = makeNode(AccessPriv);
      n->priv_name = NULL;
      n->cols = (yyvsp[-1].list);
      (yyval.list) = list_make1(n);
    }
#line 30801 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 923:
#line 6212 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AccessPriv *n = makeNode(AccessPriv);
      n->priv_name = NULL;
      n->cols = (yyvsp[-1].list);
      (yyval.list) = list_make1(n);
    }
#line 30812 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 924:
#line 6220 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].accesspriv));
    }
#line 30818 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 925:
#line 6221 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].accesspriv));
    }
#line 30824 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 926:
#line 6225 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AccessPriv *n = makeNode(AccessPriv);
      n->priv_name = pstrdup((yyvsp[-1].keyword));
      n->cols = (yyvsp[0].list);
      (yyval.accesspriv) = n;
    }
#line 30835 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 927:
#line 6232 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AccessPriv *n = makeNode(AccessPriv);
      n->priv_name = pstrdup((yyvsp[-1].keyword));
      n->cols = (yyvsp[0].list);
      (yyval.accesspriv) = n;
    }
#line 30846 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 928:
#line 6239 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AccessPriv *n = makeNode(AccessPriv);
      n->priv_name = pstrdup((yyvsp[-1].keyword));
      n->cols = (yyvsp[0].list);
      (yyval.accesspriv) = n;
    }
#line 30857 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 929:
#line 6246 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AccessPriv *n = makeNode(AccessPriv);
      n->priv_name = (yyvsp[-1].str);
      n->cols = (yyvsp[0].list);
      (yyval.accesspriv) = n;
    }
#line 30868 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 930:
#line 6260 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_RELATION;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30880 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 931:
#line 6268 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_RELATION;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30892 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 932:
#line 6276 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_SEQUENCE;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30904 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 933:
#line 6284 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_FDW;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30916 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 934:
#line 6292 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_FOREIGN_SERVER;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30928 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 935:
#line 6300 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_FUNCTION;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30940 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 936:
#line 6308 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_DATABASE;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30952 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 937:
#line 6316 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_DOMAIN;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30964 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 938:
#line 6324 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_LANGUAGE;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30976 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 939:
#line 6332 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_LARGEOBJECT;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 30988 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 940:
#line 6340 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_NAMESPACE;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 31000 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 941:
#line 6348 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_TABLESPACE;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 31012 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 942:
#line 6356 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_OBJECT;
      n->objtype = ACL_OBJECT_TYPE;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 31024 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 943:
#line 6364 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_ALL_IN_SCHEMA;
      n->objtype = ACL_OBJECT_RELATION;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 31036 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 944:
#line 6372 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_ALL_IN_SCHEMA;
      n->objtype = ACL_OBJECT_SEQUENCE;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 31048 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 945:
#line 6380 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrivTarget *n = (PrivTarget *)palloc(sizeof(PrivTarget));
      n->targtype = ACL_TARGET_ALL_IN_SCHEMA;
      n->objtype = ACL_OBJECT_FUNCTION;
      n->objs = (yyvsp[0].list);
      (yyval.privtarget) = n;
    }
#line 31060 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 946:
#line 6391 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 31066 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 947:
#line 6392 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 31072 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 948:
#line 6396 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 31078 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 949:
#line 6397 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 31084 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 950:
#line 6402 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 31090 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 951:
#line 6403 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 31096 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 952:
#line 6407 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].funwithargs));
    }
#line 31102 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 953:
#line 6409 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].funwithargs));
    }
#line 31108 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 954:
#line 6414 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncWithArgs *n = makeNode(FuncWithArgs);
      n->funcname = (yyvsp[-1].list);
      n->funcargs = extractArgTypes((yyvsp[0].list));
      (yyval.funwithargs) = n;
    }
#line 31119 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 955:
#line 6430 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GrantRoleStmt *n = makeNode(GrantRoleStmt);
      n->is_grant = true;
      n->granted_roles = (yyvsp[-4].list);
      n->grantee_roles = (yyvsp[-2].list);
      n->admin_opt = (yyvsp[-1].boolean);
      n->grantor = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 31133 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 956:
#line 6443 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GrantRoleStmt *n = makeNode(GrantRoleStmt);
      n->is_grant = false;
      n->admin_opt = false;
      n->granted_roles = (yyvsp[-4].list);
      n->grantee_roles = (yyvsp[-2].list);
      n->behavior = (yyvsp[0].dbehavior);
      (yyval.node) = (Node *)n;
    }
#line 31147 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 957:
#line 6453 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GrantRoleStmt *n = makeNode(GrantRoleStmt);
      n->is_grant = false;
      n->admin_opt = true;
      n->granted_roles = (yyvsp[-4].list);
      n->grantee_roles = (yyvsp[-2].list);
      n->behavior = (yyvsp[0].dbehavior);
      (yyval.node) = (Node *)n;
    }
#line 31161 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 958:
#line 6464 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 31167 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 959:
#line 6465 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 31173 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 960:
#line 6468 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 31179 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 961:
#line 6469 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 31185 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 962:
#line 6480 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDefaultPrivilegesStmt *n = makeNode(AlterDefaultPrivilegesStmt);
      n->options = (yyvsp[-1].list);
      n->action = (GrantStmt *)(yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 31196 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 963:
#line 6489 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 31202 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 964:
#line 6490 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 31208 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 965:
#line 6495 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("schemas", (Node *)(yyvsp[0].list));
    }
#line 31216 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 966:
#line 6499 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("roles", (Node *)(yyvsp[0].list));
    }
#line 31224 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 967:
#line 6503 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("roles", (Node *)(yyvsp[0].list));
    }
#line 31232 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 968:
#line 6515 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GrantStmt *n = makeNode(GrantStmt);
      n->is_grant = true;
      n->privileges = (yyvsp[-5].list);
      n->targtype = ACL_TARGET_DEFAULTS;
      n->objtype = static_cast<GrantObjectType>((yyvsp[-3].ival));
      n->objects = NIL;
      n->grantees = (yyvsp[-1].list);
      n->grant_option = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 31248 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 969:
#line 6528 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GrantStmt *n = makeNode(GrantStmt);
      n->is_grant = false;
      n->grant_option = false;
      n->privileges = (yyvsp[-5].list);
      n->targtype = ACL_TARGET_DEFAULTS;
      n->objtype = static_cast<GrantObjectType>((yyvsp[-3].ival));
      n->objects = NIL;
      n->grantees = (yyvsp[-1].list);
      n->behavior = (yyvsp[0].dbehavior);
      (yyval.node) = (Node *)n;
    }
#line 31265 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 970:
#line 6542 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GrantStmt *n = makeNode(GrantStmt);
      n->is_grant = false;
      n->grant_option = true;
      n->privileges = (yyvsp[-5].list);
      n->targtype = ACL_TARGET_DEFAULTS;
      n->objtype = static_cast<GrantObjectType>((yyvsp[-3].ival));
      n->objects = NIL;
      n->grantees = (yyvsp[-1].list);
      n->behavior = (yyvsp[0].dbehavior);
      (yyval.node) = (Node *)n;
    }
#line 31282 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 971:
#line 6557 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ACL_OBJECT_RELATION;
    }
#line 31288 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 972:
#line 6558 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ACL_OBJECT_FUNCTION;
    }
#line 31294 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 973:
#line 6559 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ACL_OBJECT_SEQUENCE;
    }
#line 31300 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 974:
#line 6560 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ACL_OBJECT_TYPE;
    }
#line 31306 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 975:
#line 6575 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      IndexStmt *n = makeNode(IndexStmt);
      n->unique = (yyvsp[-12].boolean);
      n->concurrent = (yyvsp[-10].boolean);
      n->idxname = (yyvsp[-9].str);
      n->relation = (yyvsp[-7].range);
      n->accessMethod = (yyvsp[-6].str);
      n->indexParams = (yyvsp[-4].list);
      n->options = (yyvsp[-2].list);
      n->tableSpace = (yyvsp[-1].str);
      n->whereClause = (yyvsp[0].node);
      n->excludeOpNames = NIL;
      n->idxcomment = NULL;
      n->indexOid = InvalidOid;
      n->oldNode = InvalidOid;
      n->primary = false;
      n->isconstraint = false;
      n->deferrable = false;
      n->initdeferred = false;
      n->transformed = false;
      n->if_not_exists = false;
      (yyval.node) = (Node *)n;
    }
#line 31334 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 976:
#line 6601 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      IndexStmt *n = makeNode(IndexStmt);
      n->unique = (yyvsp[-15].boolean);
      n->concurrent = (yyvsp[-13].boolean);
      n->idxname = (yyvsp[-9].str);
      n->relation = (yyvsp[-7].range);
      n->accessMethod = (yyvsp[-6].str);
      n->indexParams = (yyvsp[-4].list);
      n->options = (yyvsp[-2].list);
      n->tableSpace = (yyvsp[-1].str);
      n->whereClause = (yyvsp[0].node);
      n->excludeOpNames = NIL;
      n->idxcomment = NULL;
      n->indexOid = InvalidOid;
      n->oldNode = InvalidOid;
      n->primary = false;
      n->isconstraint = false;
      n->deferrable = false;
      n->initdeferred = false;
      n->transformed = false;
      n->if_not_exists = true;
      (yyval.node) = (Node *)n;
    }
#line 31362 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 977:
#line 6627 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 31368 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 978:
#line 6628 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 31374 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 979:
#line 6632 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 31380 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 980:
#line 6633 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 31386 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 981:
#line 6637 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 31392 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 982:
#line 6638 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 31398 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 983:
#line 6642 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 31404 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 984:
#line 6643 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = DEFAULT_INDEX_TYPE;
    }
#line 31410 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 985:
#line 6646 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].ielem));
    }
#line 31416 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 986:
#line 6647 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem));
    }
#line 31422 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 987:
#line 6656 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ielem) = makeNode(IndexElem);
      (yyval.ielem)->name = (yyvsp[-4].str);
      (yyval.ielem)->expr = NULL;
      (yyval.ielem)->indexcolname = NULL;
      (yyval.ielem)->collation = (yyvsp[-3].list);
      (yyval.ielem)->opclass = (yyvsp[-2].list);
      (yyval.ielem)->ordering = static_cast<SortByDir>((yyvsp[-1].ival));
      (yyval.ielem)->nulls_ordering = static_cast<SortByNulls>((yyvsp[0].ival));
    }
#line 31437 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 988:
#line 6667 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ielem) = makeNode(IndexElem);
      (yyval.ielem)->name = NULL;
      (yyval.ielem)->expr = (yyvsp[-4].node);
      (yyval.ielem)->indexcolname = NULL;
      (yyval.ielem)->collation = (yyvsp[-3].list);
      (yyval.ielem)->opclass = (yyvsp[-2].list);
      (yyval.ielem)->ordering = static_cast<SortByDir>((yyvsp[-1].ival));
      (yyval.ielem)->nulls_ordering = static_cast<SortByNulls>((yyvsp[0].ival));
    }
#line 31452 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 989:
#line 6678 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ielem) = makeNode(IndexElem);
      (yyval.ielem)->name = NULL;
      (yyval.ielem)->expr = (yyvsp[-5].node);
      (yyval.ielem)->indexcolname = NULL;
      (yyval.ielem)->collation = (yyvsp[-3].list);
      (yyval.ielem)->opclass = (yyvsp[-2].list);
      (yyval.ielem)->ordering = static_cast<SortByDir>((yyvsp[-1].ival));
      (yyval.ielem)->nulls_ordering = static_cast<SortByNulls>((yyvsp[0].ival));
    }
#line 31467 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 990:
#line 6690 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 31473 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 991:
#line 6691 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 31479 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 992:
#line 6694 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 31485 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 993:
#line 6695 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 31491 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 994:
#line 6696 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 31497 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 995:
#line 6699 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = SORTBY_ASC;
    }
#line 31503 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 996:
#line 6700 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = SORTBY_DESC;
    }
#line 31509 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 997:
#line 6701 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = SORTBY_DEFAULT;
    }
#line 31515 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 998:
#line 6704 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = SORTBY_NULLS_FIRST;
    }
#line 31521 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 999:
#line 6705 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = SORTBY_NULLS_LAST;
    }
#line 31527 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1000:
#line 6706 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = SORTBY_NULLS_DEFAULT;
    }
#line 31533 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1001:
#line 6724 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateFunctionStmt *n = makeNode(CreateFunctionStmt);
      n->replace = (yyvsp[-7].boolean);
      n->funcname = (yyvsp[-5].list);
      n->parameters = (yyvsp[-4].list);
      n->returnType = (yyvsp[-2].typnam);
      n->options = (yyvsp[-1].list);
      n->withClause = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 31548 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1002:
#line 6736 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateFunctionStmt *n = makeNode(CreateFunctionStmt);
      n->replace = (yyvsp[-10].boolean);
      n->funcname = (yyvsp[-8].list);
      n->parameters =
          mergeTableFuncParameters((yyvsp[-7].list), (yyvsp[-3].list));
      n->returnType = TableFuncTypeName((yyvsp[-3].list));
      n->returnType->location = (yylsp[-5]);
      n->options = (yyvsp[-1].list);
      n->withClause = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 31564 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1003:
#line 6749 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateFunctionStmt *n = makeNode(CreateFunctionStmt);
      n->replace = (yyvsp[-5].boolean);
      n->funcname = (yyvsp[-3].list);
      n->parameters = (yyvsp[-2].list);
      n->returnType = NULL;
      n->options = (yyvsp[-1].list);
      n->withClause = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 31579 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1004:
#line 6762 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 31585 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1005:
#line 6763 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 31591 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1006:
#line 6766 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 31597 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1007:
#line 6767 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 31603 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1008:
#line 6771 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].fun_param));
    }
#line 31609 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1009:
#line 6772 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].fun_param));
    }
#line 31615 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1010:
#line 6780 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 31621 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1011:
#line 6781 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 31627 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1012:
#line 6785 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].fun_param));
    }
#line 31633 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1013:
#line 6787 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].fun_param));
    }
#line 31639 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1014:
#line 6802 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FunctionParameter *n = makeNode(FunctionParameter);
      n->name = (yyvsp[-1].str);
      n->argType = (yyvsp[0].typnam);
      n->mode = (yyvsp[-2].fun_param_mode);
      n->defexpr = NULL;
      (yyval.fun_param) = n;
    }
#line 31652 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1015:
#line 6811 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FunctionParameter *n = makeNode(FunctionParameter);
      n->name = (yyvsp[-2].str);
      n->argType = (yyvsp[0].typnam);
      n->mode = (yyvsp[-1].fun_param_mode);
      n->defexpr = NULL;
      (yyval.fun_param) = n;
    }
#line 31665 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1016:
#line 6820 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FunctionParameter *n = makeNode(FunctionParameter);
      n->name = (yyvsp[-1].str);
      n->argType = (yyvsp[0].typnam);
      n->mode = FUNC_PARAM_IN;
      n->defexpr = NULL;
      (yyval.fun_param) = n;
    }
#line 31678 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1017:
#line 6829 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FunctionParameter *n = makeNode(FunctionParameter);
      n->name = NULL;
      n->argType = (yyvsp[0].typnam);
      n->mode = (yyvsp[-1].fun_param_mode);
      n->defexpr = NULL;
      (yyval.fun_param) = n;
    }
#line 31691 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1018:
#line 6838 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FunctionParameter *n = makeNode(FunctionParameter);
      n->name = NULL;
      n->argType = (yyvsp[0].typnam);
      n->mode = FUNC_PARAM_IN;
      n->defexpr = NULL;
      (yyval.fun_param) = n;
    }
#line 31704 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1019:
#line 6849 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.fun_param_mode) = FUNC_PARAM_IN;
    }
#line 31710 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1020:
#line 6850 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.fun_param_mode) = FUNC_PARAM_OUT;
    }
#line 31716 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1021:
#line 6851 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.fun_param_mode) = FUNC_PARAM_INOUT;
    }
#line 31722 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1022:
#line 6852 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.fun_param_mode) = FUNC_PARAM_INOUT;
    }
#line 31728 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1023:
#line 6853 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.fun_param_mode) = FUNC_PARAM_VARIADIC;
    }
#line 31734 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1025:
#line 6864 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* We can catch over-specified results here if we want to,
       * but for now better to silently swallow typmod, etc.
       * - thomas 2000-03-22
       */
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 31746 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1026:
#line 6878 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 31752 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1027:
#line 6880 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = makeTypeNameFromNameList(
          lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
      (yyval.typnam)->pct_type = true;
      (yyval.typnam)->location = (yylsp[-3]);
    }
#line 31762 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1028:
#line 6886 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = makeTypeNameFromNameList(
          lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
      (yyval.typnam)->pct_type = true;
      (yyval.typnam)->setof = TRUE;
      (yyval.typnam)->location = (yylsp[-3]);
    }
#line 31773 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1029:
#line 6896 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.fun_param) = (yyvsp[0].fun_param);
    }
#line 31781 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1030:
#line 6900 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.fun_param) = (yyvsp[-2].fun_param);
      (yyval.fun_param)->defexpr = (yyvsp[0].node);
    }
#line 31790 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1031:
#line 6905 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.fun_param) = (yyvsp[-2].fun_param);
      (yyval.fun_param)->defexpr = (yyvsp[0].node);
    }
#line 31799 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1032:
#line 6913 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if (!((yyvsp[0].fun_param)->mode == FUNC_PARAM_IN ||
            (yyvsp[0].fun_param)->mode == FUNC_PARAM_VARIADIC))
        ereport(ERROR, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("aggregates cannot have output arguments"),
                        parser_errposition((yylsp[0]))));
      (yyval.fun_param) = (yyvsp[0].fun_param);
    }
#line 31813 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1033:
#line 6954 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(NIL, makeInteger(-1));
    }
#line 31821 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1034:
#line 6958 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[-1].list), makeInteger(-1));
    }
#line 31829 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1035:
#line 6962 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[-1].list), makeInteger(0));
    }
#line 31837 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1036:
#line 6966 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* this is the only case requiring consistency checking */
      (yyval.list) =
          makeOrderedSetArgs((yyvsp[-4].list), (yyvsp[-1].list), yyscanner);
    }
#line 31846 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1037:
#line 6973 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].fun_param));
    }
#line 31852 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1038:
#line 6974 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].fun_param));
    }
#line 31858 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1039:
#line 6979 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 31864 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1040:
#line 6980 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 31870 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1041:
#line 6988 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("strict", (Node *)makeInteger(FALSE));
    }
#line 31878 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1042:
#line 6992 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("strict", (Node *)makeInteger(TRUE));
    }
#line 31886 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1043:
#line 6996 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("strict", (Node *)makeInteger(TRUE));
    }
#line 31894 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1044:
#line 7000 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("volatility", (Node *)makeString("immutable"));
    }
#line 31902 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1045:
#line 7004 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("volatility", (Node *)makeString("stable"));
    }
#line 31910 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1046:
#line 7008 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("volatility", (Node *)makeString("volatile"));
    }
#line 31918 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1047:
#line 7012 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("security", (Node *)makeInteger(TRUE));
    }
#line 31926 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1048:
#line 7016 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("security", (Node *)makeInteger(FALSE));
    }
#line 31934 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1049:
#line 7020 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("security", (Node *)makeInteger(TRUE));
    }
#line 31942 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1050:
#line 7024 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("security", (Node *)makeInteger(FALSE));
    }
#line 31950 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1051:
#line 7028 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("leakproof", (Node *)makeInteger(TRUE));
    }
#line 31958 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1052:
#line 7032 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("leakproof", (Node *)makeInteger(FALSE));
    }
#line 31966 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1053:
#line 7036 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("cost", (Node *)(yyvsp[0].value));
    }
#line 31974 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1054:
#line 7040 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("rows", (Node *)(yyvsp[0].value));
    }
#line 31982 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1055:
#line 7044 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* we abuse the normal content of a DefElem here */
      (yyval.defelt) = makeDefElem("set", (Node *)(yyvsp[0].vsetstmt));
    }
#line 31991 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1056:
#line 7052 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("as", (Node *)(yyvsp[0].list));
    }
#line 31999 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1057:
#line 7056 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("language", (Node *)makeString((yyvsp[0].str)));
    }
#line 32007 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1058:
#line 7060 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("transform", (Node *)(yyvsp[0].list));
    }
#line 32015 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1059:
#line 7064 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("window", (Node *)makeInteger(TRUE));
    }
#line 32023 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1060:
#line 7068 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = (yyvsp[0].defelt);
    }
#line 32031 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1061:
#line 7073 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 32037 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1062:
#line 7075 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) =
          list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str)));
    }
#line 32045 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1063:
#line 7081 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].typnam));
    }
#line 32051 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1064:
#line 7082 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-4].list), (yyvsp[0].typnam));
    }
#line 32057 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1065:
#line 7086 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 32063 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1066:
#line 7087 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 32069 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1067:
#line 7091 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FunctionParameter *n = makeNode(FunctionParameter);
      n->name = (yyvsp[-1].str);
      n->argType = (yyvsp[0].typnam);
      n->mode = FUNC_PARAM_TABLE;
      n->defexpr = NULL;
      (yyval.fun_param) = n;
    }
#line 32082 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1068:
#line 7103 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].fun_param));
    }
#line 32090 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1069:
#line 7107 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].fun_param));
    }
#line 32098 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1070:
#line 7122 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterFunctionStmt *n = makeNode(AlterFunctionStmt);
      n->func = (yyvsp[-2].funwithargs);
      n->actions = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 32109 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1071:
#line 7132 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 32115 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1072:
#line 7133 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 32121 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1075:
#line 7155 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_FUNCTION;
      n->objects = list_make1((yyvsp[-2].list));
      n->arguments = list_make1(extractArgTypes((yyvsp[-1].list)));
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 32136 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1076:
#line 7166 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_FUNCTION;
      n->objects = list_make1((yyvsp[-2].list));
      n->arguments = list_make1(extractArgTypes((yyvsp[-1].list)));
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 32151 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1077:
#line 7180 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_AGGREGATE;
      n->objects = list_make1((yyvsp[-2].list));
      n->arguments = list_make1(extractAggrArgTypes((yyvsp[-1].list)));
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 32166 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1078:
#line 7191 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_AGGREGATE;
      n->objects = list_make1((yyvsp[-2].list));
      n->arguments = list_make1(extractAggrArgTypes((yyvsp[-1].list)));
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 32181 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1079:
#line 7205 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_OPERATOR;
      n->objects = list_make1((yyvsp[-2].list));
      n->arguments = list_make1((yyvsp[-1].list));
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 32196 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1080:
#line 7216 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_OPERATOR;
      n->objects = list_make1((yyvsp[-2].list));
      n->arguments = list_make1((yyvsp[-1].list));
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 32211 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1081:
#line 7230 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ereport(
          ERROR,
          (errcode(ERRCODE_SYNTAX_ERROR), errmsg("missing argument"),
           errhint(
               "Use NONE to denote the missing argument of a unary operator."),
           parser_errposition((yylsp[0]))));
    }
#line 32223 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1082:
#line 7238 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[-3].typnam), (yyvsp[-1].typnam));
    }
#line 32229 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1083:
#line 7240 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(NULL, (yyvsp[-1].typnam));
    }
#line 32235 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1084:
#line 7242 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[-3].typnam), NULL);
    }
#line 32241 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1085:
#line 7247 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 32247 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1086:
#line 7249 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list));
    }
#line 32253 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1087:
#line 7262 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DoStmt *n = makeNode(DoStmt);
      n->args = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 32263 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1088:
#line 7270 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 32269 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1089:
#line 7271 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 32275 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1090:
#line 7276 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("as", (Node *)makeString((yyvsp[0].str)));
    }
#line 32283 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1091:
#line 7280 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("language", (Node *)makeString((yyvsp[0].str)));
    }
#line 32291 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1092:
#line 7293 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateCastStmt *n = makeNode(CreateCastStmt);
      n->sourcetype = (yyvsp[-7].typnam);
      n->targettype = (yyvsp[-5].typnam);
      n->func = (yyvsp[-1].funwithargs);
      n->context = (CoercionContext)(yyvsp[0].ival);
      n->inout = false;
      (yyval.node) = (Node *)n;
    }
#line 32305 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1093:
#line 7304 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateCastStmt *n = makeNode(CreateCastStmt);
      n->sourcetype = (yyvsp[-6].typnam);
      n->targettype = (yyvsp[-4].typnam);
      n->func = NULL;
      n->context = (CoercionContext)(yyvsp[0].ival);
      n->inout = false;
      (yyval.node) = (Node *)n;
    }
#line 32319 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1094:
#line 7315 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateCastStmt *n = makeNode(CreateCastStmt);
      n->sourcetype = (yyvsp[-6].typnam);
      n->targettype = (yyvsp[-4].typnam);
      n->func = NULL;
      n->context = (CoercionContext)(yyvsp[0].ival);
      n->inout = true;
      (yyval.node) = (Node *)n;
    }
#line 32333 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1095:
#line 7326 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = COERCION_IMPLICIT;
    }
#line 32339 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1096:
#line 7327 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = COERCION_ASSIGNMENT;
    }
#line 32345 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1097:
#line 7328 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = COERCION_EXPLICIT;
    }
#line 32351 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1098:
#line 7333 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_CAST;
      n->objects = list_make1(list_make1((yyvsp[-4].typnam)));
      n->arguments = list_make1(list_make1((yyvsp[-2].typnam)));
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = (yyvsp[-6].boolean);
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 32366 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1099:
#line 7345 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 32372 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1100:
#line 7346 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 32378 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1101:
#line 7357 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTransformStmt *n = makeNode(CreateTransformStmt);
      n->replace = (yyvsp[-8].boolean);
      n->type_name = (yyvsp[-5].typnam);
      n->lang = (yyvsp[-3].str);
      n->fromsql = static_cast<FuncWithArgs *>(linitial((yyvsp[-1].list)));
      n->tosql = static_cast<FuncWithArgs *>(lsecond((yyvsp[-1].list)));
      (yyval.node) = (Node *)n;
    }
#line 32392 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1102:
#line 7369 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) =
          list_make2((yyvsp[-6].funwithargs), (yyvsp[0].funwithargs));
    }
#line 32400 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1103:
#line 7373 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) =
          list_make2((yyvsp[0].funwithargs), (yyvsp[-6].funwithargs));
    }
#line 32408 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1104:
#line 7377 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[0].funwithargs), NULL);
    }
#line 32416 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1105:
#line 7381 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(NULL, (yyvsp[0].funwithargs));
    }
#line 32424 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1106:
#line 7388 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_TRANSFORM;
      n->objects = list_make1(list_make1((yyvsp[-3].typnam)));
      n->arguments = list_make1(list_make1(makeString((yyvsp[-1].str))));
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = (yyvsp[-5].boolean);
      (yyval.node) = (Node *)n;
    }
#line 32438 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1107:
#line 7409 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ReindexStmt *n = makeNode(ReindexStmt);
      n->kind = static_cast<ReindexObjectType>((yyvsp[-1].ival));
      n->relation = (yyvsp[0].range);
      n->name = NULL;
      n->options = 0;
      (yyval.node) = (Node *)n;
    }
#line 32451 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1108:
#line 7418 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ReindexStmt *n = makeNode(ReindexStmt);
      n->kind = static_cast<ReindexObjectType>((yyvsp[-1].ival));
      n->name = (yyvsp[0].str);
      n->relation = NULL;
      n->options = 0;
      (yyval.node) = (Node *)n;
    }
#line 32464 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1109:
#line 7427 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ReindexStmt *n = makeNode(ReindexStmt);
      n->kind = static_cast<ReindexObjectType>((yyvsp[-1].ival));
      n->relation = (yyvsp[0].range);
      n->name = NULL;
      n->options = (yyvsp[-3].ival);
      (yyval.node) = (Node *)n;
    }
#line 32477 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1110:
#line 7436 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ReindexStmt *n = makeNode(ReindexStmt);
      n->kind = static_cast<ReindexObjectType>((yyvsp[-1].ival));
      n->name = (yyvsp[0].str);
      n->relation = NULL;
      n->options = (yyvsp[-3].ival);
      (yyval.node) = (Node *)n;
    }
#line 32490 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1111:
#line 7446 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = REINDEX_OBJECT_INDEX;
    }
#line 32496 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1112:
#line 7447 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = REINDEX_OBJECT_TABLE;
    }
#line 32502 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1113:
#line 7450 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = REINDEX_OBJECT_SCHEMA;
    }
#line 32508 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1114:
#line 7451 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = REINDEX_OBJECT_SYSTEM;
    }
#line 32514 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1115:
#line 7452 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = REINDEX_OBJECT_DATABASE;
    }
#line 32520 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1116:
#line 7455 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[0].ival);
    }
#line 32526 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1117:
#line 7456 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival);
    }
#line 32532 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1118:
#line 7459 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = REINDEXOPT_VERBOSE;
    }
#line 32538 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1119:
#line 7470 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableSpaceOptionsStmt *n = makeNode(AlterTableSpaceOptionsStmt);
      n->tablespacename = (yyvsp[-2].str);
      n->options = (yyvsp[0].list);
      n->isReset = FALSE;
      (yyval.node) = (Node *)n;
    }
#line 32551 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1120:
#line 7479 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTableSpaceOptionsStmt *n = makeNode(AlterTableSpaceOptionsStmt);
      n->tablespacename = (yyvsp[-2].str);
      n->options = (yyvsp[0].list);
      n->isReset = TRUE;
      (yyval.node) = (Node *)n;
    }
#line 32564 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1121:
#line 7496 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_AGGREGATE;
      n->object = (yyvsp[-4].list);
      n->objarg = extractAggrArgTypes((yyvsp[-3].list));
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32578 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1122:
#line 7506 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_COLLATION;
      n->object = (yyvsp[-3].list);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32591 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1123:
#line 7515 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_CONVERSION;
      n->object = (yyvsp[-3].list);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32604 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1124:
#line 7524 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_DATABASE;
      n->subname = (yyvsp[-3].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32617 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1125:
#line 7533 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_DOMAIN;
      n->object = (yyvsp[-3].list);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32630 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1126:
#line 7542 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_DOMCONSTRAINT;
      n->object = (yyvsp[-5].list);
      n->subname = (yyvsp[-2].str);
      n->newname = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 32643 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1127:
#line 7551 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_FDW;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32656 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1128:
#line 7560 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_FUNCTION;
      n->object = (yyvsp[-3].funwithargs)->funcname;
      n->objarg = (yyvsp[-3].funwithargs)->funcargs;
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32670 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1129:
#line 7570 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_ROLE;
      n->subname = (yyvsp[-3].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32683 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1130:
#line 7579 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_LANGUAGE;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32696 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1131:
#line 7588 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_OPCLASS;
      n->object = lcons(makeString((yyvsp[-3].str)), (yyvsp[-5].list));
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32709 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1132:
#line 7597 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_OPFAMILY;
      n->object = lcons(makeString((yyvsp[-3].str)), (yyvsp[-5].list));
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32722 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1133:
#line 7606 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_POLICY;
      n->relation = (yyvsp[-3].range);
      n->subname = (yyvsp[-5].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32736 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1134:
#line 7616 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_POLICY;
      n->relation = (yyvsp[-3].range);
      n->subname = (yyvsp[-5].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 32750 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1135:
#line 7626 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_SCHEMA;
      n->subname = (yyvsp[-3].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32763 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1136:
#line 7635 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_FOREIGN_SERVER;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32776 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1137:
#line 7644 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TABLE;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32790 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1138:
#line 7654 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TABLE;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 32804 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1139:
#line 7664 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_SEQUENCE;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32818 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1140:
#line 7674 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_SEQUENCE;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 32832 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1141:
#line 7684 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_VIEW;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32846 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1142:
#line 7694 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_VIEW;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 32860 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1143:
#line 7704 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_MATVIEW;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32874 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1144:
#line 7714 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_MATVIEW;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 32888 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1145:
#line 7724 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_INDEX;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32902 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1146:
#line 7734 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_INDEX;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 32916 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1147:
#line 7744 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_FOREIGN_TABLE;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32930 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1148:
#line 7754 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_FOREIGN_TABLE;
      n->relation = (yyvsp[-3].range);
      n->subname = NULL;
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 32944 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1149:
#line 7764 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_COLUMN;
      n->relationType = OBJECT_TABLE;
      n->relation = (yyvsp[-5].range);
      n->subname = (yyvsp[-2].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32959 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1150:
#line 7775 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_COLUMN;
      n->relationType = OBJECT_TABLE;
      n->relation = (yyvsp[-5].range);
      n->subname = (yyvsp[-2].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 32974 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1151:
#line 7786 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_COLUMN;
      n->relationType = OBJECT_MATVIEW;
      n->relation = (yyvsp[-5].range);
      n->subname = (yyvsp[-2].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 32989 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1152:
#line 7797 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_COLUMN;
      n->relationType = OBJECT_MATVIEW;
      n->relation = (yyvsp[-5].range);
      n->subname = (yyvsp[-2].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 33004 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1153:
#line 7808 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TABCONSTRAINT;
      n->relation = (yyvsp[-5].range);
      n->subname = (yyvsp[-2].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33018 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1154:
#line 7818 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TABCONSTRAINT;
      n->relation = (yyvsp[-5].range);
      n->subname = (yyvsp[-2].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 33032 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1155:
#line 7828 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_COLUMN;
      n->relationType = OBJECT_FOREIGN_TABLE;
      n->relation = (yyvsp[-5].range);
      n->subname = (yyvsp[-2].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33047 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1156:
#line 7839 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_COLUMN;
      n->relationType = OBJECT_FOREIGN_TABLE;
      n->relation = (yyvsp[-5].range);
      n->subname = (yyvsp[-2].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 33062 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1157:
#line 7850 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_RULE;
      n->relation = (yyvsp[-3].range);
      n->subname = (yyvsp[-5].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33076 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1158:
#line 7860 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TRIGGER;
      n->relation = (yyvsp[-3].range);
      n->subname = (yyvsp[-5].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33090 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1159:
#line 7870 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_EVENT_TRIGGER;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newname = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 33102 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1160:
#line 7878 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_ROLE;
      n->subname = (yyvsp[-3].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33115 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1161:
#line 7887 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_ROLE;
      n->subname = (yyvsp[-3].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33128 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1162:
#line 7896 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TABLESPACE;
      n->subname = (yyvsp[-3].str);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33141 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1163:
#line 7905 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TSPARSER;
      n->object = (yyvsp[-3].list);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33154 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1164:
#line 7914 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TSDICTIONARY;
      n->object = (yyvsp[-3].list);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33167 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1165:
#line 7923 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TSTEMPLATE;
      n->object = (yyvsp[-3].list);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33180 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1166:
#line 7932 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TSCONFIGURATION;
      n->object = (yyvsp[-3].list);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33193 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1167:
#line 7941 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_TYPE;
      n->object = (yyvsp[-3].list);
      n->newname = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33206 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1168:
#line 7950 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RenameStmt *n = makeNode(RenameStmt);
      n->renameType = OBJECT_ATTRIBUTE;
      n->relationType = OBJECT_TYPE;
      n->relation =
          makeRangeVarFromAnyName((yyvsp[-6].list), (yylsp[-6]), yyscanner);
      n->subname = (yyvsp[-3].str);
      n->newname = (yyvsp[-1].str);
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33222 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1169:
#line 7963 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = COLUMN;
    }
#line 33228 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1170:
#line 7964 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 33234 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1171:
#line 7967 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 1;
    }
#line 33240 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1172:
#line 7968 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 33246 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1173:
#line 7979 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_AGGREGATE;
      n->object = (yyvsp[-4].list);
      n->objarg = extractAggrArgTypes((yyvsp[-3].list));
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33260 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1174:
#line 7989 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_COLLATION;
      n->object = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33273 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1175:
#line 7998 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_CONVERSION;
      n->object = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33286 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1176:
#line 8007 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_DOMAIN;
      n->object = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33299 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1177:
#line 8016 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_EXTENSION;
      n->object = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33312 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1178:
#line 8025 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_FUNCTION;
      n->object = (yyvsp[-3].funwithargs)->funcname;
      n->objarg = (yyvsp[-3].funwithargs)->funcargs;
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33326 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1179:
#line 8035 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_OPERATOR;
      n->object = (yyvsp[-4].list);
      n->objarg = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33340 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1180:
#line 8045 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_OPCLASS;
      n->object = lcons(makeString((yyvsp[-3].str)), (yyvsp[-5].list));
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33353 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1181:
#line 8054 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_OPFAMILY;
      n->object = lcons(makeString((yyvsp[-3].str)), (yyvsp[-5].list));
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33366 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1182:
#line 8063 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_TABLE;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33379 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1183:
#line 8072 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_TABLE;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 33392 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1184:
#line 8081 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_TSPARSER;
      n->object = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33405 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1185:
#line 8090 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_TSDICTIONARY;
      n->object = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33418 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1186:
#line 8099 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_TSTEMPLATE;
      n->object = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33431 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1187:
#line 8108 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_TSCONFIGURATION;
      n->object = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33444 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1188:
#line 8117 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_SEQUENCE;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33457 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1189:
#line 8126 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_SEQUENCE;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 33470 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1190:
#line 8135 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_VIEW;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33483 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1191:
#line 8144 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_VIEW;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 33496 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1192:
#line 8153 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_MATVIEW;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33509 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1193:
#line 8162 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_MATVIEW;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 33522 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1194:
#line 8171 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_FOREIGN_TABLE;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33535 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1195:
#line 8180 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_FOREIGN_TABLE;
      n->relation = (yyvsp[-3].range);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 33548 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1196:
#line 8189 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterObjectSchemaStmt *n = makeNode(AlterObjectSchemaStmt);
      n->objectType = OBJECT_TYPE;
      n->object = (yyvsp[-3].list);
      n->newschema = (yyvsp[0].str);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 33561 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1197:
#line 8206 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_AGGREGATE;
      n->object = (yyvsp[-4].list);
      n->objarg = extractAggrArgTypes((yyvsp[-3].list));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33574 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1198:
#line 8215 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_COLLATION;
      n->object = (yyvsp[-3].list);
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33586 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1199:
#line 8223 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_CONVERSION;
      n->object = (yyvsp[-3].list);
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33598 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1200:
#line 8231 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_DATABASE;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33610 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1201:
#line 8239 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_DOMAIN;
      n->object = (yyvsp[-3].list);
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33622 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1202:
#line 8247 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_FUNCTION;
      n->object = (yyvsp[-3].funwithargs)->funcname;
      n->objarg = (yyvsp[-3].funwithargs)->funcargs;
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33635 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1203:
#line 8256 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_LANGUAGE;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33647 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1204:
#line 8264 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_LARGEOBJECT;
      n->object = list_make1((yyvsp[-3].value));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33659 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1205:
#line 8272 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_OPERATOR;
      n->object = (yyvsp[-4].list);
      n->objarg = (yyvsp[-3].list);
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33672 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1206:
#line 8281 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_OPCLASS;
      n->object = lcons(makeString((yyvsp[-3].str)), (yyvsp[-5].list));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33684 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1207:
#line 8289 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_OPFAMILY;
      n->object = lcons(makeString((yyvsp[-3].str)), (yyvsp[-5].list));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33696 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1208:
#line 8297 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_SCHEMA;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33708 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1209:
#line 8305 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_TYPE;
      n->object = (yyvsp[-3].list);
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33720 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1210:
#line 8313 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_TABLESPACE;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33732 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1211:
#line 8321 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_TSDICTIONARY;
      n->object = (yyvsp[-3].list);
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33744 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1212:
#line 8329 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_TSCONFIGURATION;
      n->object = (yyvsp[-3].list);
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33756 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1213:
#line 8337 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_FDW;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33768 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1214:
#line 8345 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_FOREIGN_SERVER;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33780 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1215:
#line 8353 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterOwnerStmt *n = makeNode(AlterOwnerStmt);
      n->objectType = OBJECT_EVENT_TRIGGER;
      n->object = list_make1(makeString((yyvsp[-3].str)));
      n->newowner = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 33792 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1216:
#line 8372 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RuleStmt *n = makeNode(RuleStmt);
      n->replace = (yyvsp[-11].boolean);
      n->relation = (yyvsp[-4].range);
      n->rulename = (yyvsp[-9].str);
      n->whereClause = (yyvsp[-3].node);
      n->event = static_cast<CmdType>((yyvsp[-6].ival));
      n->instead = (yyvsp[-1].boolean);
      n->actions = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 33808 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1217:
#line 8386 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 33814 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1218:
#line 8387 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 33820 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1219:
#line 8388 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 33826 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1220:
#line 8394 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) != NULL)
        (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
      else
        (yyval.list) = (yyvsp[-2].list);
    }
#line 33836 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1221:
#line 8400 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) != NULL)
        (yyval.list) = list_make1((yyvsp[0].node));
      else
        (yyval.list) = NIL;
    }
#line 33846 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1227:
#line 8416 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 33852 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1228:
#line 8417 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 33858 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1229:
#line 8420 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CMD_SELECT;
    }
#line 33864 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1230:
#line 8421 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CMD_UPDATE;
    }
#line 33870 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1231:
#line 8422 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CMD_DELETE;
    }
#line 33876 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1232:
#line 8423 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CMD_INSERT;
    }
#line 33882 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1233:
#line 8427 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 33888 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1234:
#line 8428 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 33894 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1235:
#line 8429 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 33900 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1236:
#line 8435 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_RULE;
      n->objects =
          list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 33915 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1237:
#line 8446 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropStmt *n = makeNode(DropStmt);
      n->removeType = OBJECT_RULE;
      n->objects =
          list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
      n->arguments = NIL;
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      n->concurrent = false;
      (yyval.node) = (Node *)n;
    }
#line 33930 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1238:
#line 8468 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      NotifyStmt *n = makeNode(NotifyStmt);
      n->conditionname = (yyvsp[-1].str);
      n->payload = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 33941 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1239:
#line 8477 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 33947 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1240:
#line 8478 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 33953 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1241:
#line 8482 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ListenStmt *n = makeNode(ListenStmt);
      n->conditionname = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 33963 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1242:
#line 8491 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      UnlistenStmt *n = makeNode(UnlistenStmt);
      n->conditionname = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 33973 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1243:
#line 8497 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      UnlistenStmt *n = makeNode(UnlistenStmt);
      n->conditionname = NULL;
      (yyval.node) = (Node *)n;
    }
#line 33983 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1244:
#line 8516 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_ROLLBACK;
      n->options = NIL;
      (yyval.node) = (Node *)n;
    }
#line 33994 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1245:
#line 8523 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_BEGIN;
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 34005 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1246:
#line 8530 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_START;
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 34016 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1247:
#line 8537 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_COMMIT;
      n->options = NIL;
      (yyval.node) = (Node *)n;
    }
#line 34027 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1248:
#line 8544 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_COMMIT;
      n->options = NIL;
      (yyval.node) = (Node *)n;
    }
#line 34038 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1249:
#line 8551 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_ROLLBACK;
      n->options = NIL;
      (yyval.node) = (Node *)n;
    }
#line 34049 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1250:
#line 8558 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_SAVEPOINT;
      n->options = list_make1(
          makeDefElem("savepoint_name", (Node *)makeString((yyvsp[0].str))));
      (yyval.node) = (Node *)n;
    }
#line 34061 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1251:
#line 8566 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_RELEASE;
      n->options = list_make1(
          makeDefElem("savepoint_name", (Node *)makeString((yyvsp[0].str))));
      (yyval.node) = (Node *)n;
    }
#line 34073 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1252:
#line 8574 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_RELEASE;
      n->options = list_make1(
          makeDefElem("savepoint_name", (Node *)makeString((yyvsp[0].str))));
      (yyval.node) = (Node *)n;
    }
#line 34085 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1253:
#line 8582 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_ROLLBACK_TO;
      n->options = list_make1(
          makeDefElem("savepoint_name", (Node *)makeString((yyvsp[0].str))));
      (yyval.node) = (Node *)n;
    }
#line 34097 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1254:
#line 8590 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_ROLLBACK_TO;
      n->options = list_make1(
          makeDefElem("savepoint_name", (Node *)makeString((yyvsp[0].str))));
      (yyval.node) = (Node *)n;
    }
#line 34109 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1255:
#line 8598 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_PREPARE;
      n->gid = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 34120 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1256:
#line 8605 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_COMMIT_PREPARED;
      n->gid = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 34131 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1257:
#line 8612 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TransactionStmt *n = makeNode(TransactionStmt);
      n->kind = TRANS_STMT_ROLLBACK_PREPARED;
      n->gid = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 34142 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1258:
#line 8620 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34148 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1259:
#line 8621 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34154 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1260:
#line 8622 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34160 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1261:
#line 8627 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("transaction_isolation",
                                   makeStringConst((yyvsp[0].str), (yylsp[0])));
    }
#line 34167 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1262:
#line 8630 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("transaction_read_only", makeIntConst(TRUE, (yylsp[-1])));
    }
#line 34174 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1263:
#line 8633 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("transaction_read_only",
                                   makeIntConst(FALSE, (yylsp[-1])));
    }
#line 34181 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1264:
#line 8636 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem("transaction_deferrable", makeIntConst(TRUE, (yylsp[0])));
    }
#line 34188 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1265:
#line 8639 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem("transaction_deferrable",
                                   makeIntConst(FALSE, (yylsp[-1])));
    }
#line 34195 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1266:
#line 8646 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 34201 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1267:
#line 8648 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
    }
#line 34207 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1268:
#line 8650 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 34213 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1270:
#line 8656 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 34219 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1271:
#line 8670 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ViewStmt *n = makeNode(ViewStmt);
      n->view = (yyvsp[-5].range);
      n->view->relpersistence = (yyvsp[-7].ival);
      n->aliases = (yyvsp[-4].list);
      n->query = (yyvsp[-1].node);
      n->replace = false;
      n->options = (yyvsp[-3].list);
      n->withCheckOption = static_cast<ViewCheckOption>((yyvsp[0].ival));
      (yyval.node) = (Node *)n;
    }
#line 34235 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1272:
#line 8683 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ViewStmt *n = makeNode(ViewStmt);
      n->view = (yyvsp[-5].range);
      n->view->relpersistence = (yyvsp[-7].ival);
      n->aliases = (yyvsp[-4].list);
      n->query = (yyvsp[-1].node);
      n->replace = true;
      n->options = (yyvsp[-3].list);
      n->withCheckOption = static_cast<ViewCheckOption>((yyvsp[0].ival));
      (yyval.node) = (Node *)n;
    }
#line 34251 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1273:
#line 8696 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ViewStmt *n = makeNode(ViewStmt);
      n->view = (yyvsp[-7].range);
      n->view->relpersistence = (yyvsp[-10].ival);
      n->aliases = (yyvsp[-5].list);
      n->query = makeRecursiveViewSelect(n->view->relname, n->aliases,
                                         (yyvsp[-1].node));
      n->replace = false;
      n->options = (yyvsp[-3].list);
      n->withCheckOption = static_cast<ViewCheckOption>((yyvsp[0].ival));
      if (n->withCheckOption != NO_CHECK_OPTION)
        ereport(ERROR,
                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                 errmsg("WITH CHECK OPTION not supported on recursive views"),
                 parser_errposition((yylsp[0]))));
      (yyval.node) = (Node *)n;
    }
#line 34272 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1274:
#line 8714 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ViewStmt *n = makeNode(ViewStmt);
      n->view = (yyvsp[-7].range);
      n->view->relpersistence = (yyvsp[-10].ival);
      n->aliases = (yyvsp[-5].list);
      n->query = makeRecursiveViewSelect(n->view->relname, n->aliases,
                                         (yyvsp[-1].node));
      n->replace = true;
      n->options = (yyvsp[-3].list);
      n->withCheckOption = static_cast<ViewCheckOption>((yyvsp[0].ival));
      if (n->withCheckOption != NO_CHECK_OPTION)
        ereport(ERROR,
                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                 errmsg("WITH CHECK OPTION not supported on recursive views"),
                 parser_errposition((yylsp[0]))));
      (yyval.node) = (Node *)n;
    }
#line 34293 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1275:
#line 8733 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CASCADED_CHECK_OPTION;
    }
#line 34299 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1276:
#line 8734 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CASCADED_CHECK_OPTION;
    }
#line 34305 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1277:
#line 8735 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = LOCAL_CHECK_OPTION;
    }
#line 34311 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1278:
#line 8736 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = NO_CHECK_OPTION;
    }
#line 34317 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1279:
#line 8747 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      LoadStmt *n = makeNode(LoadStmt);
      n->filename = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 34327 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1280:
#line 8763 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreatedbStmt *n = makeNode(CreatedbStmt);
      n->dbname = (yyvsp[-2].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 34338 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1281:
#line 8772 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 34344 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1282:
#line 8773 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 34350 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1283:
#line 8777 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 34356 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1284:
#line 8778 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
    }
#line 34362 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1285:
#line 8783 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem((yyvsp[-2].str), (Node *)makeInteger((yyvsp[0].ival)));
    }
#line 34370 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1286:
#line 8787 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) =
          makeDefElem((yyvsp[-2].str), (Node *)makeString((yyvsp[0].str)));
    }
#line 34378 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1287:
#line 8791 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[-2].str), NULL);
    }
#line 34386 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1288:
#line 8808 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 34392 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1289:
#line 8809 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup("connection_limit");
    }
#line 34398 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1290:
#line 8810 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 34404 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1291:
#line 8811 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 34410 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1292:
#line 8812 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 34416 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1293:
#line 8813 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 34422 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1294:
#line 8814 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 34428 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1295:
#line 8821 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34434 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1296:
#line 8822 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34440 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1297:
#line 8834 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDatabaseStmt *n = makeNode(AlterDatabaseStmt);
      n->dbname = (yyvsp[-2].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 34451 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1298:
#line 8841 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDatabaseStmt *n = makeNode(AlterDatabaseStmt);
      n->dbname = (yyvsp[-1].str);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 34462 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1299:
#line 8848 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDatabaseStmt *n = makeNode(AlterDatabaseStmt);
      n->dbname = (yyvsp[-3].str);
      n->options = list_make1(
          makeDefElem("tablespace", (Node *)makeString((yyvsp[0].str))));
      (yyval.node) = (Node *)n;
    }
#line 34474 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1300:
#line 8859 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDatabaseSetStmt *n = makeNode(AlterDatabaseSetStmt);
      n->dbname = (yyvsp[-1].str);
      n->setstmt = (yyvsp[0].vsetstmt);
      (yyval.node) = (Node *)n;
    }
#line 34485 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1301:
#line 8876 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropdbStmt *n = makeNode(DropdbStmt);
      n->dbname = (yyvsp[0].str);
      n->missing_ok = FALSE;
      (yyval.node) = (Node *)n;
    }
#line 34496 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1302:
#line 8883 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DropdbStmt *n = makeNode(DropdbStmt);
      n->dbname = (yyvsp[0].str);
      n->missing_ok = TRUE;
      (yyval.node) = (Node *)n;
    }
#line 34507 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1303:
#line 8901 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterSystemStmt *n = makeNode(AlterSystemStmt);
      n->setstmt = (yyvsp[0].vsetstmt);
      (yyval.node) = (Node *)n;
    }
#line 34517 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1304:
#line 8907 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterSystemStmt *n = makeNode(AlterSystemStmt);
      n->setstmt = (yyvsp[0].vsetstmt);
      (yyval.node) = (Node *)n;
    }
#line 34527 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1305:
#line 8923 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateDomainStmt *n = makeNode(CreateDomainStmt);
      n->domainname = (yyvsp[-3].list);
      n->typeName = (yyvsp[-1].typnam);
      SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
                       yyscanner);
      (yyval.node) = (Node *)n;
    }
#line 34540 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1306:
#line 8936 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDomainStmt *n = makeNode(AlterDomainStmt);
      n->subtype = 'T';
      n->typeName = (yyvsp[-1].list);
      n->def = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 34552 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1307:
#line 8945 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDomainStmt *n = makeNode(AlterDomainStmt);
      n->subtype = 'N';
      n->typeName = (yyvsp[-3].list);
      (yyval.node) = (Node *)n;
    }
#line 34563 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1308:
#line 8953 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDomainStmt *n = makeNode(AlterDomainStmt);
      n->subtype = 'O';
      n->typeName = (yyvsp[-3].list);
      (yyval.node) = (Node *)n;
    }
#line 34574 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1309:
#line 8961 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDomainStmt *n = makeNode(AlterDomainStmt);
      n->subtype = 'C';
      n->typeName = (yyvsp[-2].list);
      n->def = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 34586 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1310:
#line 8970 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDomainStmt *n = makeNode(AlterDomainStmt);
      n->subtype = 'X';
      n->typeName = (yyvsp[-4].list);
      n->name = (yyvsp[-1].str);
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 34600 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1311:
#line 8981 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDomainStmt *n = makeNode(AlterDomainStmt);
      n->subtype = 'X';
      n->typeName = (yyvsp[-6].list);
      n->name = (yyvsp[-1].str);
      n->behavior = (yyvsp[0].dbehavior);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 34614 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1312:
#line 8992 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterDomainStmt *n = makeNode(AlterDomainStmt);
      n->subtype = 'V';
      n->typeName = (yyvsp[-3].list);
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 34626 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1313:
#line 9001 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34632 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1314:
#line 9002 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34638 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1315:
#line 9014 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTSDictionaryStmt *n = makeNode(AlterTSDictionaryStmt);
      n->dictname = (yyvsp[-1].list);
      n->options = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 34649 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1316:
#line 9024 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTSConfigurationStmt *n = makeNode(AlterTSConfigurationStmt);
      n->kind = ALTER_TSCONFIG_ADD_MAPPING;
      n->cfgname = (yyvsp[-6].list);
      n->tokentype = (yyvsp[-2].list);
      n->dicts = (yyvsp[0].list);
      n->override = false;
      n->replace = false;
      (yyval.node) = (Node *)n;
    }
#line 34664 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1317:
#line 9035 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTSConfigurationStmt *n = makeNode(AlterTSConfigurationStmt);
      n->kind = ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN;
      n->cfgname = (yyvsp[-6].list);
      n->tokentype = (yyvsp[-2].list);
      n->dicts = (yyvsp[0].list);
      n->override = true;
      n->replace = false;
      (yyval.node) = (Node *)n;
    }
#line 34679 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1318:
#line 9046 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTSConfigurationStmt *n = makeNode(AlterTSConfigurationStmt);
      n->kind = ALTER_TSCONFIG_REPLACE_DICT;
      n->cfgname = (yyvsp[-6].list);
      n->tokentype = NIL;
      n->dicts = list_make2((yyvsp[-2].list), (yyvsp[0].list));
      n->override = false;
      n->replace = true;
      (yyval.node) = (Node *)n;
    }
#line 34694 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1319:
#line 9057 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTSConfigurationStmt *n = makeNode(AlterTSConfigurationStmt);
      n->kind = ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN;
      n->cfgname = (yyvsp[-8].list);
      n->tokentype = (yyvsp[-4].list);
      n->dicts = list_make2((yyvsp[-2].list), (yyvsp[0].list));
      n->override = false;
      n->replace = true;
      (yyval.node) = (Node *)n;
    }
#line 34709 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1320:
#line 9068 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTSConfigurationStmt *n = makeNode(AlterTSConfigurationStmt);
      n->kind = ALTER_TSCONFIG_DROP_MAPPING;
      n->cfgname = (yyvsp[-4].list);
      n->tokentype = (yyvsp[0].list);
      n->missing_ok = false;
      (yyval.node) = (Node *)n;
    }
#line 34722 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1321:
#line 9077 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      AlterTSConfigurationStmt *n = makeNode(AlterTSConfigurationStmt);
      n->kind = ALTER_TSCONFIG_DROP_MAPPING;
      n->cfgname = (yyvsp[-6].list);
      n->tokentype = (yyvsp[0].list);
      n->missing_ok = true;
      (yyval.node) = (Node *)n;
    }
#line 34735 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1322:
#line 9088 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34741 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1323:
#line 9089 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34747 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1324:
#line 9105 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateConversionStmt *n = makeNode(CreateConversionStmt);
      n->conversion_name = (yyvsp[-6].list);
      n->for_encoding_name = (yyvsp[-4].str);
      n->to_encoding_name = (yyvsp[-2].str);
      n->func_name = (yyvsp[0].list);
      n->def = (yyvsp[-8].boolean);
      (yyval.node) = (Node *)n;
    }
#line 34761 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1325:
#line 9127 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ClusterStmt *n = makeNode(ClusterStmt);
      n->relation = (yyvsp[-1].range);
      n->indexname = (yyvsp[0].str);
      n->verbose = (yyvsp[-2].boolean);
      (yyval.node) = (Node *)n;
    }
#line 34773 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1326:
#line 9135 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ClusterStmt *n = makeNode(ClusterStmt);
      n->relation = NULL;
      n->indexname = NULL;
      n->verbose = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 34785 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1327:
#line 9144 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ClusterStmt *n = makeNode(ClusterStmt);
      n->relation = (yyvsp[0].range);
      n->indexname = (yyvsp[-2].str);
      n->verbose = (yyvsp[-3].boolean);
      (yyval.node) = (Node *)n;
    }
#line 34797 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1328:
#line 9154 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 34803 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1329:
#line 9155 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 34809 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1330:
#line 9168 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VacuumStmt *n = makeNode(VacuumStmt);
      n->options = VACOPT_VACUUM;
      if ((yyvsp[-2].boolean)) n->options |= VACOPT_FULL;
      if ((yyvsp[-1].boolean)) n->options |= VACOPT_FREEZE;
      if ((yyvsp[0].boolean)) n->options |= VACOPT_VERBOSE;
      n->relation = NULL;
      n->va_cols = NIL;
      (yyval.node) = (Node *)n;
    }
#line 34827 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1331:
#line 9182 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VacuumStmt *n = makeNode(VacuumStmt);
      n->options = VACOPT_VACUUM;
      if ((yyvsp[-3].boolean)) n->options |= VACOPT_FULL;
      if ((yyvsp[-2].boolean)) n->options |= VACOPT_FREEZE;
      if ((yyvsp[-1].boolean)) n->options |= VACOPT_VERBOSE;
      n->relation = (yyvsp[0].range);
      n->va_cols = NIL;
      (yyval.node) = (Node *)n;
    }
#line 34845 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1332:
#line 9196 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VacuumStmt *n = (VacuumStmt *)(yyvsp[0].node);
      n->options |= VACOPT_VACUUM;
      if ((yyvsp[-3].boolean)) n->options |= VACOPT_FULL;
      if ((yyvsp[-2].boolean)) n->options |= VACOPT_FREEZE;
      if ((yyvsp[-1].boolean)) n->options |= VACOPT_VERBOSE;
      (yyval.node) = (Node *)n;
    }
#line 34861 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1333:
#line 9208 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VacuumStmt *n = makeNode(VacuumStmt);
      n->options = VACOPT_VACUUM | (yyvsp[-1].ival);
      n->relation = NULL;
      n->va_cols = NIL;
      (yyval.node) = (Node *)n;
    }
#line 34873 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1334:
#line 9216 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VacuumStmt *n = makeNode(VacuumStmt);
      n->options = VACOPT_VACUUM | (yyvsp[-3].ival);
      n->relation = (yyvsp[-1].range);
      n->va_cols = (yyvsp[0].list);
      if (n->va_cols != NIL) /* implies analyze */
        n->options |= VACOPT_ANALYZE;
      (yyval.node) = (Node *)n;
    }
#line 34887 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1335:
#line 9228 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[0].ival);
    }
#line 34893 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1336:
#line 9229 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival);
    }
#line 34899 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1337:
#line 9233 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = VACOPT_ANALYZE;
    }
#line 34905 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1338:
#line 9234 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = VACOPT_VERBOSE;
    }
#line 34911 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1339:
#line 9235 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = VACOPT_FREEZE;
    }
#line 34917 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1340:
#line 9236 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = VACOPT_FULL;
    }
#line 34923 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1341:
#line 9241 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VacuumStmt *n = makeNode(VacuumStmt);
      n->options = VACOPT_ANALYZE;
      if ((yyvsp[0].boolean)) n->options |= VACOPT_VERBOSE;
      n->relation = NULL;
      n->va_cols = NIL;
      (yyval.node) = (Node *)n;
    }
#line 34937 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1342:
#line 9251 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      VacuumStmt *n = makeNode(VacuumStmt);
      n->options = VACOPT_ANALYZE;
      if ((yyvsp[-2].boolean)) n->options |= VACOPT_VERBOSE;
      n->relation = (yyvsp[-1].range);
      n->va_cols = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 34951 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1343:
#line 9263 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34957 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1344:
#line 9264 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 34963 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1345:
#line 9268 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 34969 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1346:
#line 9269 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 34975 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1347:
#line 9272 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 34981 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1348:
#line 9273 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 34987 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1349:
#line 9276 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 34993 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1350:
#line 9277 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 34999 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1351:
#line 9281 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 35005 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1352:
#line 9282 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 35011 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1353:
#line 9296 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ExplainStmt *n = makeNode(ExplainStmt);
      n->query = (yyvsp[0].node);
      n->options = NIL;
      (yyval.node) = (Node *)n;
    }
#line 35022 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1354:
#line 9303 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ExplainStmt *n = makeNode(ExplainStmt);
      n->query = (yyvsp[0].node);
      n->options = list_make1(makeDefElem("analyze", NULL));
      if ((yyvsp[-1].boolean))
        n->options = lappend(n->options, makeDefElem("verbose", NULL));
      (yyval.node) = (Node *)n;
    }
#line 35036 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1355:
#line 9313 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ExplainStmt *n = makeNode(ExplainStmt);
      n->query = (yyvsp[0].node);
      n->options = list_make1(makeDefElem("verbose", NULL));
      (yyval.node) = (Node *)n;
    }
#line 35047 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1356:
#line 9320 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ExplainStmt *n = makeNode(ExplainStmt);
      n->query = (yyvsp[0].node);
      n->options = (yyvsp[-2].list);
      (yyval.node) = (Node *)n;
    }
#line 35058 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1366:
#line 9342 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].defelt));
    }
#line 35066 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1367:
#line 9346 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
    }
#line 35074 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1368:
#line 9353 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node));
    }
#line 35082 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1369:
#line 9359 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 35088 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1370:
#line 9360 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "analyze";
    }
#line 35094 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1371:
#line 9364 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeString((yyvsp[0].str));
    }
#line 35100 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1372:
#line 9365 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[0].value);
    }
#line 35106 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1373:
#line 9366 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 35112 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1374:
#line 9377 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      PrepareStmt *n = makeNode(PrepareStmt);
      n->name = (yyvsp[-3].str);
      n->argtypes = (yyvsp[-2].list);
      n->query = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 35124 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1375:
#line 9386 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 35130 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1376:
#line 9387 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 35136 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1381:
#line 9405 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ExecuteStmt *n = makeNode(ExecuteStmt);
      n->name = (yyvsp[-1].str);
      n->params = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 35147 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1382:
#line 9413 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CreateTableAsStmt *ctas = makeNode(CreateTableAsStmt);
      ExecuteStmt *n = makeNode(ExecuteStmt);
      n->name = (yyvsp[-2].str);
      n->params = (yyvsp[-1].list);
      ctas->query = (Node *)n;
      ctas->into = (yyvsp[-5].into);
      ctas->relkind = OBJECT_TABLE;
      ctas->is_select_into = false;
      /* cram additional flags into the IntoClause */
      (yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
      (yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
      (yyval.node) = (Node *)ctas;
    }
#line 35166 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1383:
#line 9429 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 35172 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1384:
#line 9430 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 35178 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1385:
#line 9441 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DeallocateStmt *n = makeNode(DeallocateStmt);
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 35188 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1386:
#line 9447 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DeallocateStmt *n = makeNode(DeallocateStmt);
      n->name = (yyvsp[0].str);
      (yyval.node) = (Node *)n;
    }
#line 35198 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1387:
#line 9453 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DeallocateStmt *n = makeNode(DeallocateStmt);
      n->name = NULL;
      (yyval.node) = (Node *)n;
    }
#line 35208 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1388:
#line 9459 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DeallocateStmt *n = makeNode(DeallocateStmt);
      n->name = NULL;
      (yyval.node) = (Node *)n;
    }
#line 35218 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1389:
#line 9476 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
      (yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
      (yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
      (yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
      (yyval.node) = (Node *)(yyvsp[-2].istmt);
    }
#line 35230 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1390:
#line 9493 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
    }
#line 35238 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1391:
#line 9497 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
      (yyval.range) = (yyvsp[-2].range);
    }
#line 35247 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1392:
#line 9505 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.istmt) = makeNode(InsertStmt);
      (yyval.istmt)->cols = NIL;
      (yyval.istmt)->selectStmt = (yyvsp[0].node);
    }
#line 35257 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1393:
#line 9511 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.istmt) = makeNode(InsertStmt);
      (yyval.istmt)->cols = (yyvsp[-2].list);
      (yyval.istmt)->selectStmt = (yyvsp[0].node);
    }
#line 35267 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1394:
#line 9517 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.istmt) = makeNode(InsertStmt);
      (yyval.istmt)->cols = NIL;
      (yyval.istmt)->selectStmt = NULL;
    }
#line 35277 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1395:
#line 9526 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].target));
    }
#line 35283 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1396:
#line 9528 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target));
    }
#line 35289 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1397:
#line 9533 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.target) = makeNode(ResTarget);
      (yyval.target)->name = (yyvsp[-1].str);
      (yyval.target)->indirection =
          check_indirection((yyvsp[0].list), yyscanner);
      (yyval.target)->val = NULL;
      (yyval.target)->location = (yylsp[-1]);
    }
#line 35301 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1398:
#line 9544 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.onconflict) = makeNode(OnConflictClause);
      (yyval.onconflict)->action = ONCONFLICT_UPDATE;
      (yyval.onconflict)->infer = (yyvsp[-5].infer);
      (yyval.onconflict)->targetList = (yyvsp[-1].list);
      (yyval.onconflict)->whereClause = (yyvsp[0].node);
      (yyval.onconflict)->location = (yylsp[-7]);
    }
#line 35314 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1399:
#line 9554 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.onconflict) = makeNode(OnConflictClause);
      (yyval.onconflict)->action = ONCONFLICT_NOTHING;
      (yyval.onconflict)->infer = (yyvsp[-2].infer);
      (yyval.onconflict)->targetList = NIL;
      (yyval.onconflict)->whereClause = NULL;
      (yyval.onconflict)->location = (yylsp[-4]);
    }
#line 35327 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1400:
#line 9563 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.onconflict) = NULL;
    }
#line 35335 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1401:
#line 9570 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.infer) = makeNode(InferClause);
      (yyval.infer)->indexElems = (yyvsp[-2].list);
      (yyval.infer)->whereClause = (yyvsp[0].node);
      (yyval.infer)->conname = NULL;
      (yyval.infer)->location = (yylsp[-3]);
    }
#line 35347 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1402:
#line 9579 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.infer) = makeNode(InferClause);
      (yyval.infer)->indexElems = NIL;
      (yyval.infer)->whereClause = NULL;
      (yyval.infer)->conname = (yyvsp[0].str);
      (yyval.infer)->location = (yylsp[-2]);
    }
#line 35359 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1403:
#line 9587 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.infer) = NULL;
    }
#line 35367 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1404:
#line 9593 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 35373 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1405:
#line 9594 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 35379 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1406:
#line 9607 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DeleteStmt *n = makeNode(DeleteStmt);
      n->relation = (yyvsp[-3].range);
      n->usingClause = (yyvsp[-2].list);
      n->whereClause = (yyvsp[-1].node);
      n->returningList = (yyvsp[0].list);
      n->withClause = (yyvsp[-6].with);
      (yyval.node) = (Node *)n;
    }
#line 35393 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1407:
#line 9619 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 35399 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1408:
#line 9620 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 35405 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1409:
#line 9632 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      LockStmt *n = makeNode(LockStmt);

      n->relations = (yyvsp[-2].list);
      n->mode = (yyvsp[-1].ival);
      n->nowait = (yyvsp[0].boolean);
      (yyval.node) = (Node *)n;
    }
#line 35418 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1410:
#line 9642 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[-1].ival);
    }
#line 35424 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1411:
#line 9643 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = AccessExclusiveLock;
    }
#line 35430 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1412:
#line 9646 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = AccessShareLock;
    }
#line 35436 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1413:
#line 9647 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RowShareLock;
    }
#line 35442 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1414:
#line 9648 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = RowExclusiveLock;
    }
#line 35448 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1415:
#line 9649 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ShareUpdateExclusiveLock;
    }
#line 35454 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1416:
#line 9650 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ShareLock;
    }
#line 35460 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1417:
#line 9651 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ShareRowExclusiveLock;
    }
#line 35466 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1418:
#line 9652 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ExclusiveLock;
    }
#line 35472 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1419:
#line 9653 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = AccessExclusiveLock;
    }
#line 35478 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1420:
#line 9656 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 35484 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1421:
#line 9657 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 35490 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1422:
#line 9661 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = LockWaitError;
    }
#line 35496 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1423:
#line 9662 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = LockWaitSkip;
    }
#line 35502 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1424:
#line 9663 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = LockWaitBlock;
    }
#line 35508 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1425:
#line 9679 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      UpdateStmt *n = makeNode(UpdateStmt);
      n->relation = (yyvsp[-5].range);
      n->targetList = (yyvsp[-3].list);
      n->fromClause = (yyvsp[-2].list);
      n->whereClause = (yyvsp[-1].node);
      n->returningList = (yyvsp[0].list);
      n->withClause = (yyvsp[-7].with);
      (yyval.node) = (Node *)n;
    }
#line 35523 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1426:
#line 9692 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 35529 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1427:
#line 9693 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_concat((yyvsp[-2].list), (yyvsp[0].list));
    }
#line 35535 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1428:
#line 9697 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].target));
    }
#line 35541 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1429:
#line 9698 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 35547 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1430:
#line 9703 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.target) = (yyvsp[-2].target);
      (yyval.target)->val = (Node *)(yyvsp[0].node);
    }
#line 35556 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1431:
#line 9719 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ListCell *col_cell;
      ListCell *val_cell;

      /*
       * Break the ctext_row apart, merge individual expressions
       * into the destination ResTargets.  This is semantically
       * equivalent to, and much cheaper to process than, the
       * general case.
       */
      if (list_length((yyvsp[-3].list)) != list_length((yyvsp[0].list)))
        ereport(ERROR,
                (errcode(ERRCODE_SYNTAX_ERROR),
                 errmsg("number of columns does not match number of values"),
                 parser_errposition((yylsp[0]))));
      forboth(col_cell, (yyvsp[-3].list), val_cell, (yyvsp[0].list)) {
        ResTarget *res_col = (ResTarget *)lfirst(col_cell);
        Node *res_val = (Node *)lfirst(val_cell);

        res_col->val = res_val;
      }

      (yyval.list) = (yyvsp[-3].list);
    }
#line 35586 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1432:
#line 9745 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SubLink *sl = makeNode(SubLink);
      int ncolumns = list_length((yyvsp[-3].list));
      int i = 1;
      ListCell *col_cell;

      /* First, convert bare SelectStmt into a SubLink */
      sl->subLinkType = MULTIEXPR_SUBLINK;
      sl->subLinkId = 0; /* will be assigned later */
      sl->testexpr = NULL;
      sl->operName = NIL;
      sl->subselect = (yyvsp[0].node);
      sl->location = (yylsp[0]);

      /* Create a MultiAssignRef source for each target */
      foreach (col_cell, (yyvsp[-3].list)) {
        ResTarget *res_col = (ResTarget *)lfirst(col_cell);
        MultiAssignRef *r = makeNode(MultiAssignRef);

        r->source = (Node *)sl;
        r->colno = i;
        r->ncolumns = ncolumns;
        res_col->val = (Node *)r;
        i++;
      }

      (yyval.list) = (yyvsp[-3].list);
    }
#line 35620 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1433:
#line 9778 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.target) = makeNode(ResTarget);
      (yyval.target)->name = (yyvsp[-1].str);
      (yyval.target)->indirection =
          check_indirection((yyvsp[0].list), yyscanner);
      (yyval.target)->val = NULL; /* upper production sets this */
      (yyval.target)->location = (yylsp[-1]);
    }
#line 35632 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1434:
#line 9788 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].target));
    }
#line 35638 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1435:
#line 9789 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target));
    }
#line 35644 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1436:
#line 9800 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      DeclareCursorStmt *n = makeNode(DeclareCursorStmt);
      n->portalname = (yyvsp[-5].str);
      /* currently we always set FAST_PLAN option */
      n->options = (yyvsp[-4].ival) | (yyvsp[-2].ival) | CURSOR_OPT_FAST_PLAN;
      n->query = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 35657 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1437:
#line 9810 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 35663 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1438:
#line 9813 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 35669 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1439:
#line 9814 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[-2].ival) | CURSOR_OPT_NO_SCROLL;
    }
#line 35675 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1440:
#line 9815 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[-1].ival) | CURSOR_OPT_SCROLL;
    }
#line 35681 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1441:
#line 9816 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[-1].ival) | CURSOR_OPT_BINARY;
    }
#line 35687 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1442:
#line 9817 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[-1].ival) | CURSOR_OPT_INSENSITIVE;
    }
#line 35693 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1443:
#line 9820 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 35699 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1444:
#line 9821 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = CURSOR_OPT_HOLD;
    }
#line 35705 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1445:
#line 9822 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 35711 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1448:
#line 9875 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].node);
    }
#line 35717 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1449:
#line 9876 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].node);
    }
#line 35723 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1450:
#line 9891 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 35729 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1451:
#line 9893 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      insertSelectOptions((SelectStmt *)(yyvsp[-1].node), (yyvsp[0].list), NIL,
                          NULL, NULL, NULL, yyscanner);
      (yyval.node) = (yyvsp[-1].node);
    }
#line 35740 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1452:
#line 9900 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      insertSelectOptions(
          (SelectStmt *)(yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
          static_cast<Node *>(list_nth((yyvsp[0].list), 0)),
          static_cast<Node *>(list_nth((yyvsp[0].list), 1)), NULL, yyscanner);
      (yyval.node) = (yyvsp[-3].node);
    }
#line 35752 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1453:
#line 9908 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      insertSelectOptions(
          (SelectStmt *)(yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
          static_cast<Node *>(list_nth((yyvsp[-1].list), 0)),
          static_cast<Node *>(list_nth((yyvsp[-1].list), 1)), NULL, yyscanner);
      (yyval.node) = (yyvsp[-3].node);
    }
#line 35764 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1454:
#line 9916 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      insertSelectOptions((SelectStmt *)(yyvsp[0].node), NULL, NIL, NULL, NULL,
                          (yyvsp[-1].with), yyscanner);
      (yyval.node) = (yyvsp[0].node);
    }
#line 35776 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1455:
#line 9924 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      insertSelectOptions((SelectStmt *)(yyvsp[-1].node), (yyvsp[0].list), NIL,
                          NULL, NULL, (yyvsp[-2].with), yyscanner);
      (yyval.node) = (yyvsp[-1].node);
    }
#line 35788 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1456:
#line 9932 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      insertSelectOptions((SelectStmt *)(yyvsp[-3].node), (yyvsp[-2].list),
                          (yyvsp[-1].list),
                          static_cast<Node *>(list_nth((yyvsp[0].list), 0)),
                          static_cast<Node *>(list_nth((yyvsp[0].list), 1)),
                          (yyvsp[-4].with), yyscanner);
      (yyval.node) = (yyvsp[-3].node);
    }
#line 35800 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1457:
#line 9940 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      insertSelectOptions((SelectStmt *)(yyvsp[-3].node), (yyvsp[-2].list),
                          (yyvsp[0].list),
                          static_cast<Node *>(list_nth((yyvsp[-1].list), 0)),
                          static_cast<Node *>(list_nth((yyvsp[-1].list), 1)),
                          (yyvsp[-4].with), yyscanner);
      (yyval.node) = (yyvsp[-3].node);
    }
#line 35812 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1458:
#line 9950 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 35818 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1459:
#line 9951 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 35824 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1460:
#line 9981 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SelectStmt *n = makeNode(SelectStmt);
      n->targetList = (yyvsp[-6].list);
      n->intoClause = (yyvsp[-5].into);
      n->fromClause = (yyvsp[-4].list);
      n->whereClause = (yyvsp[-3].node);
      n->groupClause = (yyvsp[-2].list);
      n->havingClause = (yyvsp[-1].node);
      n->windowClause = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 35840 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1461:
#line 9995 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SelectStmt *n = makeNode(SelectStmt);
      n->distinctClause = (yyvsp[-7].list);
      n->targetList = (yyvsp[-6].list);
      n->intoClause = (yyvsp[-5].into);
      n->fromClause = (yyvsp[-4].list);
      n->whereClause = (yyvsp[-3].node);
      n->groupClause = (yyvsp[-2].list);
      n->havingClause = (yyvsp[-1].node);
      n->windowClause = (yyvsp[0].list);
      (yyval.node) = (Node *)n;
    }
#line 35857 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1462:
#line 10007 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 35863 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1463:
#line 10009 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* same as SELECT * FROM relation_expr */
      ColumnRef *cr = makeNode(ColumnRef);
      ResTarget *rt = makeNode(ResTarget);
      SelectStmt *n = makeNode(SelectStmt);

      cr->fields = list_make1(makeNode(A_Star));
      cr->location = -1;

      rt->name = NULL;
      rt->indirection = NIL;
      rt->val = (Node *)cr;
      rt->location = -1;

      n->targetList = list_make1(rt);
      n->fromClause = list_make1((yyvsp[0].range));
      (yyval.node) = (Node *)n;
    }
#line 35886 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1464:
#line 10028 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeSetOp(SETOP_UNION, (yyvsp[-1].boolean),
                               (yyvsp[-3].node), (yyvsp[0].node));
    }
#line 35894 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1465:
#line 10032 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeSetOp(SETOP_INTERSECT, (yyvsp[-1].boolean),
                               (yyvsp[-3].node), (yyvsp[0].node));
    }
#line 35902 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1466:
#line 10036 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeSetOp(SETOP_EXCEPT, (yyvsp[-1].boolean),
                               (yyvsp[-3].node), (yyvsp[0].node));
    }
#line 35910 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1467:
#line 10053 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.with) = makeNode(WithClause);
      (yyval.with)->ctes = (yyvsp[0].list);
      (yyval.with)->recursive = false;
      (yyval.with)->location = (yylsp[-1]);
    }
#line 35921 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1468:
#line 10060 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.with) = makeNode(WithClause);
      (yyval.with)->ctes = (yyvsp[0].list);
      (yyval.with)->recursive = false;
      (yyval.with)->location = (yylsp[-1]);
    }
#line 35932 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1469:
#line 10067 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.with) = makeNode(WithClause);
      (yyval.with)->ctes = (yyvsp[0].list);
      (yyval.with)->recursive = true;
      (yyval.with)->location = (yylsp[-2]);
    }
#line 35943 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1470:
#line 10076 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 35949 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1471:
#line 10077 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 35955 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1472:
#line 10081 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CommonTableExpr *n = makeNode(CommonTableExpr);
      n->ctename = (yyvsp[-5].str);
      n->aliascolnames = (yyvsp[-4].list);
      n->ctequery = (yyvsp[-1].node);
      n->location = (yylsp[-5]);
      (yyval.node) = (Node *)n;
    }
#line 35968 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1473:
#line 10092 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.with) = (yyvsp[0].with);
    }
#line 35974 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1474:
#line 10093 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.with) = NULL;
    }
#line 35980 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1475:
#line 10098 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.into) = makeNode(IntoClause);
      (yyval.into)->rel = (yyvsp[0].range);
      (yyval.into)->colNames = NIL;
      (yyval.into)->options = NIL;
      (yyval.into)->onCommit = ONCOMMIT_NOOP;
      (yyval.into)->tableSpaceName = NULL;
      (yyval.into)->viewQuery = NULL;
      (yyval.into)->skipData = false;
    }
#line 35995 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1476:
#line 10109 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.into) = NULL;
    }
#line 36001 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1477:
#line 10118 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
    }
#line 36010 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1478:
#line 10123 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
    }
#line 36019 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1479:
#line 10128 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
    }
#line 36028 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1480:
#line 10133 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
    }
#line 36037 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1481:
#line 10138 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ereport(WARNING,
              (errmsg("GLOBAL is deprecated in temporary table creation"),
               parser_errposition((yylsp[-3]))));
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
    }
#line 36049 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1482:
#line 10146 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ereport(WARNING,
              (errmsg("GLOBAL is deprecated in temporary table creation"),
               parser_errposition((yylsp[-3]))));
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
    }
#line 36061 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1483:
#line 10154 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->relpersistence = RELPERSISTENCE_UNLOGGED;
    }
#line 36070 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1484:
#line 10159 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
    }
#line 36079 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1485:
#line 10164 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
    }
#line 36088 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1486:
#line 10170 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 36094 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1487:
#line 10171 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
    }
#line 36100 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1488:
#line 10175 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 36106 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1489:
#line 10176 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 36112 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1490:
#line 10177 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 36118 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1491:
#line 10184 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(NIL);
    }
#line 36124 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1492:
#line 10185 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 36130 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1493:
#line 10189 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 36136 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1494:
#line 10190 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 36142 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1495:
#line 10194 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 36148 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1496:
#line 10195 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 36154 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1497:
#line 10199 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 36160 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1498:
#line 10203 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].sortby));
    }
#line 36166 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1499:
#line 10204 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby));
    }
#line 36172 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1500:
#line 10208 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.sortby) = makeNode(SortBy);
      (yyval.sortby)->node = (yyvsp[-3].node);
      (yyval.sortby)->sortby_dir = SORTBY_USING;
      (yyval.sortby)->sortby_nulls = static_cast<SortByNulls>((yyvsp[0].ival));
      (yyval.sortby)->useOp = (yyvsp[-1].list);
      (yyval.sortby)->location = (yylsp[-1]);
    }
#line 36185 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1501:
#line 10217 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.sortby) = makeNode(SortBy);
      (yyval.sortby)->node = (yyvsp[-2].node);
      (yyval.sortby)->sortby_dir = static_cast<SortByDir>((yyvsp[-1].ival));
      (yyval.sortby)->sortby_nulls = static_cast<SortByNulls>((yyvsp[0].ival));
      (yyval.sortby)->useOp = NIL;
      (yyval.sortby)->location = -1; /* no operator */
    }
#line 36198 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1502:
#line 10229 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node));
    }
#line 36204 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1503:
#line 10230 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 36210 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1504:
#line 10231 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(NULL, (yyvsp[0].node));
    }
#line 36216 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1505:
#line 10232 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[0].node), NULL);
    }
#line 36222 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1506:
#line 10236 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 36228 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1507:
#line 10237 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(NULL, NULL);
    }
#line 36234 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1508:
#line 10242 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36240 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1509:
#line 10244 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* Disabled because it was too confusing, bjm 2002-02-18 */
      ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                      errmsg("LIMIT #,# syntax is not supported"),
                      errhint("Use separate LIMIT and OFFSET clauses."),
                      parser_errposition((yylsp[-3]))));
    }
#line 36253 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1510:
#line 10254 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-2].node);
    }
#line 36259 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1511:
#line 10259 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36265 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1512:
#line 10262 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].node);
    }
#line 36271 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1513:
#line 10266 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36277 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1514:
#line 10268 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* LIMIT ALL is represented as a NULL constant */
      (yyval.node) = makeNullAConst((yylsp[0]));
    }
#line 36286 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1515:
#line 10275 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36292 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1516:
#line 10285 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
    }
#line 36298 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1517:
#line 10286 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].node);
    }
#line 36304 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1518:
#line 10287 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeIntConst(1, -1);
    }
#line 36310 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1519:
#line 10295 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36316 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1520:
#line 10299 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 36322 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1521:
#line 10300 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 36328 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1522:
#line 10303 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 36334 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1523:
#line 10304 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = 0;
    }
#line 36340 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1524:
#line 10329 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 36346 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1525:
#line 10330 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 36352 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1526:
#line 10334 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 36358 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1527:
#line 10335 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 36364 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1528:
#line 10339 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36370 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1529:
#line 10340 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36376 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1530:
#line 10341 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36382 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1531:
#line 10342 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36388 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1532:
#line 10343 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36394 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1533:
#line 10348 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
    }
#line 36402 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1534:
#line 10361 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeGroupingSet(GROUPING_SET_ROLLUP,
                                             (yyvsp[-1].list), (yylsp[-3]));
    }
#line 36410 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1535:
#line 10368 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeGroupingSet(GROUPING_SET_CUBE,
                                             (yyvsp[-1].list), (yylsp[-3]));
    }
#line 36418 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1536:
#line 10375 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeGroupingSet(GROUPING_SET_SETS,
                                             (yyvsp[-1].list), (yylsp[-4]));
    }
#line 36426 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1537:
#line 10381 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36432 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1538:
#line 10382 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 36438 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1539:
#line 10386 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 36444 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1540:
#line 10387 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 36450 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1541:
#line 10391 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 36456 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1542:
#line 10392 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 36462 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1543:
#line 10396 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 36468 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1544:
#line 10397 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
    }
#line 36474 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1545:
#line 10402 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      LockingClause *n = makeNode(LockingClause);
      n->lockedRels = (yyvsp[-1].list);
      n->strength = static_cast<LockClauseStrength>((yyvsp[-2].ival));
      n->waitPolicy = static_cast<LockWaitPolicy>((yyvsp[0].ival));
      (yyval.node) = (Node *)n;
    }
#line 36486 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1546:
#line 10412 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = LCS_FORUPDATE;
    }
#line 36492 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1547:
#line 10413 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = LCS_FORNOKEYUPDATE;
    }
#line 36498 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1548:
#line 10414 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = LCS_FORSHARE;
    }
#line 36504 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1549:
#line 10415 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = LCS_FORKEYSHARE;
    }
#line 36510 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1550:
#line 10419 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 36516 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1551:
#line 10420 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 36522 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1552:
#line 10426 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SelectStmt *n = makeNode(SelectStmt);
      n->valuesLists = list_make1((yyvsp[0].list));
      (yyval.node) = (Node *)n;
    }
#line 36532 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1553:
#line 10432 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SelectStmt *n = (SelectStmt *)(yyvsp[-2].node);
      n->valuesLists = lappend(n->valuesLists, (yyvsp[0].list));
      (yyval.node) = (Node *)n;
    }
#line 36542 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1554:
#line 10449 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 36548 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1555:
#line 10450 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 36554 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1556:
#line 10454 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 36560 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1557:
#line 10455 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 36566 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1558:
#line 10462 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyvsp[-1].range)->alias = (yyvsp[0].alias);
      (yyval.node) = (Node *)(yyvsp[-1].range);
    }
#line 36575 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1559:
#line 10467 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[0].node);
    }
#line 36583 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1560:
#line 10471 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RangeFunction *n = (RangeFunction *)(yyvsp[-1].node);
      n->alias = static_cast<Alias *>(linitial((yyvsp[0].list)));
      n->coldeflist = static_cast<List *>(lsecond((yyvsp[0].list)));
      (yyval.node) = (Node *)n;
    }
#line 36594 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1561:
#line 10478 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RangeFunction *n = (RangeFunction *)(yyvsp[-1].node);
      n->lateral = true;
      n->alias = static_cast<Alias *>(linitial((yyvsp[0].list)));
      n->coldeflist = static_cast<List *>(lsecond((yyvsp[0].list)));
      (yyval.node) = (Node *)n;
    }
#line 36606 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1562:
#line 10486 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RangeSubselect *n = makeNode(RangeSubselect);
      n->lateral = false;
      n->subquery = (yyvsp[-1].node);
      n->alias = (yyvsp[0].alias);
      /*
       * The SQL spec does not permit a subselect
       * (<derived_table>) without an alias clause,
       * so we don't either.  This avoids the problem
       * of needing to invent a unique refname for it.
       * That could be surmounted if there's sufficient
       * popular demand, but for now let's just implement
       * the spec and see if anyone complains.
       * However, it does seem like a good idea to emit
       * an error message that's better than "syntax error".
       */
      if ((yyvsp[0].alias) == NULL) {
        if (IsA((yyvsp[-1].node), SelectStmt) &&
            ((SelectStmt *)(yyvsp[-1].node))->valuesLists)
          ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                          errmsg("VALUES in FROM must have an alias"),
                          errhint("For example, FROM (VALUES ...) [AS] foo."),
                          parser_errposition((yylsp[-1]))));
        else
          ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                          errmsg("subquery in FROM must have an alias"),
                          errhint("For example, FROM (SELECT ...) [AS] foo."),
                          parser_errposition((yylsp[-1]))));
      }
      (yyval.node) = (Node *)n;
    }
#line 36645 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1563:
#line 10521 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RangeSubselect *n = makeNode(RangeSubselect);
      n->lateral = true;
      n->subquery = (yyvsp[-1].node);
      n->alias = (yyvsp[0].alias);
      /* same coment as above */
      if ((yyvsp[0].alias) == NULL) {
        if (IsA((yyvsp[-1].node), SelectStmt) &&
            ((SelectStmt *)(yyvsp[-1].node))->valuesLists)
          ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                          errmsg("VALUES in FROM must have an alias"),
                          errhint("For example, FROM (VALUES ...) [AS] foo."),
                          parser_errposition((yylsp[-1]))));
        else
          ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                          errmsg("subquery in FROM must have an alias"),
                          errhint("For example, FROM (SELECT ...) [AS] foo."),
                          parser_errposition((yylsp[-1]))));
      }
      (yyval.node) = (Node *)n;
    }
#line 36674 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1564:
#line 10546 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[0].jexpr);
    }
#line 36682 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1565:
#line 10550 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
      (yyval.node) = (Node *)(yyvsp[-2].jexpr);
    }
#line 36691 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1566:
#line 10576 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.jexpr) = (yyvsp[-1].jexpr);
    }
#line 36699 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1567:
#line 10580 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* CROSS JOIN is same as unqualified inner join */
      JoinExpr *n = makeNode(JoinExpr);
      n->jointype = JOIN_INNER;
      n->isNatural = FALSE;
      n->larg = (yyvsp[-3].node);
      n->rarg = (yyvsp[0].node);
      n->usingClause = NIL;
      n->quals = NULL;
      (yyval.jexpr) = n;
    }
#line 36715 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1568:
#line 10592 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      JoinExpr *n = makeNode(JoinExpr);
      n->jointype = (yyvsp[-3].jtype);
      n->isNatural = FALSE;
      n->larg = (yyvsp[-4].node);
      n->rarg = (yyvsp[-1].node);
      if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), List))
        n->usingClause = (List *)(yyvsp[0].node); /* USING clause */
      else
        n->quals = (yyvsp[0].node); /* ON clause */
      (yyval.jexpr) = n;
    }
#line 36732 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1569:
#line 10605 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* letting join_type reduce to empty doesn't work */
      JoinExpr *n = makeNode(JoinExpr);
      n->jointype = JOIN_INNER;
      n->isNatural = FALSE;
      n->larg = (yyvsp[-3].node);
      n->rarg = (yyvsp[-1].node);
      if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), List))
        n->usingClause = (List *)(yyvsp[0].node); /* USING clause */
      else
        n->quals = (yyvsp[0].node); /* ON clause */
      (yyval.jexpr) = n;
    }
#line 36750 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1570:
#line 10619 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      JoinExpr *n = makeNode(JoinExpr);
      n->jointype = (yyvsp[-2].jtype);
      n->isNatural = TRUE;
      n->larg = (yyvsp[-4].node);
      n->rarg = (yyvsp[0].node);
      n->usingClause = NIL; /* figure out which columns later... */
      n->quals = NULL;      /* fill later */
      (yyval.jexpr) = n;
    }
#line 36765 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1571:
#line 10630 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* letting join_type reduce to empty doesn't work */
      JoinExpr *n = makeNode(JoinExpr);
      n->jointype = JOIN_INNER;
      n->isNatural = TRUE;
      n->larg = (yyvsp[-3].node);
      n->rarg = (yyvsp[0].node);
      n->usingClause = NIL; /* figure out which columns later... */
      n->quals = NULL;      /* fill later */
      (yyval.jexpr) = n;
    }
#line 36781 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1572:
#line 10645 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.alias) = makeNode(Alias);
      (yyval.alias)->aliasname = (yyvsp[-3].str);
      (yyval.alias)->colnames = (yyvsp[-1].list);
    }
#line 36791 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1573:
#line 10651 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.alias) = makeNode(Alias);
      (yyval.alias)->aliasname = (yyvsp[0].str);
    }
#line 36800 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1574:
#line 10656 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.alias) = makeNode(Alias);
      (yyval.alias)->aliasname = (yyvsp[-3].str);
      (yyval.alias)->colnames = (yyvsp[-1].list);
    }
#line 36810 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1575:
#line 10662 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.alias) = makeNode(Alias);
      (yyval.alias)->aliasname = (yyvsp[0].str);
    }
#line 36819 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1576:
#line 10668 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.alias) = (yyvsp[0].alias);
    }
#line 36825 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1577:
#line 10669 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.alias) = NULL;
    }
#line 36831 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1578:
#line 10678 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[0].alias), NIL);
    }
#line 36839 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1579:
#line 10682 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(NULL, (yyvsp[-1].list));
    }
#line 36847 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1580:
#line 10686 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Alias *a = makeNode(Alias);
      a->aliasname = (yyvsp[-3].str);
      (yyval.list) = list_make2(a, (yyvsp[-1].list));
    }
#line 36857 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1581:
#line 10692 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Alias *a = makeNode(Alias);
      a->aliasname = (yyvsp[-3].str);
      (yyval.list) = list_make2(a, (yyvsp[-1].list));
    }
#line 36867 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1582:
#line 10698 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(NULL, NIL);
    }
#line 36875 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1583:
#line 10703 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.jtype) = JOIN_FULL;
    }
#line 36881 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1584:
#line 10704 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.jtype) = JOIN_LEFT;
    }
#line 36887 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1585:
#line 10705 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.jtype) = JOIN_RIGHT;
    }
#line 36893 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1586:
#line 10706 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.jtype) = JOIN_INNER;
    }
#line 36899 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1587:
#line 10710 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 36905 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1588:
#line 10711 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 36911 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1589:
#line 10723 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[-1].list);
    }
#line 36917 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1590:
#line 10724 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 36923 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1591:
#line 10730 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* default inheritance */
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->inhOpt = INH_DEFAULT;
      (yyval.range)->alias = NULL;
    }
#line 36934 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1592:
#line 10737 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* inheritance query */
      (yyval.range) = (yyvsp[-1].range);
      (yyval.range)->inhOpt = INH_YES;
      (yyval.range)->alias = NULL;
    }
#line 36945 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1593:
#line 10744 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* no inheritance */
      (yyval.range) = (yyvsp[0].range);
      (yyval.range)->inhOpt = INH_NO;
      (yyval.range)->alias = NULL;
    }
#line 36956 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1594:
#line 10751 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* no inheritance, SQL99-style syntax */
      (yyval.range) = (yyvsp[-1].range);
      (yyval.range)->inhOpt = INH_NO;
      (yyval.range)->alias = NULL;
    }
#line 36967 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1595:
#line 10761 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].range));
    }
#line 36973 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1596:
#line 10762 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range));
    }
#line 36979 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1597:
#line 10776 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = (yyvsp[0].range);
    }
#line 36987 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1598:
#line 10780 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Alias *alias = makeNode(Alias);
      alias->aliasname = (yyvsp[0].str);
      (yyvsp[-1].range)->alias = alias;
      (yyval.range) = (yyvsp[-1].range);
    }
#line 36998 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1599:
#line 10787 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      Alias *alias = makeNode(Alias);
      alias->aliasname = (yyvsp[0].str);
      (yyvsp[-2].range)->alias = alias;
      (yyval.range) = (yyvsp[-2].range);
    }
#line 37009 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1600:
#line 10797 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RangeTableSample *n = (RangeTableSample *)(yyvsp[0].node);
      n->relation = (yyvsp[-2].range);
      n->relation->alias = (yyvsp[-1].alias);
      (yyval.node) = (Node *)n;
    }
#line 37020 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1601:
#line 10807 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RangeTableSample *n = makeNode(RangeTableSample);
      n->method = (yyvsp[-4].str);
      n->args = (yyvsp[-2].list);
      n->repeatable = (yyvsp[0].node);
      (yyval.node) = (Node *)n;
    }
#line 37032 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1602:
#line 10817 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[-1].node);
    }
#line 37038 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1603:
#line 10818 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 37044 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1604:
#line 10834 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RangeFunction *n = makeNode(RangeFunction);
      n->lateral = false;
      n->ordinality = (yyvsp[0].boolean);
      n->is_rowsfrom = false;
      n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
      /* alias and coldeflist are set by table_ref production */
      (yyval.node) = (Node *)n;
    }
#line 37058 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1605:
#line 10844 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RangeFunction *n = makeNode(RangeFunction);
      n->lateral = false;
      n->ordinality = (yyvsp[0].boolean);
      n->is_rowsfrom = true;
      n->functions = (yyvsp[-2].list);
      /* alias and coldeflist are set by table_ref production */
      (yyval.node) = (Node *)n;
    }
#line 37072 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1606:
#line 10856 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list));
    }
#line 37078 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1607:
#line 10860 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].list));
    }
#line 37084 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1608:
#line 10861 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list));
    }
#line 37090 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1609:
#line 10864 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 37096 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1610:
#line 10865 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 37102 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1611:
#line 10868 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = true;
    }
#line 37108 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1612:
#line 10869 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = false;
    }
#line 37114 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1613:
#line 10874 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 37120 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1614:
#line 10875 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 37126 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1615:
#line 10880 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 37132 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1616:
#line 10882 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CurrentOfExpr *n = makeNode(CurrentOfExpr);
      /* cvarno is filled in by parse analysis */
      n->cursor_name = (yyvsp[0].str);
      n->cursor_param = 0;
      (yyval.node) = (Node *)n;
    }
#line 37144 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1617:
#line 10889 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 37150 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1618:
#line 10894 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 37156 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1619:
#line 10895 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 37162 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1620:
#line 10900 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 37170 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1621:
#line 10904 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 37178 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1622:
#line 10910 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ColumnDef *n = makeNode(ColumnDef);
      n->colname = (yyvsp[-2].str);
      n->typeName = (yyvsp[-1].typnam);
      n->inhcount = 0;
      n->is_local = true;
      n->is_not_null = false;
      n->is_from_type = false;
      n->storage = 0;
      n->raw_default = NULL;
      n->cooked_default = NULL;
      n->collClause = (CollateClause *)(yyvsp[0].node);
      n->collOid = InvalidOid;
      n->constraints = NIL;
      n->location = (yylsp[-2]);
      (yyval.node) = (Node *)n;
    }
#line 37200 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1623:
#line 10940 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[-1].typnam);
      (yyval.typnam)->arrayBounds = (yyvsp[0].list);
    }
#line 37209 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1624:
#line 10945 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[-1].typnam);
      (yyval.typnam)->arrayBounds = (yyvsp[0].list);
      (yyval.typnam)->setof = TRUE;
    }
#line 37219 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1625:
#line 10952 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[-4].typnam);
      (yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
    }
#line 37228 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1626:
#line 10957 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[-4].typnam);
      (yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
      (yyval.typnam)->setof = TRUE;
    }
#line 37238 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1627:
#line 10963 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[-1].typnam);
      (yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
    }
#line 37247 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1628:
#line 10968 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[-1].typnam);
      (yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
      (yyval.typnam)->setof = TRUE;
    }
#line 37257 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1629:
#line 10977 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1));
    }
#line 37263 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1630:
#line 10979 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival)));
    }
#line 37269 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1631:
#line 10981 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 37275 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1632:
#line 10985 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37281 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1633:
#line 10986 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37287 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1634:
#line 10987 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37293 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1635:
#line 10988 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37299 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1636:
#line 10989 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37305 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1637:
#line 10991 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[-1].typnam);
      (yyval.typnam)->typmods = (yyvsp[0].list);
    }
#line 37314 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1638:
#line 10996 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[-3].typnam);
      (yyval.typnam)->typmods =
          list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
                     makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
    }
#line 37324 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1639:
#line 11015 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37330 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1640:
#line 11016 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37336 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1641:
#line 11017 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37342 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1642:
#line 11018 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37348 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1643:
#line 11030 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = makeTypeName((yyvsp[-1].str));
      (yyval.typnam)->typmods = (yyvsp[0].list);
      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37358 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1644:
#line 11036 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = makeTypeNameFromNameList(
          lcons(makeString((yyvsp[-2].str)), (yyvsp[-1].list)));
      (yyval.typnam)->typmods = (yyvsp[0].list);
      (yyval.typnam)->location = (yylsp[-2]);
    }
#line 37368 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1645:
#line 11043 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 37374 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1646:
#line 11044 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 37380 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1647:
#line 11051 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("int4");
      (yyval.typnam)->location = (yylsp[0]);
    }
#line 37389 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1648:
#line 11056 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("int4");
      (yyval.typnam)->location = (yylsp[0]);
    }
#line 37398 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1649:
#line 11061 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("int2");
      (yyval.typnam)->location = (yylsp[0]);
    }
#line 37407 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1650:
#line 11066 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("int8");
      (yyval.typnam)->location = (yylsp[0]);
    }
#line 37416 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1651:
#line 11071 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("float4");
      (yyval.typnam)->location = (yylsp[0]);
    }
#line 37425 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1652:
#line 11076 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37434 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1653:
#line 11081 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("float8");
      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37443 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1654:
#line 11086 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("numeric");
      (yyval.typnam)->typmods = (yyvsp[0].list);
      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37453 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1655:
#line 11092 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("numeric");
      (yyval.typnam)->typmods = (yyvsp[0].list);
      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37463 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1656:
#line 11098 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("numeric");
      (yyval.typnam)->typmods = (yyvsp[0].list);
      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37473 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1657:
#line 11104 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("bool");
      (yyval.typnam)->location = (yylsp[0]);
    }
#line 37482 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1658:
#line 11111 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Check FLOAT() precision limits assuming IEEE floating
       * types - thomas 1997-09-18
       */
      if ((yyvsp[-1].ival) < 1)
        ereport(ERROR,
                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                 errmsg("precision for type float must be at least 1 bit"),
                 parser_errposition((yylsp[-1]))));
      else if ((yyvsp[-1].ival) <= 24)
        (yyval.typnam) = SystemTypeName("float4");
      else if ((yyvsp[-1].ival) <= 53)
        (yyval.typnam) = SystemTypeName("float8");
      else
        ereport(ERROR,
                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                 errmsg("precision for type float must be less than 54 bits"),
                 parser_errposition((yylsp[-1]))));
    }
#line 37507 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1659:
#line 11132 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("float8");
    }
#line 37515 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1660:
#line 11142 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37523 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1661:
#line 11146 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37531 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1662:
#line 11154 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37539 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1663:
#line 11158 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
      (yyval.typnam)->typmods = NIL;
    }
#line 37548 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1664:
#line 11166 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      char *typname;

      typname = (yyvsp[-3].boolean) ? static_cast<char *>("varbit")
                                    : static_cast<char *>("bit");
      (yyval.typnam) = SystemTypeName(typname);
      (yyval.typnam)->typmods = (yyvsp[-1].list);
      (yyval.typnam)->location = (yylsp[-4]);
    }
#line 37561 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1665:
#line 11178 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* bit defaults to bit(1), varbit to no limit */
      if ((yyvsp[0].boolean)) {
        (yyval.typnam) = SystemTypeName("varbit");
      } else {
        (yyval.typnam) = SystemTypeName("bit");
        (yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
      }
      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37579 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1666:
#line 11199 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37587 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1667:
#line 11203 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37595 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1668:
#line 11209 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = (yyvsp[0].typnam);
    }
#line 37603 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1669:
#line 11213 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* Length was not specified so allow to be unrestricted.
       * This handles problems with fixed-length (bpchar) strings
       * which in column definitions must default to a length
       * of one, but should not be constrained if the length
       * was not specified.
       */
      (yyval.typnam) = (yyvsp[0].typnam);
      (yyval.typnam)->typmods = NIL;
    }
#line 37618 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1670:
#line 11226 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if (((yyvsp[0].str) != NULL) && (strcmp((yyvsp[0].str), "sql_text") != 0))
        (yyvsp[-4].str) = psprintf("%s_%s", (yyvsp[-4].str), (yyvsp[0].str));

      (yyval.typnam) = SystemTypeName((yyvsp[-4].str));
      (yyval.typnam)->typmods =
          list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
      (yyval.typnam)->location = (yylsp[-4]);
    }
#line 37631 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1671:
#line 11237 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if (((yyvsp[0].str) != NULL) && (strcmp((yyvsp[0].str), "sql_text") != 0))
        (yyvsp[-1].str) = psprintf("%s_%s", (yyvsp[-1].str), (yyvsp[0].str));

      (yyval.typnam) = SystemTypeName((yyvsp[-1].str));

      /* char defaults to char(1), varchar to no limit */
      if (strcmp((yyvsp[-1].str), "bpchar") == 0)
        (yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));

      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37648 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1672:
#line 11252 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].boolean) ? static_cast<char *>("varchar")
                                       : static_cast<char *>("bpchar");
    }
#line 37654 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1673:
#line 11254 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].boolean) ? static_cast<char *>("varchar")
                                       : static_cast<char *>("bpchar");
    }
#line 37660 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1674:
#line 11256 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = static_cast<char *>("varchar");
    }
#line 37666 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1675:
#line 11258 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].boolean) ? static_cast<char *>("varchar")
                                       : static_cast<char *>("bpchar");
    }
#line 37672 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1676:
#line 11260 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].boolean) ? static_cast<char *>("varchar")
                                       : static_cast<char *>("bpchar");
    }
#line 37678 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1677:
#line 11262 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].boolean) ? static_cast<char *>("varchar")
                                       : static_cast<char *>("bpchar");
    }
#line 37684 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1678:
#line 11266 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 37690 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1679:
#line 11267 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 37696 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1680:
#line 11271 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 37702 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1681:
#line 11272 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 37708 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1682:
#line 11280 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[0].boolean))
        (yyval.typnam) = SystemTypeName("timestamptz");
      else
        (yyval.typnam) = SystemTypeName("timestamp");
      (yyval.typnam)->typmods =
          list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
      (yyval.typnam)->location = (yylsp[-4]);
    }
#line 37721 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1683:
#line 11289 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[0].boolean))
        (yyval.typnam) = SystemTypeName("timestamptz");
      else
        (yyval.typnam) = SystemTypeName("timestamp");
      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37733 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1684:
#line 11297 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[0].boolean))
        (yyval.typnam) = SystemTypeName("timetz");
      else
        (yyval.typnam) = SystemTypeName("time");
      (yyval.typnam)->typmods =
          list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
      (yyval.typnam)->location = (yylsp[-4]);
    }
#line 37746 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1685:
#line 11306 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[0].boolean))
        (yyval.typnam) = SystemTypeName("timetz");
      else
        (yyval.typnam) = SystemTypeName("time");
      (yyval.typnam)->location = (yylsp[-1]);
    }
#line 37758 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1686:
#line 11317 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.typnam) = SystemTypeName("interval");
      (yyval.typnam)->location = (yylsp[0]);
    }
#line 37767 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1687:
#line 11324 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 37773 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1688:
#line 11325 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 37779 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1689:
#line 11326 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 37785 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1690:
#line 11331 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0])));
    }
#line 37791 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1691:
#line 11333 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0])));
    }
#line 37797 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1692:
#line 11335 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0])));
    }
#line 37803 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1693:
#line 11337 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0])));
    }
#line 37809 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1694:
#line 11339 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) =
          list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0])));
    }
#line 37815 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1695:
#line 11341 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 37821 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1696:
#line 11343 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeIntConst(
          INTERVAL_MASK(YEAR) | INTERVAL_MASK(MONTH), (yylsp[-2])));
    }
#line 37830 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1697:
#line 11348 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(
          makeIntConst(INTERVAL_MASK(DAY) | INTERVAL_MASK(HOUR), (yylsp[-2])));
    }
#line 37839 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1698:
#line 11353 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeIntConst(
          INTERVAL_MASK(DAY) | INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE),
          (yylsp[-2])));
    }
#line 37849 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1699:
#line 11359 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
      linitial((yyval.list)) =
          makeIntConst(INTERVAL_MASK(DAY) | INTERVAL_MASK(HOUR) |
                           INTERVAL_MASK(MINUTE) | INTERVAL_MASK(SECOND),
                       (yylsp[-2]));
    }
#line 37861 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1700:
#line 11367 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeIntConst(
          INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE), (yylsp[-2])));
    }
#line 37870 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1701:
#line 11372 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
      linitial((yyval.list)) = makeIntConst(
          INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE) | INTERVAL_MASK(SECOND),
          (yylsp[-2]));
    }
#line 37881 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1702:
#line 11379 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
      linitial((yyval.list)) = makeIntConst(
          INTERVAL_MASK(MINUTE) | INTERVAL_MASK(SECOND), (yylsp[-2]));
    }
#line 37891 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1703:
#line 11385 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 37897 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1704:
#line 11390 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) =
          list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0])));
    }
#line 37905 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1705:
#line 11394 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) =
          list_make2(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[-3])),
                     makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
    }
#line 37914 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1706:
#line 11429 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 37920 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1707:
#line 11431 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1]));
    }
#line 37926 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1708:
#line 11433 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CollateClause *n = makeNode(CollateClause);
      n->arg = (yyvsp[-2].node);
      n->collname = (yyvsp[0].list);
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 37938 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1709:
#line 11441 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeFuncCall(
          SystemFuncName("timezone"),
          list_make2((yyvsp[0].node), (yyvsp[-4].node)), (yylsp[-3]));
    }
#line 37948 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1710:
#line 11456 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "+", NULL,
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 37954 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1711:
#line 11458 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1]));
    }
#line 37960 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1712:
#line 11460 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "+", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 37966 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1713:
#line 11462 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "-", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 37972 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1714:
#line 11464 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "*", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 37978 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1715:
#line 11466 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "/", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 37984 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1716:
#line 11468 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "%", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 37990 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1717:
#line 11470 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "^", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 37996 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1718:
#line 11472 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "<", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38002 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1719:
#line 11474 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, ">", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38008 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1720:
#line 11476 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "=", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38014 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1721:
#line 11478 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "<=", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38020 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1722:
#line 11480 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, ">=", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38026 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1723:
#line 11482 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "<>", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38032 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1724:
#line 11485 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeA_Expr(AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node),
                             (yyvsp[0].node), (yylsp[-1]));
    }
#line 38038 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1725:
#line 11487 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeA_Expr(AEXPR_OP, (yyvsp[-1].list), NULL,
                                        (yyvsp[0].node), (yylsp[-1]));
    }
#line 38044 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1726:
#line 11489 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeA_Expr(AEXPR_OP, (yyvsp[0].list),
                                        (yyvsp[-1].node), NULL, (yylsp[0]));
    }
#line 38050 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1727:
#line 11492 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
    }
#line 38056 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1728:
#line 11494 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
    }
#line 38062 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1729:
#line 11496 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1]));
    }
#line 38068 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1730:
#line 11498 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1]));
    }
#line 38074 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1731:
#line 11501 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_LIKE, "~~", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
    }
#line 38083 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1732:
#line 11506 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
                                 list_make2((yyvsp[-2].node), (yyvsp[0].node)),
                                 (yylsp[-3]));
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_LIKE, "~~", (yyvsp[-4].node), (Node *)n, (yylsp[-3]));
    }
#line 38095 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1733:
#line 11514 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_LIKE, "!~~", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
    }
#line 38104 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1734:
#line 11519 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
                                 list_make2((yyvsp[-2].node), (yyvsp[0].node)),
                                 (yylsp[-4]));
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_LIKE, "!~~", (yyvsp[-5].node), (Node *)n, (yylsp[-4]));
    }
#line 38116 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1735:
#line 11527 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_ILIKE, "~~*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
    }
#line 38125 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1736:
#line 11532 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
                                 list_make2((yyvsp[-2].node), (yyvsp[0].node)),
                                 (yylsp[-3]));
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_ILIKE, "~~*", (yyvsp[-4].node), (Node *)n, (yylsp[-3]));
    }
#line 38137 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1737:
#line 11540 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_ILIKE, "!~~*", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
    }
#line 38146 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1738:
#line 11545 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
                                 list_make2((yyvsp[-2].node), (yyvsp[0].node)),
                                 (yylsp[-4]));
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_ILIKE, "!~~*", (yyvsp[-5].node), (Node *)n, (yylsp[-4]));
    }
#line 38158 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1739:
#line 11554 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall(
          SystemFuncName("similar_escape"),
          list_make2((yyvsp[0].node), makeNullAConst(-1)), (yylsp[-2]));
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_SIMILAR, "~", (yyvsp[-3].node), (Node *)n, (yylsp[-2]));
    }
#line 38170 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1740:
#line 11562 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
                                 list_make2((yyvsp[-2].node), (yyvsp[0].node)),
                                 (yylsp[-4]));
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_SIMILAR, "~", (yyvsp[-5].node), (Node *)n, (yylsp[-4]));
    }
#line 38182 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1741:
#line 11570 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall(
          SystemFuncName("similar_escape"),
          list_make2((yyvsp[0].node), makeNullAConst(-1)), (yylsp[-3]));
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_SIMILAR, "!~", (yyvsp[-4].node), (Node *)n, (yylsp[-3]));
    }
#line 38194 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1742:
#line 11578 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
                                 list_make2((yyvsp[-2].node), (yyvsp[0].node)),
                                 (yylsp[-5]));
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_SIMILAR, "!~", (yyvsp[-6].node), (Node *)n, (yylsp[-5]));
    }
#line 38206 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1743:
#line 11596 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      NullTest *n = makeNode(NullTest);
      n->arg = (Expr *)(yyvsp[-2].node);
      n->nulltesttype = IS_NULL;
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 38218 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1744:
#line 11604 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      NullTest *n = makeNode(NullTest);
      n->arg = (Expr *)(yyvsp[-1].node);
      n->nulltesttype = IS_NULL;
      n->location = (yylsp[0]);
      (yyval.node) = (Node *)n;
    }
#line 38230 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1745:
#line 11612 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      NullTest *n = makeNode(NullTest);
      n->arg = (Expr *)(yyvsp[-3].node);
      n->nulltesttype = IS_NOT_NULL;
      n->location = (yylsp[-2]);
      (yyval.node) = (Node *)n;
    }
#line 38242 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1746:
#line 11620 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      NullTest *n = makeNode(NullTest);
      n->arg = (Expr *)(yyvsp[-1].node);
      n->nulltesttype = IS_NOT_NULL;
      n->location = (yylsp[0]);
      (yyval.node) = (Node *)n;
    }
#line 38254 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1747:
#line 11628 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if (list_length((yyvsp[-2].list)) != 2)
        ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg(
                            "wrong number of parameters on left side of "
                            "OVERLAPS expression"),
                        parser_errposition((yylsp[-2]))));
      if (list_length((yyvsp[0].list)) != 2)
        ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg(
                            "wrong number of parameters on right side of "
                            "OVERLAPS expression"),
                        parser_errposition((yylsp[0]))));
      (yyval.node) = (Node *)makeFuncCall(
          SystemFuncName("overlaps"),
          list_concat((yyvsp[-2].list), (yyvsp[0].list)), (yylsp[-1]));
    }
#line 38274 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1748:
#line 11644 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      BooleanTest *b = makeNode(BooleanTest);
      b->arg = (Expr *)(yyvsp[-2].node);
      b->booltesttype = IS_TRUE;
      b->location = (yylsp[-1]);
      (yyval.node) = (Node *)b;
    }
#line 38286 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1749:
#line 11652 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      BooleanTest *b = makeNode(BooleanTest);
      b->arg = (Expr *)(yyvsp[-3].node);
      b->booltesttype = IS_NOT_TRUE;
      b->location = (yylsp[-2]);
      (yyval.node) = (Node *)b;
    }
#line 38298 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1750:
#line 11660 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      BooleanTest *b = makeNode(BooleanTest);
      b->arg = (Expr *)(yyvsp[-2].node);
      b->booltesttype = IS_FALSE;
      b->location = (yylsp[-1]);
      (yyval.node) = (Node *)b;
    }
#line 38310 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1751:
#line 11668 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      BooleanTest *b = makeNode(BooleanTest);
      b->arg = (Expr *)(yyvsp[-3].node);
      b->booltesttype = IS_NOT_FALSE;
      b->location = (yylsp[-2]);
      (yyval.node) = (Node *)b;
    }
#line 38322 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1752:
#line 11676 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      BooleanTest *b = makeNode(BooleanTest);
      b->arg = (Expr *)(yyvsp[-2].node);
      b->booltesttype = IS_UNKNOWN;
      b->location = (yylsp[-1]);
      (yyval.node) = (Node *)b;
    }
#line 38334 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1753:
#line 11684 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      BooleanTest *b = makeNode(BooleanTest);
      b->arg = (Expr *)(yyvsp[-3].node);
      b->booltesttype = IS_NOT_UNKNOWN;
      b->location = (yylsp[-2]);
      (yyval.node) = (Node *)b;
    }
#line 38346 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1754:
#line 11692 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
    }
#line 38354 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1755:
#line 11696 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeNotExpr(
          (Node *)makeSimpleA_Expr(AEXPR_DISTINCT, "=", (yyvsp[-5].node),
                                   (yyvsp[0].node), (yylsp[-4])),
          (yylsp[-4]));
    }
#line 38364 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1756:
#line 11702 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeSimpleA_Expr(AEXPR_OF, "=", (yyvsp[-5].node),
                                   (Node *)(yyvsp[-1].list), (yylsp[-4]));
    }
#line 38372 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1757:
#line 11706 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeSimpleA_Expr(AEXPR_OF, "<>", (yyvsp[-6].node),
                                   (Node *)(yyvsp[-1].list), (yylsp[-5]));
    }
#line 38380 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1758:
#line 11710 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_BETWEEN, "BETWEEN", (yyvsp[-5].node),
          (Node *)list_make2((yyvsp[-2].node), (yyvsp[0].node)), (yylsp[-4]));
    }
#line 38392 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1759:
#line 11718 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_NOT_BETWEEN, "NOT BETWEEN", (yyvsp[-6].node),
          (Node *)list_make2((yyvsp[-2].node), (yyvsp[0].node)), (yylsp[-5]));
    }
#line 38404 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1760:
#line 11726 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_BETWEEN_SYM, "BETWEEN SYMMETRIC", (yyvsp[-5].node),
          (Node *)list_make2((yyvsp[-2].node), (yyvsp[0].node)), (yylsp[-4]));
    }
#line 38416 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1761:
#line 11734 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_NOT_BETWEEN_SYM, "NOT BETWEEN SYMMETRIC", (yyvsp[-6].node),
          (Node *)list_make2((yyvsp[-2].node), (yyvsp[0].node)), (yylsp[-5]));
    }
#line 38428 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1762:
#line 11742 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* in_expr returns a SubLink or a list of a_exprs */
      if (IsA((yyvsp[0].node), SubLink)) {
        /* generate foo = ANY (subquery) */
        SubLink *n = (SubLink *)(yyvsp[0].node);
        n->subLinkType = ANY_SUBLINK;
        n->subLinkId = 0;
        n->testexpr = (yyvsp[-2].node);
        n->operName = NIL; /* show it's IN not = ANY */
        n->location = (yylsp[-1]);
        (yyval.node) = (Node *)n;
      } else {
        /* generate scalar IN expression */
        (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_IN, "=", (yyvsp[-2].node),
                                                (yyvsp[0].node), (yylsp[-1]));
      }
    }
#line 38452 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1763:
#line 11762 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* in_expr returns a SubLink or a list of a_exprs */
      if (IsA((yyvsp[0].node), SubLink)) {
        /* generate NOT (foo = ANY (subquery)) */
        /* Make an = ANY node */
        SubLink *n = (SubLink *)(yyvsp[0].node);
        n->subLinkType = ANY_SUBLINK;
        n->subLinkId = 0;
        n->testexpr = (yyvsp[-3].node);
        n->operName = NIL; /* show it's IN not = ANY */
        n->location = (yylsp[-2]);
        /* Stick a NOT on top; must have same parse location */
        (yyval.node) = makeNotExpr((Node *)n, (yylsp[-2]));
      } else {
        /* generate scalar NOT IN expression */
        (yyval.node) = (Node *)makeSimpleA_Expr(
            AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
      }
    }
#line 38478 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1764:
#line 11784 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SubLink *n = makeNode(SubLink);
      n->subLinkType = static_cast<SubLinkType>((yyvsp[-1].ival));
      n->subLinkId = 0;
      n->testexpr = (yyvsp[-3].node);
      n->operName = (yyvsp[-2].list);
      n->subselect = (yyvsp[0].node);
      n->location = (yylsp[-2]);
      (yyval.node) = (Node *)n;
    }
#line 38493 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1765:
#line 11795 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[-3].ival) == ANY_SUBLINK)
        (yyval.node) =
            (Node *)makeA_Expr(AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node),
                               (yyvsp[-1].node), (yylsp[-4]));
      else
        (yyval.node) =
            (Node *)makeA_Expr(AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node),
                               (yyvsp[-1].node), (yylsp[-4]));
    }
#line 38504 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1766:
#line 11802 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* Not sure how to get rid of the parentheses
       * but there are lots of shift/reduce errors without them.
       *
       * Should be able to implement this by plopping the entire
       * select into a node, then transforming the target expressions
       * from whatever they are into count(*), and testing the
       * entire result equal to one.
       * But, will probably implement a separate node in the executor.
       */
      ereport(ERROR, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                      errmsg("UNIQUE predicate is not yet implemented"),
                      parser_errposition((yylsp[-1]))));
    }
#line 38524 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1767:
#line 11818 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeXmlExpr(IS_DOCUMENT, NULL, NIL,
                                 list_make1((yyvsp[-2].node)), (yylsp[-1]));
    }
#line 38533 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1768:
#line 11823 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeNotExpr(makeXmlExpr(IS_DOCUMENT, NULL, NIL,
                                  list_make1((yyvsp[-3].node)), (yylsp[-2])),
                      (yylsp[-2]));
    }
#line 38543 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1769:
#line 11840 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 38549 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1770:
#line 11842 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1]));
    }
#line 38555 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1771:
#line 11844 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "+", NULL,
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38561 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1772:
#line 11846 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1]));
    }
#line 38567 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1773:
#line 11848 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "+", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38573 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1774:
#line 11850 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "-", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38579 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1775:
#line 11852 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "*", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38585 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1776:
#line 11854 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "/", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38591 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1777:
#line 11856 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "%", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38597 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1778:
#line 11858 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "^", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38603 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1779:
#line 11860 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "<", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38609 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1780:
#line 11862 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, ">", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38615 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1781:
#line 11864 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "=", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38621 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1782:
#line 11866 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "<=", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38627 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1783:
#line 11868 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, ">=", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38633 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1784:
#line 11870 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(AEXPR_OP, "<>", (yyvsp[-2].node),
                                              (yyvsp[0].node), (yylsp[-1]));
    }
#line 38639 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1785:
#line 11872 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeA_Expr(AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node),
                             (yyvsp[0].node), (yylsp[-1]));
    }
#line 38645 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1786:
#line 11874 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeA_Expr(AEXPR_OP, (yyvsp[-1].list), NULL,
                                        (yyvsp[0].node), (yylsp[-1]));
    }
#line 38651 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1787:
#line 11876 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeA_Expr(AEXPR_OP, (yyvsp[0].list),
                                        (yyvsp[-1].node), NULL, (yylsp[0]));
    }
#line 38657 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1788:
#line 11878 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
    }
#line 38665 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1789:
#line 11882 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeNotExpr(
          (Node *)makeSimpleA_Expr(AEXPR_DISTINCT, "=", (yyvsp[-5].node),
                                   (yyvsp[0].node), (yylsp[-4])),
          (yylsp[-4]));
    }
#line 38675 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1790:
#line 11888 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeSimpleA_Expr(AEXPR_OF, "=", (yyvsp[-5].node),
                                   (Node *)(yyvsp[-1].list), (yylsp[-4]));
    }
#line 38683 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1791:
#line 11892 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeSimpleA_Expr(AEXPR_OF, "<>", (yyvsp[-6].node),
                                   (Node *)(yyvsp[-1].list), (yylsp[-5]));
    }
#line 38691 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1792:
#line 11896 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeXmlExpr(IS_DOCUMENT, NULL, NIL,
                                 list_make1((yyvsp[-2].node)), (yylsp[-1]));
    }
#line 38700 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1793:
#line 11901 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeNotExpr(makeXmlExpr(IS_DOCUMENT, NULL, NIL,
                                  list_make1((yyvsp[-3].node)), (yylsp[-2])),
                      (yylsp[-2]));
    }
#line 38710 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1794:
#line 11916 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 38716 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1795:
#line 11917 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 38722 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1796:
#line 11919 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ParamRef *p = makeNode(ParamRef);
      p->number = (yyvsp[-1].ival);
      p->location = (yylsp[-1]);
      if ((yyvsp[0].list)) {
        A_Indirection *n = makeNode(A_Indirection);
        n->arg = (Node *)p;
        n->indirection = check_indirection((yyvsp[0].list), yyscanner);
        (yyval.node) = (Node *)n;
      } else
        (yyval.node) = (Node *)p;
    }
#line 38741 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1797:
#line 11934 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      if ((yyvsp[0].list)) {
        A_Indirection *n = makeNode(A_Indirection);
        n->arg = (yyvsp[-2].node);
        n->indirection = check_indirection((yyvsp[0].list), yyscanner);
        (yyval.node) = (Node *)n;
      } else if (operator_precedence_warning) {
        /*
         * If precedence warnings are enabled, insert
         * AEXPR_PAREN nodes wrapping all explicitly
         * parenthesized subexpressions; this prevents bogus
         * warnings from being issued when the ordering has
         * been forced by parentheses.
         *
         * In principle we should not be relying on a GUC to
         * decide whether to insert AEXPR_PAREN nodes.
         * However, since they have no effect except to
         * suppress warnings, it's probably safe enough; and
         * we'd just as soon not waste cycles on dummy parse
         * nodes if we don't have to.
         */
        (yyval.node) = (Node *)makeA_Expr(AEXPR_PAREN, NIL, (yyvsp[-2].node),
                                          NULL, (yylsp[-3]));
      } else
        (yyval.node) = (yyvsp[-2].node);
    }
#line 38775 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1798:
#line 11964 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 38781 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1799:
#line 11966 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 38787 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1800:
#line 11968 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SubLink *n = makeNode(SubLink);
      n->subLinkType = EXPR_SUBLINK;
      n->subLinkId = 0;
      n->testexpr = NULL;
      n->operName = NIL;
      n->subselect = (yyvsp[0].node);
      n->location = (yylsp[0]);
      (yyval.node) = (Node *)n;
    }
#line 38802 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1801:
#line 11979 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Because the select_with_parens nonterminal is designed
       * to "eat" as many levels of parens as possible, the
       * '(' a_expr ')' opt_indirection production above will
       * fail to match a sub-SELECT with indirection decoration;
       * the sub-SELECT won't be regarded as an a_expr as long
       * as there are parens around it.  To support applying
       * subscripting or field selection to a sub-SELECT result,
       * we need this redundant-looking production.
       */
      SubLink *n = makeNode(SubLink);
      A_Indirection *a = makeNode(A_Indirection);
      n->subLinkType = EXPR_SUBLINK;
      n->subLinkId = 0;
      n->testexpr = NULL;
      n->operName = NIL;
      n->subselect = (yyvsp[-1].node);
      n->location = (yylsp[-1]);
      a->arg = (Node *)n;
      a->indirection = check_indirection((yyvsp[0].list), yyscanner);
      (yyval.node) = (Node *)a;
    }
#line 38830 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1802:
#line 12003 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SubLink *n = makeNode(SubLink);
      n->subLinkType = EXISTS_SUBLINK;
      n->subLinkId = 0;
      n->testexpr = NULL;
      n->operName = NIL;
      n->subselect = (yyvsp[0].node);
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 38845 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1803:
#line 12014 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SubLink *n = makeNode(SubLink);
      n->subLinkType = ARRAY_SUBLINK;
      n->subLinkId = 0;
      n->testexpr = NULL;
      n->operName = NIL;
      n->subselect = (yyvsp[0].node);
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 38860 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1804:
#line 12025 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      A_ArrayExpr *n = (A_ArrayExpr *)(yyvsp[0].node);
      Assert(IsA(n, A_ArrayExpr));
      /* point outermost A_ArrayExpr to the ARRAY keyword */
      n->location = (yylsp[-1]);
      (yyval.node) = (Node *)n;
    }
#line 38872 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1805:
#line 12033 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RowExpr *r = makeNode(RowExpr);
      r->args = (yyvsp[0].list);
      r->row_typeid = InvalidOid; /* not analyzed yet */
      r->colnames = NIL;          /* to be filled in during analysis */
      r->row_format = COERCE_EXPLICIT_CALL; /* abuse */
      r->location = (yylsp[0]);
      (yyval.node) = (Node *)r;
    }
#line 38886 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1806:
#line 12043 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RowExpr *r = makeNode(RowExpr);
      r->args = (yyvsp[0].list);
      r->row_typeid = InvalidOid; /* not analyzed yet */
      r->colnames = NIL;          /* to be filled in during analysis */
      r->row_format = COERCE_IMPLICIT_CAST; /* abuse */
      r->location = (yylsp[0]);
      (yyval.node) = (Node *)r;
    }
#line 38900 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1807:
#line 12053 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      GroupingFunc *g = makeNode(GroupingFunc);
      g->args = (yyvsp[-1].list);
      g->location = (yylsp[-3]);
      (yyval.node) = (Node *)g;
    }
#line 38911 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1808:
#line 12062 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
    }
#line 38919 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1809:
#line 12066 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n =
          makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
      n->agg_order = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 38929 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1810:
#line 12072 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)),
                                 (yylsp[-5]));
      n->func_variadic = TRUE;
      n->agg_order = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 38940 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1811:
#line 12079 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = makeFuncCall((yyvsp[-7].list),
                                 lappend((yyvsp[-5].list), (yyvsp[-2].node)),
                                 (yylsp[-7]));
      n->func_variadic = TRUE;
      n->agg_order = (yyvsp[-1].list);
      (yyval.node) = (Node *)n;
    }
#line 38951 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1812:
#line 12086 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n =
          makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
      n->agg_order = (yyvsp[-1].list);
      /* Ideally we'd mark the FuncCall node to indicate
       * "must be an aggregate", but there's no provision
       * for that in FuncCall at the moment.
       */
      (yyval.node) = (Node *)n;
    }
#line 38965 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1813:
#line 12096 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n =
          makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
      n->agg_order = (yyvsp[-1].list);
      n->agg_distinct = TRUE;
      (yyval.node) = (Node *)n;
    }
#line 38976 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1814:
#line 12103 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * We consider AGGREGATE(*) to invoke a parameterless
       * aggregate.  This does the right thing for COUNT(*),
       * and there are no other aggregates in SQL that accept
       * '*' as parameter.
       *
       * The FuncCall node is also marked agg_star = true,
       * so that later processing can detect what the argument
       * really was.
       */
      FuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
      n->agg_star = TRUE;
      (yyval.node) = (Node *)n;
    }
#line 38996 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1815:
#line 12131 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      FuncCall *n = (FuncCall *)(yyvsp[-3].node);
      /*
       * The order clause for WITHIN GROUP and the one for
       * plain-aggregate ORDER BY share a field, so we have to
       * check here that at most one is present.  We also check
       * for DISTINCT and VARIADIC here to give a better error
       * location.  Other consistency checks are deferred to
       * parse analysis.
       */
      if ((yyvsp[-2].list) != NIL) {
        if (n->agg_order != NIL)
          ereport(
              ERROR,
              (errcode(ERRCODE_SYNTAX_ERROR),
               errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
               parser_errposition((yylsp[-2]))));
        if (n->agg_distinct)
          ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                          errmsg("cannot use DISTINCT with WITHIN GROUP"),
                          parser_errposition((yylsp[-2]))));
        if (n->func_variadic)
          ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                          errmsg("cannot use VARIADIC with WITHIN GROUP"),
                          parser_errposition((yylsp[-2]))));
        n->agg_order = (yyvsp[-2].list);
        n->agg_within_group = TRUE;
      }
      n->agg_filter = (yyvsp[-1].node);
      n->over = (yyvsp[0].windef);
      (yyval.node) = (Node *)n;
    }
#line 39035 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1816:
#line 12166 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 39041 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1817:
#line 12176 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 39047 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1818:
#line 12177 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 39053 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1819:
#line 12185 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeFuncCall(SystemFuncName("pg_collation_for"),
                               list_make1((yyvsp[-1].node)), (yylsp[-4]));
    }
#line 39063 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1820:
#line 12191 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Translate as "'now'::text::date".
       *
       * We cannot use "'now'::date" because coerce_type() will
       * immediately reduce that to a constant representing
       * today's date.  We need to delay the conversion until
       * runtime, else the wrong things will happen when
       * CURRENT_DATE is used in a column default value or rule.
       *
       * This could be simplified if we had a way to generate
       * an expression tree representing runtime application
       * of type-input conversion functions.  (As of PG 7.3
       * that is actually possible, but not clear that we want
       * to rely on it.)
       *
       * The token location is attached to the run-time
       * typecast, not to the Const, for the convenience of
       * pg_stat_statements (which doesn't want these constructs
       * to appear to be replaceable constants).
       */
      Node *n;
      n = makeStringConstCast("now", -1, SystemTypeName("text"));
      (yyval.node) = makeTypeCast(n, SystemTypeName("date"), (yylsp[0]));
    }
#line 39093 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1821:
#line 12217 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Translate as "'now'::text::timetz".
       * See comments for CURRENT_DATE.
       */
      Node *n;
      n = makeStringConstCast("now", -1, SystemTypeName("text"));
      (yyval.node) = makeTypeCast(n, SystemTypeName("timetz"), (yylsp[0]));
    }
#line 39107 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1822:
#line 12227 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Translate as "'now'::text::timetz(n)".
       * See comments for CURRENT_DATE.
       */
      Node *n;
      TypeName *d;
      n = makeStringConstCast("now", -1, SystemTypeName("text"));
      d = SystemTypeName("timetz");
      d->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
      (yyval.node) = makeTypeCast(n, d, (yylsp[-3]));
    }
#line 39124 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1823:
#line 12240 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Translate as "now()", since we have a function that
       * does exactly what is needed.
       */
      (yyval.node) =
          (Node *)makeFuncCall(SystemFuncName("now"), NIL, (yylsp[0]));
    }
#line 39136 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1824:
#line 12248 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Translate as "'now'::text::timestamptz(n)".
       * See comments for CURRENT_DATE.
       */
      Node *n;
      TypeName *d;
      n = makeStringConstCast("now", -1, SystemTypeName("text"));
      d = SystemTypeName("timestamptz");
      d->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
      (yyval.node) = makeTypeCast(n, d, (yylsp[-3]));
    }
#line 39153 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1825:
#line 12261 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Translate as "'now'::text::time".
       * See comments for CURRENT_DATE.
       */
      Node *n;
      n = makeStringConstCast("now", -1, SystemTypeName("text"));
      (yyval.node) =
          makeTypeCast((Node *)n, SystemTypeName("time"), (yylsp[0]));
    }
#line 39167 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1826:
#line 12271 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Translate as "'now'::text::time(n)".
       * See comments for CURRENT_DATE.
       */
      Node *n;
      TypeName *d;
      n = makeStringConstCast("now", -1, SystemTypeName("text"));
      d = SystemTypeName("time");
      d->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
      (yyval.node) = makeTypeCast((Node *)n, d, (yylsp[-3]));
    }
#line 39184 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1827:
#line 12284 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Translate as "'now'::text::timestamp".
       * See comments for CURRENT_DATE.
       */
      Node *n;
      n = makeStringConstCast("now", -1, SystemTypeName("text"));
      (yyval.node) = makeTypeCast(n, SystemTypeName("timestamp"), (yylsp[0]));
    }
#line 39198 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1828:
#line 12294 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Translate as "'now'::text::timestamp(n)".
       * See comments for CURRENT_DATE.
       */
      Node *n;
      TypeName *d;
      n = makeStringConstCast("now", -1, SystemTypeName("text"));
      d = SystemTypeName("timestamp");
      d->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
      (yyval.node) = makeTypeCast(n, d, (yylsp[-3]));
    }
#line 39215 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1829:
#line 12307 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeFuncCall(SystemFuncName("current_user"), NIL, (yylsp[0]));
    }
#line 39223 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1830:
#line 12311 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeFuncCall(SystemFuncName("current_user"), NIL, (yylsp[0]));
    }
#line 39231 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1831:
#line 12315 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeFuncCall(SystemFuncName("session_user"), NIL, (yylsp[0]));
    }
#line 39239 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1832:
#line 12319 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          (Node *)makeFuncCall(SystemFuncName("current_user"), NIL, (yylsp[0]));
    }
#line 39247 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1833:
#line 12323 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("current_database"),
                                          NIL, (yylsp[0]));
    }
#line 39255 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1834:
#line 12327 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("current_schema"), NIL,
                                          (yylsp[0]));
    }
#line 39263 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1835:
#line 12331 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), (yylsp[-5]));
    }
#line 39269 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1836:
#line 12333 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("date_part"),
                                          (yyvsp[-1].list), (yylsp[-3]));
    }
#line 39277 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1837:
#line 12337 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* overlay(A PLACING B FROM C FOR D) is converted to
       * overlay(A, B, C, D)
       * overlay(A PLACING B FROM C) is converted to
       * overlay(A, B, C)
       */
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("overlay"),
                                          (yyvsp[-1].list), (yylsp[-3]));
    }
#line 39290 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1838:
#line 12346 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* position(A in B) is converted to position(B, A) */
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("position"),
                                          (yyvsp[-1].list), (yylsp[-3]));
    }
#line 39299 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1839:
#line 12351 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* substring(A from B for C) is converted to
       * substring(A, B, C) - thomas 2000-11-28
       */
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("substring"),
                                          (yyvsp[-1].list), (yylsp[-3]));
    }
#line 39310 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1840:
#line 12358 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* TREAT(expr AS target) converts expr of a particular type to target,
       * which is defined to be a subtype of the original expression.
       * In SQL99, this is intended for use with structured UDTs,
       * but let's make this a generally useful form allowing stronger
       * coercions than are handled by implicit casting.
       *
       * Convert SystemTypeName() to SystemFuncName() even though
       * at the moment they result in the same thing.
       */
      (yyval.node) = (Node *)makeFuncCall(
          SystemFuncName(((Value *)llast((yyvsp[-1].typnam)->names))->val.str),
          list_make1((yyvsp[-3].node)), (yylsp[-5]));
    }
#line 39329 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1841:
#line 12373 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* various trim expressions are defined in SQL
       * - thomas 1997-07-19
       */
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("btrim"),
                                          (yyvsp[-1].list), (yylsp[-4]));
    }
#line 39340 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1842:
#line 12380 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("ltrim"),
                                          (yyvsp[-1].list), (yylsp[-4]));
    }
#line 39348 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1843:
#line 12384 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("rtrim"),
                                          (yyvsp[-1].list), (yylsp[-4]));
    }
#line 39356 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1844:
#line 12388 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeFuncCall(SystemFuncName("btrim"),
                                          (yyvsp[-1].list), (yylsp[-3]));
    }
#line 39364 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1845:
#line 12392 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeSimpleA_Expr(
          AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
    }
#line 39372 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1846:
#line 12396 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CoalesceExpr *c = makeNode(CoalesceExpr);
      c->args = (yyvsp[-1].list);
      c->location = (yylsp[-3]);
      (yyval.node) = (Node *)c;
    }
#line 39383 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1847:
#line 12403 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      MinMaxExpr *v = makeNode(MinMaxExpr);
      v->args = (yyvsp[-1].list);
      v->op = IS_GREATEST;
      v->location = (yylsp[-3]);
      (yyval.node) = (Node *)v;
    }
#line 39395 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1848:
#line 12411 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      MinMaxExpr *v = makeNode(MinMaxExpr);
      v->args = (yyvsp[-1].list);
      v->op = IS_LEAST;
      v->location = (yylsp[-3]);
      (yyval.node) = (Node *)v;
    }
#line 39407 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1849:
#line 12419 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeXmlExpr(IS_XMLCONCAT, NULL, NIL, (yyvsp[-1].list), (yylsp[-3]));
    }
#line 39415 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1850:
#line 12423 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeXmlExpr(IS_XMLELEMENT, (yyvsp[-1].str), NIL, NIL, (yylsp[-4]));
    }
#line 39423 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1851:
#line 12427 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeXmlExpr(IS_XMLELEMENT, (yyvsp[-3].str),
                                 (yyvsp[-1].list), NIL, (yylsp[-6]));
    }
#line 39431 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1852:
#line 12431 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeXmlExpr(IS_XMLELEMENT, (yyvsp[-3].str), NIL,
                                 (yyvsp[-1].list), (yylsp[-6]));
    }
#line 39439 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1853:
#line 12435 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeXmlExpr(IS_XMLELEMENT, (yyvsp[-5].str), (yyvsp[-3].list),
                      (yyvsp[-1].list), (yylsp[-8]));
    }
#line 39447 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1854:
#line 12439 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* xmlexists(A PASSING [BY REF] B [BY REF]) is
       * converted to xmlexists(A, B)*/
      (yyval.node) = (Node *)makeFuncCall(
          SystemFuncName("xmlexists"),
          list_make2((yyvsp[-2].node), (yyvsp[-1].node)), (yylsp[-4]));
    }
#line 39457 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1855:
#line 12445 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeXmlExpr(IS_XMLFOREST, NULL, (yyvsp[-1].list), NIL, (yylsp[-3]));
    }
#line 39465 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1856:
#line 12449 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      XmlExpr *x = (XmlExpr *)makeXmlExpr(
          IS_XMLPARSE, NULL, NIL,
          list_make2((yyvsp[-2].node), makeBoolAConst((yyvsp[-1].boolean), -1)),
          (yylsp[-5]));
      x->xmloption = static_cast<XmlOptionType>((yyvsp[-3].ival));
      (yyval.node) = (Node *)x;
    }
#line 39478 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1857:
#line 12458 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeXmlExpr(IS_XMLPI, (yyvsp[-1].str), NULL, NIL, (yylsp[-4]));
    }
#line 39486 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1858:
#line 12462 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeXmlExpr(IS_XMLPI, (yyvsp[-3].str), NULL,
                                 list_make1((yyvsp[-1].node)), (yylsp[-6]));
    }
#line 39494 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1859:
#line 12466 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeXmlExpr(
          IS_XMLROOT, NULL, NIL,
          list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node)),
          (yylsp[-6]));
    }
#line 39503 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1860:
#line 12471 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      XmlSerialize *n = makeNode(XmlSerialize);
      n->xmloption = static_cast<XmlOptionType>((yyvsp[-4].ival));
      n->expr = (yyvsp[-3].node);
      n->typeName = (yyvsp[-1].typnam);
      n->location = (yylsp[-6]);
      (yyval.node) = (Node *)n;
    }
#line 39516 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1861:
#line 12485 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 39522 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1862:
#line 12487 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeNullAConst(-1);
    }
#line 39528 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1863:
#line 12491 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeIntConst(XML_STANDALONE_YES, -1);
    }
#line 39534 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1864:
#line 12493 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeIntConst(XML_STANDALONE_NO, -1);
    }
#line 39540 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1865:
#line 12495 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeIntConst(XML_STANDALONE_NO_VALUE, -1);
    }
#line 39546 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1866:
#line 12497 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeIntConst(XML_STANDALONE_OMITTED, -1);
    }
#line 39552 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1867:
#line 12500 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 39558 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1868:
#line 12503 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].target));
    }
#line 39564 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1869:
#line 12504 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target));
    }
#line 39570 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1870:
#line 12508 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.target) = makeNode(ResTarget);
      (yyval.target)->name = (yyvsp[0].str);
      (yyval.target)->indirection = NIL;
      (yyval.target)->val = (Node *)(yyvsp[-2].node);
      (yyval.target)->location = (yylsp[-2]);
    }
#line 39582 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1871:
#line 12516 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.target) = makeNode(ResTarget);
      (yyval.target)->name = NULL;
      (yyval.target)->indirection = NIL;
      (yyval.target)->val = (Node *)(yyvsp[0].node);
      (yyval.target)->location = (yylsp[0]);
    }
#line 39594 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1872:
#line 12525 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = XMLOPTION_DOCUMENT;
    }
#line 39600 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1873:
#line 12526 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = XMLOPTION_CONTENT;
    }
#line 39606 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1874:
#line 12529 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = TRUE;
    }
#line 39612 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1875:
#line 12530 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 39618 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1876:
#line 12531 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.boolean) = FALSE;
    }
#line 39624 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1877:
#line 12537 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 39632 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1878:
#line 12541 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-2].node);
    }
#line 39640 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1879:
#line 12545 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 39648 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1880:
#line 12549 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-2].node);
    }
#line 39656 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1881:
#line 12559 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 39662 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1882:
#line 12560 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 39668 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1883:
#line 12564 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[-1].node);
    }
#line 39674 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1884:
#line 12565 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 39680 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1885:
#line 12573 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 39686 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1886:
#line 12574 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 39692 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1887:
#line 12578 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].windef));
    }
#line 39698 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1888:
#line 12580 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef));
    }
#line 39704 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1889:
#line 12585 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = (yyvsp[0].windef);
      n->name = (yyvsp[-2].str);
      (yyval.windef) = n;
    }
#line 39714 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1890:
#line 12593 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.windef) = (yyvsp[0].windef);
    }
#line 39720 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1891:
#line 12595 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = makeNode(WindowDef);
      n->name = (yyvsp[0].str);
      n->refname = NULL;
      n->partitionClause = NIL;
      n->orderClause = NIL;
      n->frameOptions = FRAMEOPTION_DEFAULTS;
      n->startOffset = NULL;
      n->endOffset = NULL;
      n->location = (yylsp[0]);
      (yyval.windef) = n;
    }
#line 39737 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1892:
#line 12608 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.windef) = NULL;
    }
#line 39743 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1893:
#line 12613 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = makeNode(WindowDef);
      n->name = NULL;
      n->refname = (yyvsp[-4].str);
      n->partitionClause = (yyvsp[-3].list);
      n->orderClause = (yyvsp[-2].list);
      /* copy relevant fields of opt_frame_clause */
      n->frameOptions = (yyvsp[-1].windef)->frameOptions;
      n->startOffset = (yyvsp[-1].windef)->startOffset;
      n->endOffset = (yyvsp[-1].windef)->endOffset;
      n->location = (yylsp[-5]);
      (yyval.windef) = n;
    }
#line 39761 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1894:
#line 12638 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 39767 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1895:
#line 12639 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = NULL;
    }
#line 39773 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1896:
#line 12642 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 39779 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1897:
#line 12643 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 39785 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1898:
#line 12655 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = (yyvsp[0].windef);
      n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
      if (n->frameOptions &
          (FRAMEOPTION_START_VALUE_PRECEDING | FRAMEOPTION_END_VALUE_PRECEDING))
        ereport(ERROR,
                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                 errmsg("RANGE PRECEDING is only supported with UNBOUNDED"),
                 parser_errposition((yylsp[-1]))));
      if (n->frameOptions &
          (FRAMEOPTION_START_VALUE_FOLLOWING | FRAMEOPTION_END_VALUE_FOLLOWING))
        ereport(ERROR,
                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                 errmsg("RANGE FOLLOWING is only supported with UNBOUNDED"),
                 parser_errposition((yylsp[-1]))));
      (yyval.windef) = n;
    }
#line 39807 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1899:
#line 12673 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = (yyvsp[0].windef);
      n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
      (yyval.windef) = n;
    }
#line 39817 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1900:
#line 12679 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = makeNode(WindowDef);
      n->frameOptions = FRAMEOPTION_DEFAULTS;
      n->startOffset = NULL;
      n->endOffset = NULL;
      (yyval.windef) = n;
    }
#line 39829 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1901:
#line 12689 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = (yyvsp[0].windef);
      /* reject invalid cases */
      if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
        ereport(ERROR, (errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
                        parser_errposition((yylsp[0]))));
      if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
        ereport(ERROR, (errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg(
                            "frame starting from following row cannot end with "
                            "current row"),
                        parser_errposition((yylsp[0]))));
      n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
      (yyval.windef) = n;
    }
#line 39850 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1902:
#line 12706 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n1 = (yyvsp[-2].windef);
      WindowDef *n2 = (yyvsp[0].windef);
      /* form merged options */
      int frameOptions = n1->frameOptions;
      /* shift converts START_ options to END_ options */
      frameOptions |= n2->frameOptions << 1;
      frameOptions |= FRAMEOPTION_BETWEEN;
      /* reject invalid cases */
      if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
        ereport(ERROR, (errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
                        parser_errposition((yylsp[-2]))));
      if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
        ereport(ERROR, (errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg("frame end cannot be UNBOUNDED PRECEDING"),
                        parser_errposition((yylsp[0]))));
      if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
          (frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
        ereport(
            ERROR,
            (errcode(ERRCODE_WINDOWING_ERROR),
             errmsg(
                 "frame starting from current row cannot have preceding rows"),
             parser_errposition((yylsp[0]))));
      if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
          (frameOptions &
           (FRAMEOPTION_END_VALUE_PRECEDING | FRAMEOPTION_END_CURRENT_ROW)))
        ereport(ERROR, (errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg(
                            "frame starting from following row cannot have "
                            "preceding rows"),
                        parser_errposition((yylsp[0]))));
      n1->frameOptions = frameOptions;
      n1->endOffset = n2->startOffset;
      (yyval.windef) = n1;
    }
#line 39891 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1903:
#line 12751 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = makeNode(WindowDef);
      n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
      n->startOffset = NULL;
      n->endOffset = NULL;
      (yyval.windef) = n;
    }
#line 39903 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1904:
#line 12759 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = makeNode(WindowDef);
      n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
      n->startOffset = NULL;
      n->endOffset = NULL;
      (yyval.windef) = n;
    }
#line 39915 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1905:
#line 12767 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = makeNode(WindowDef);
      n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
      n->startOffset = NULL;
      n->endOffset = NULL;
      (yyval.windef) = n;
    }
#line 39927 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1906:
#line 12775 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = makeNode(WindowDef);
      n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
      n->startOffset = (yyvsp[-1].node);
      n->endOffset = NULL;
      (yyval.windef) = n;
    }
#line 39939 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1907:
#line 12783 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      WindowDef *n = makeNode(WindowDef);
      n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
      n->startOffset = (yyvsp[-1].node);
      n->endOffset = NULL;
      (yyval.windef) = n;
    }
#line 39951 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1908:
#line 12803 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 39957 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1909:
#line 12804 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 39963 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1910:
#line 12805 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node));
    }
#line 39969 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1911:
#line 12808 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 39975 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1912:
#line 12809 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 39981 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1913:
#line 12812 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node));
    }
#line 39987 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1914:
#line 12815 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ANY_SUBLINK;
    }
#line 39993 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1915:
#line 12816 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ANY_SUBLINK;
    }
#line 39999 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1916:
#line 12817 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = ALL_SUBLINK;
    }
#line 40005 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1917:
#line 12820 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40011 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1918:
#line 12821 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40017 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1919:
#line 12824 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "+";
    }
#line 40023 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1920:
#line 12825 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "-";
    }
#line 40029 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1921:
#line 12826 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "*";
    }
#line 40035 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1922:
#line 12827 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "/";
    }
#line 40041 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1923:
#line 12828 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "%";
    }
#line 40047 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1924:
#line 12829 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "^";
    }
#line 40053 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1925:
#line 12830 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "<";
    }
#line 40059 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1926:
#line 12831 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = ">";
    }
#line 40065 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1927:
#line 12832 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "=";
    }
#line 40071 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1928:
#line 12833 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "<=";
    }
#line 40077 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1929:
#line 12834 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = ">=";
    }
#line 40083 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1930:
#line 12835 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "<>";
    }
#line 40089 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1931:
#line 12839 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 40095 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1932:
#line 12841 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 40101 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1933:
#line 12846 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 40107 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1934:
#line 12848 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 40113 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1935:
#line 12853 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 40119 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1936:
#line 12855 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 40125 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1937:
#line 12857 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString("~~"));
    }
#line 40131 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1938:
#line 12859 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString("!~~"));
    }
#line 40137 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1939:
#line 12861 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString("~~*"));
    }
#line 40143 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1940:
#line 12863 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString("!~~*"));
    }
#line 40149 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1941:
#line 12875 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 40157 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1942:
#line 12879 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 40165 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1943:
#line 12886 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 40173 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1944:
#line 12890 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 40181 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1945:
#line 12896 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 40189 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1946:
#line 12900 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      NamedArgExpr *na = makeNode(NamedArgExpr);
      na->name = (yyvsp[-2].str);
      na->arg = (Expr *)(yyvsp[0].node);
      na->argnumber = -1; /* until determined */
      na->location = (yylsp[-2]);
      (yyval.node) = (Node *)na;
    }
#line 40202 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1947:
#line 12909 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      NamedArgExpr *na = makeNode(NamedArgExpr);
      na->name = (yyvsp[-2].str);
      na->arg = (Expr *)(yyvsp[0].node);
      na->argnumber = -1; /* until determined */
      na->location = (yylsp[-2]);
      (yyval.node) = (Node *)na;
    }
#line 40215 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1948:
#line 12919 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].typnam));
    }
#line 40221 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1949:
#line 12920 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam));
    }
#line 40227 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1950:
#line 12924 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeAArrayExpr((yyvsp[-1].list), (yylsp[-2]));
    }
#line 40235 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1951:
#line 12928 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeAArrayExpr((yyvsp[-1].list), (yylsp[-2]));
    }
#line 40243 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1952:
#line 12932 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeAArrayExpr(NIL, (yylsp[-1]));
    }
#line 40251 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1953:
#line 12937 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 40257 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1954:
#line 12938 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 40263 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1955:
#line 12944 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])),
                                (yyvsp[0].node));
    }
#line 40271 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1956:
#line 12947 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 40277 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1957:
#line 12954 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40283 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1958:
#line 12955 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "year";
    }
#line 40289 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1959:
#line 12956 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "month";
    }
#line 40295 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1960:
#line 12957 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "day";
    }
#line 40301 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1961:
#line 12958 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "hour";
    }
#line 40307 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1962:
#line 12959 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "minute";
    }
#line 40313 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1963:
#line 12960 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = "second";
    }
#line 40319 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1964:
#line 12961 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40325 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1965:
#line 12972 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node),
                                (yyvsp[-1].node), (yyvsp[0].node));
    }
#line 40333 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1966:
#line 12976 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) =
          list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
    }
#line 40341 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1967:
#line 12983 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 40347 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1968:
#line 12989 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node));
    }
#line 40353 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1969:
#line 12990 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 40359 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1970:
#line 13007 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) =
          list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
    }
#line 40367 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1971:
#line 13011 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* not legal per SQL99, but might as well allow it */
      (yyval.list) =
          list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
    }
#line 40376 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1972:
#line 13016 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 40384 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1973:
#line 13020 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * Since there are no cases where this syntax allows
       * a textual FOR value, we forcibly cast the argument
       * to int4.  The possible matches in pg_proc are
       * substring(text,int4) and substring(text,text),
       * and we don't want the parser to choose the latter,
       * which it is likely to do if the second argument
       * is unknown or doesn't have an implicit cast to int4.
       */
      (yyval.list) =
          list_make3((yyvsp[-1].node), makeIntConst(1, -1),
                     makeTypeCast((yyvsp[0].node), SystemTypeName("int4"), -1));
    }
#line 40403 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1974:
#line 13035 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 40411 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1975:
#line 13039 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 40417 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1976:
#line 13043 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 40423 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1977:
#line 13046 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 40429 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1978:
#line 13049 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node));
    }
#line 40435 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1979:
#line 13050 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 40441 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1980:
#line 13051 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 40447 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1981:
#line 13055 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SubLink *n = makeNode(SubLink);
      n->subselect = (yyvsp[0].node);
      /* other fields will be filled later */
      (yyval.node) = (Node *)n;
    }
#line 40458 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1982:
#line 13061 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[-1].list);
    }
#line 40464 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1983:
#line 13072 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CaseExpr *c = makeNode(CaseExpr);
      c->casetype = InvalidOid; /* not analyzed yet */
      c->arg = (Expr *)(yyvsp[-3].node);
      c->args = (yyvsp[-2].list);
      c->defresult = (Expr *)(yyvsp[-1].node);
      c->location = (yylsp[-4]);
      (yyval.node) = (Node *)c;
    }
#line 40478 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1984:
#line 13085 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 40484 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1985:
#line 13086 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
    }
#line 40490 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1986:
#line 13091 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      CaseWhen *w = makeNode(CaseWhen);
      w->expr = (Expr *)(yyvsp[-2].node);
      w->result = (Expr *)(yyvsp[0].node);
      w->location = (yylsp[-3]);
      (yyval.node) = (Node *)w;
    }
#line 40502 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1987:
#line 13101 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 40508 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1988:
#line 13102 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 40514 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1989:
#line 13105 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 40520 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1990:
#line 13106 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = NULL;
    }
#line 40526 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1991:
#line 13110 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
    }
#line 40534 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1992:
#line 13114 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list),
                                   (yylsp[-1]), yyscanner);
    }
#line 40542 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1993:
#line 13121 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeString((yyvsp[0].str));
    }
#line 40550 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1994:
#line 13125 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)makeNode(A_Star);
    }
#line 40558 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1995:
#line 13129 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      A_Indices *ai = makeNode(A_Indices);
      ai->lidx = NULL;
      ai->uidx = (yyvsp[-1].node);
      (yyval.node) = (Node *)ai;
    }
#line 40569 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1996:
#line 13136 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      A_Indices *ai = makeNode(A_Indices);
      ai->lidx = (yyvsp[-3].node);
      ai->uidx = (yyvsp[-1].node);
      (yyval.node) = (Node *)ai;
    }
#line 40580 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1997:
#line 13145 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 40586 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1998:
#line 13146 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
    }
#line 40592 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 1999:
#line 13150 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 40598 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2000:
#line 13151 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
    }
#line 40604 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2003:
#line 13166 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = (Node *)(yyvsp[0].node);
    }
#line 40610 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2004:
#line 13168 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      SetToDefault *n = makeNode(SetToDefault);
      n->location = (yylsp[0]);
      (yyval.node) = (Node *)n;
    }
#line 40620 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2005:
#line 13176 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 40626 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2006:
#line 13177 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 40632 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2007:
#line 13185 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[-1].list);
    }
#line 40638 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2008:
#line 13195 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = (yyvsp[0].list);
    }
#line 40644 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2009:
#line 13196 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = NIL;
    }
#line 40650 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2010:
#line 13200 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].target));
    }
#line 40656 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2011:
#line 13201 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target));
    }
#line 40662 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2012:
#line 13205 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.target) = makeNode(ResTarget);
      (yyval.target)->name = (yyvsp[0].str);
      (yyval.target)->indirection = NIL;
      (yyval.target)->val = (Node *)(yyvsp[-2].node);
      (yyval.target)->location = (yylsp[-2]);
    }
#line 40674 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2013:
#line 13221 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.target) = makeNode(ResTarget);
      (yyval.target)->name = (yyvsp[0].str);
      (yyval.target)->indirection = NIL;
      (yyval.target)->val = (Node *)(yyvsp[-1].node);
      (yyval.target)->location = (yylsp[-1]);
    }
#line 40686 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2014:
#line 13229 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.target) = makeNode(ResTarget);
      (yyval.target)->name = NULL;
      (yyval.target)->indirection = NIL;
      (yyval.target)->val = (Node *)(yyvsp[0].node);
      (yyval.target)->location = (yylsp[0]);
    }
#line 40698 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2015:
#line 13237 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      ColumnRef *n = makeNode(ColumnRef);
      n->fields = list_make1(makeNode(A_Star));
      n->location = (yylsp[0]);

      (yyval.target) = makeNode(ResTarget);
      (yyval.target)->name = NULL;
      (yyval.target)->indirection = NIL;
      (yyval.target)->val = (Node *)n;
      (yyval.target)->location = (yylsp[0]);
    }
#line 40714 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2016:
#line 13258 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].range));
    }
#line 40720 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2017:
#line 13259 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range));
    }
#line 40726 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2018:
#line 13271 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
    }
#line 40734 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2019:
#line 13275 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      check_qualified_name((yyvsp[0].list), yyscanner);
      (yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
      switch (list_length((yyvsp[0].list))) {
        case 1:
          (yyval.range)->catalogname = NULL;
          (yyval.range)->schemaname = (yyvsp[-1].str);
          (yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
          break;
        case 2:
          (yyval.range)->catalogname = (yyvsp[-1].str);
          (yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
          (yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
          break;
        default:
          ereport(ERROR,
                  (errcode(ERRCODE_SYNTAX_ERROR),
                   errmsg("improper qualified name (too many dotted names): %s",
                          NameListToString(lcons(makeString((yyvsp[-1].str)),
                                                 (yyvsp[0].list)))),
                   parser_errposition((yylsp[-1]))));
          break;
      }
    }
#line 40763 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2020:
#line 13302 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 40769 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2021:
#line 13304 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str)));
    }
#line 40775 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2022:
#line 13308 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40781 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2023:
#line 13311 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40787 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2024:
#line 13314 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40793 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2025:
#line 13316 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40799 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2026:
#line 13318 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40805 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2027:
#line 13320 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40811 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2028:
#line 13331 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1(makeString((yyvsp[0].str)));
    }
#line 40817 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2029:
#line 13333 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = check_func_name(
          lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)), yyscanner);
    }
#line 40826 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2030:
#line 13344 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
    }
#line 40834 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2031:
#line 13348 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
    }
#line 40842 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2032:
#line 13352 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
    }
#line 40850 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2033:
#line 13356 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
    }
#line 40858 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2034:
#line 13360 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* This is a bit constant per SQL99:
       * Without Feature F511, "BIT data type",
       * a <general literal> shall not be a
       * <bit string literal> or a <hex string literal>.
       */
      (yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
    }
#line 40871 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2035:
#line 13369 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* generic type 'literal' syntax */
      TypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
      t->location = (yylsp[-1]);
      (yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
    }
#line 40882 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2036:
#line 13376 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /* generic syntax with a type modifier */
      TypeName *t = makeTypeNameFromNameList((yyvsp[-5].list));
      ListCell *lc;

      /*
       * We must use func_arg_list and opt_sort_clause in the
       * production to avoid reduce/reduce conflicts, but we
       * don't actually wish to allow NamedArgExpr in this
       * context, nor ORDER BY.
       */
      foreach (lc, (yyvsp[-3].list)) {
        NamedArgExpr *arg = (NamedArgExpr *)lfirst(lc);

        if (IsA(arg, NamedArgExpr))
          ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                          errmsg("type modifier cannot have parameter name"),
                          parser_errposition(arg->location)));
      }
      if ((yyvsp[-2].list) != NIL)
        ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("type modifier cannot have ORDER BY"),
                        parser_errposition((yylsp[-2]))));

      t->typmods = (yyvsp[-3].list);
      t->location = (yylsp[-5]);
      (yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
    }
#line 40918 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2037:
#line 13408 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) =
          makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
    }
#line 40926 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2038:
#line 13412 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TypeName *t = (yyvsp[-2].typnam);
      t->typmods = (yyvsp[0].list);
      (yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
    }
#line 40936 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2039:
#line 13418 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      TypeName *t = (yyvsp[-4].typnam);
      t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
                              makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
      (yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
    }
#line 40947 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2040:
#line 13425 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeBoolAConst(TRUE, (yylsp[0]));
    }
#line 40955 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2041:
#line 13429 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeBoolAConst(FALSE, (yylsp[0]));
    }
#line 40963 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2042:
#line 13433 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeNullAConst((yylsp[0]));
    }
#line 40971 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2043:
#line 13438 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[0].ival);
    }
#line 40977 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2044:
#line 13439 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 40983 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2045:
#line 13441 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = (yyvsp[0].ival);
    }
#line 40989 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2046:
#line 13442 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = +(yyvsp[0].ival);
    }
#line 40995 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2047:
#line 13443 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.ival) = -(yyvsp[0].ival);
    }
#line 41001 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2048:
#line 13448 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      RoleSpec *spc = (RoleSpec *)(yyvsp[0].node);
      switch (spc->roletype) {
        case ROLESPEC_CSTRING:
          (yyval.str) = spc->rolename;
          break;
        case ROLESPEC_PUBLIC:
          ereport(ERROR, (errcode(ERRCODE_RESERVED_NAME),
                          errmsg("role name \"%s\" is reserved", "public"),
                          parser_errposition((yylsp[0]))));
        case ROLESPEC_SESSION_USER:
          ereport(ERROR, (errcode(ERRCODE_RESERVED_NAME),
                          errmsg("%s cannot be used as a role name here",
                                 "SESSION_USER"),
                          parser_errposition((yylsp[0]))));
        case ROLESPEC_CURRENT_USER:
          ereport(ERROR, (errcode(ERRCODE_RESERVED_NAME),
                          errmsg("%s cannot be used as a role name here",
                                 "CURRENT_USER"),
                          parser_errposition((yylsp[0]))));
      }
    }
#line 41033 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2049:
#line 13478 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      /*
       * "public" and "none" are not keywords, but they must
       * be treated specially here.
       */
      RoleSpec *n;
      if (strcmp((yyvsp[0].str), "public") == 0) {
        n = (RoleSpec *)makeRoleSpec(ROLESPEC_PUBLIC, (yylsp[0]));
        n->roletype = ROLESPEC_PUBLIC;
      } else if (strcmp((yyvsp[0].str), "none") == 0) {
        ereport(ERROR, (errcode(ERRCODE_RESERVED_NAME),
                        errmsg("role name \"%s\" is reserved", "none"),
                        parser_errposition((yylsp[0]))));
      } else {
        n = (RoleSpec *)makeRoleSpec(ROLESPEC_CSTRING, (yylsp[0]));
        n->rolename = pstrdup((yyvsp[0].str));
      }
      (yyval.node) = (Node *)n;
    }
#line 41064 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2050:
#line 13505 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeRoleSpec(ROLESPEC_CURRENT_USER, (yylsp[0]));
    }
#line 41072 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2051:
#line 13509 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.node) = makeRoleSpec(ROLESPEC_SESSION_USER, (yylsp[0]));
    }
#line 41080 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2052:
#line 13515 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = list_make1((yyvsp[0].node));
    }
#line 41086 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2053:
#line 13517 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
    }
#line 41092 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2054:
#line 13533 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 41098 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2055:
#line 13534 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41104 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2056:
#line 13535 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41110 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2057:
#line 13540 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 41116 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2058:
#line 13541 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41122 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2059:
#line 13542 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41128 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2060:
#line 13547 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 41134 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2061:
#line 13548 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41140 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2062:
#line 13549 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41146 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2063:
#line 13550 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41152 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2064:
#line 13556 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = (yyvsp[0].str);
    }
#line 41158 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2065:
#line 13557 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41164 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2066:
#line 13558 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41170 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2067:
#line 13559 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41176 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

    case 2068:
#line 13560 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1646  */
    {
      (yyval.str) = pstrdup((yyvsp[0].keyword));
    }
#line 41182 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    break;

#line 41186 "../../src/postgres/backend/parser/gram.cpp" /* yacc.c:1646  */
    default:
      break;
  }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK(yylen);
  yylen = 0;
  YY_STACK_PRINT(yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;

/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE(yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus) {
    ++yynerrs;
#if !YYERROR_VERBOSE
    yyerror(&yylloc, yyscanner, YY_("syntax error"));
#else
#define YYSYNTAX_ERROR yysyntax_error(&yymsg_alloc, &yymsg, yyssp, yytoken)
    {
      char const *yymsgp = YY_("syntax error");
      int yysyntax_error_status;
      yysyntax_error_status = YYSYNTAX_ERROR;
      if (yysyntax_error_status == 0)
        yymsgp = yymsg;
      else if (yysyntax_error_status == 1) {
        if (yymsg != yymsgbuf) YYSTACK_FREE(yymsg);
        yymsg = (char *)YYSTACK_ALLOC(yymsg_alloc);
        if (!yymsg) {
          yymsg = yymsgbuf;
          yymsg_alloc = sizeof yymsgbuf;
          yysyntax_error_status = 2;
        } else {
          yysyntax_error_status = YYSYNTAX_ERROR;
          yymsgp = yymsg;
        }
      }
      yyerror(&yylloc, yyscanner, yymsgp);
      if (yysyntax_error_status == 2) goto yyexhaustedlab;
    }
#undef YYSYNTAX_ERROR
#endif
  }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3) {
    /* If just tried and failed to reuse lookahead token after an
       error, discard it.  */

    if (yychar <= YYEOF) {
      /* Return failure if at end of input.  */
      if (yychar == YYEOF) YYABORT;
    } else {
      yydestruct("Error: discarding", yytoken, &yylval, &yylloc, yyscanner);
      yychar = YYEMPTY;
    }
  }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;

/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0) goto yyerrorlab;

  yyerror_range[1] = yylsp[1 - yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK(yylen);
  yylen = 0;
  YY_STACK_PRINT(yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;

/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3; /* Each real token shifted decrements this.  */

  for (;;) {
    yyn = yypact[yystate];
    if (!yypact_value_is_default(yyn)) {
      yyn += YYTERROR;
      if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR) {
        yyn = yytable[yyn];
        if (0 < yyn) break;
      }
    }

    /* Pop the current state because it cannot handle the error token.  */
    if (yyssp == yyss) YYABORT;

    yyerror_range[1] = *yylsp;
    yydestruct("Error: popping", yystos[yystate], yyvsp, yylsp, yyscanner);
    YYPOPSTACK(1);
    yystate = *yyssp;
    YY_STACK_PRINT(yyss, yyssp);
  }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT(yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;

/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror(&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
/* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY) {
    /* Make sure we have latest lookahead translation.  See comments at
       user semantic actions for why this is necessary.  */
    yytoken = YYTRANSLATE(yychar);
    yydestruct("Cleanup: discarding lookahead", yytoken, &yylval, &yylloc,
               yyscanner);
  }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK(yylen);
  YY_STACK_PRINT(yyss, yyssp);
  while (yyssp != yyss) {
    yydestruct("Cleanup: popping", yystos[*yyssp], yyvsp, yylsp, yyscanner);
    YYPOPSTACK(1);
  }
#ifndef yyoverflow
  if (yyss != yyssa) YYSTACK_FREE(yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf) YYSTACK_FREE(yymsg);
#endif
  return yyresult;
}
#line 14033 "../../src/postgres/backend/parser/gram.ypp" /* yacc.c:1906  */

/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
                         const char *msg) {
  parser_yyerror(msg);
}

static Node *makeColumnRef(char *colname, List *indirection, int location,
                           core_yyscan_t yyscanner) {
  /*
   * Generate a ColumnRef node, with an A_Indirection node added if there
   * is any subscripting in the specified indirection list.  However,
   * any field selection at the start of the indirection list must be
   * transposed into the "fields" part of the ColumnRef node.
   */
  ColumnRef *c = makeNode(ColumnRef);
  int nfields = 0;
  ListCell *l;

  c->location = location;
  foreach (l, indirection) {
    if (IsA(lfirst(l), A_Indices)) {
      A_Indirection *i = makeNode(A_Indirection);

      if (nfields == 0) {
        /* easy case - all indirection goes to A_Indirection */
        c->fields = list_make1(makeString(colname));
        i->indirection = check_indirection(indirection, yyscanner);
      } else {
        /* got to split the list in two */
        i->indirection =
            check_indirection(list_copy_tail(indirection, nfields), yyscanner);
        indirection = list_truncate(indirection, nfields);
        c->fields = lcons(makeString(colname), indirection);
      }
      i->arg = (Node *)c;
      return (Node *)i;
    } else if (IsA(lfirst(l), A_Star)) {
      /* We only allow '*' at the end of a ColumnRef */
      if (lnext(l) != NULL) parser_yyerror("improper use of \"*\"");
    }
    nfields++;
  }
  /* No subscripting, so all indirection gets added to field list */
  c->fields = lcons(makeString(colname), indirection);
  return (Node *)c;
}

static Node *makeTypeCast(Node *arg, TypeName *typename___, int location) {
  TypeCast *n = makeNode(TypeCast);
  n->arg = arg;
  n->typeName = typename___;
  n->location = location;
  return (Node *)n;
}

static Node *makeStringConst(char *str, int location) {
  A_Const *n = makeNode(A_Const);

  n->val.type = T_String;
  n->val.val.str = str;
  n->location = location;

  return (Node *)n;
}

static Node *makeStringConstCast(char *str, int location,
                                 TypeName *typename___) {
  Node *s = makeStringConst(str, location);

  return makeTypeCast(s, typename___, -1);
}

static Node *makeIntConst(int val, int location) {
  A_Const *n = makeNode(A_Const);

  n->val.type = T_Integer;
  n->val.val.ival = val;
  n->location = location;

  return (Node *)n;
}

static Node *makeFloatConst(char *str, int location) {
  A_Const *n = makeNode(A_Const);

  n->val.type = T_Float;
  n->val.val.str = str;
  n->location = location;

  return (Node *)n;
}

static Node *makeBitStringConst(char *str, int location) {
  A_Const *n = makeNode(A_Const);

  n->val.type = T_BitString;
  n->val.val.str = str;
  n->location = location;

  return (Node *)n;
}

static Node *makeNullAConst(int location) {
  A_Const *n = makeNode(A_Const);

  n->val.type = T_Null;
  n->location = location;

  return (Node *)n;
}

static Node *makeAConst(Value *v, int location) {
  Node *n;

  switch (v->type) {
    case T_Float:
      n = makeFloatConst(v->val.str, location);
      break;

    case T_Integer:
      n = makeIntConst(v->val.ival, location);
      break;

    case T_String:
    default:
      n = makeStringConst(v->val.str, location);
      break;
  }

  return n;
}

/* makeBoolAConst()
 * Create an A_Const string node and put it inside a boolean cast.
 */
static Node *makeBoolAConst(bool state, int location) {
  A_Const *n = makeNode(A_Const);

  n->val.type = T_String;
  n->val.val.str =
      (state ? static_cast<char *>("t") : static_cast<char *>("f"));
  n->location = location;

  return makeTypeCast((Node *)n, SystemTypeName("bool"), -1);
}

/* makeRoleSpec
 * Create a RoleSpec with the given type
 */
static Node *makeRoleSpec(RoleSpecType type, int location) {
  RoleSpec *spec = makeNode(RoleSpec);

  spec->roletype = type;
  spec->location = location;

  return (Node *)spec;
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void check_qualified_name(List *names, core_yyscan_t yyscanner) {
  ListCell *i;

  foreach (i, names) {
    if (!IsA(lfirst(i), String)) parser_yyerror("syntax error");
  }
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static List *check_func_name(List *names, core_yyscan_t yyscanner) {
  ListCell *i;

  foreach (i, names) {
    if (!IsA(lfirst(i), String)) parser_yyerror("syntax error");
  }
  return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static List *check_indirection(List *indirection, core_yyscan_t yyscanner) {
  ListCell *l;

  foreach (l, indirection) {
    if (IsA(lfirst(l), A_Star)) {
      if (lnext(l) != NULL) parser_yyerror("improper use of \"*\"");
    }
  }
  return indirection;
}

/* extractArgTypes()
 * Given a list of FunctionParameter nodes, extract a list of just the
 * argument types (TypeNames) for input parameters only.  This is what
 * is needed to look up an existing function, which is what is wanted by
 * the productions that use this call.
 */
static List *extractArgTypes(List *parameters) {
  List *result = NIL;
  ListCell *i;

  foreach (i, parameters) {
    FunctionParameter *p = (FunctionParameter *)lfirst(i);

    if (p->mode != FUNC_PARAM_OUT && p->mode != FUNC_PARAM_TABLE)
      result = lappend(result, p->argType);
  }
  return result;
}

/* extractAggrArgTypes()
 * As above, but work from the output of the aggr_args production.
 */
static List *extractAggrArgTypes(List *aggrargs) {
  Assert(list_length(aggrargs) == 2);
  return extractArgTypes((List *)linitial(aggrargs));
}

/* makeOrderedSetArgs()
 * Build the result of the aggr_args production (which see the comments for).
 * This handles only the case where both given lists are nonempty, so that
 * we have to deal with multiple VARIADIC arguments.
 */
static List *makeOrderedSetArgs(List *directargs, List *orderedargs,
                                core_yyscan_t yyscanner) {
  FunctionParameter *lastd = (FunctionParameter *)llast(directargs);
  int ndirectargs;

  /* No restriction unless last direct arg is VARIADIC */
  if (lastd->mode == FUNC_PARAM_VARIADIC) {
    FunctionParameter *firsto = (FunctionParameter *)linitial(orderedargs);

    /*
     * We ignore the names, though the aggr_arg production allows them;
     * it doesn't allow default values, so those need not be checked.
     */
    if (list_length(orderedargs) != 1 || firsto->mode != FUNC_PARAM_VARIADIC ||
        !equal(lastd->argType, firsto->argType))
      ereport(ERROR, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                      errmsg(
                          "an ordered-set aggregate with a VARIADIC direct "
                          "argument must have one VARIADIC aggregated argument "
                          "of the same data type"),
                      parser_errposition(exprLocation((Node *)firsto))));

    /* OK, drop the duplicate VARIADIC argument from the internal form */
    orderedargs = NIL;
  }

  /* don't merge into the next line, as list_concat changes directargs */
  ndirectargs = list_length(directargs);

  return list_make2(list_concat(directargs, orderedargs),
                    makeInteger(ndirectargs));
}

/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in SelectStmt productions.
 */
static void insertSelectOptions(SelectStmt *stmt, List *sortClause,
                                List *lockingClause, Node *limitOffset,
                                Node *limitCount, WithClause *withClause,
                                core_yyscan_t yyscanner) {
  Assert(IsA(stmt, SelectStmt));

  /*
   * Tests here are to reject constructs like
   *	(SELECT foo ORDER BY bar) ORDER BY baz
   */
  if (sortClause) {
    if (stmt->sortClause)
      ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                      errmsg("multiple ORDER BY clauses not allowed"),
                      parser_errposition(exprLocation((Node *)sortClause))));
    stmt->sortClause = sortClause;
  }
  /* We can handle multiple locking clauses, though */
  stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
  if (limitOffset) {
    if (stmt->limitOffset)
      ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                      errmsg("multiple OFFSET clauses not allowed"),
                      parser_errposition(exprLocation(limitOffset))));
    stmt->limitOffset = limitOffset;
  }
  if (limitCount) {
    if (stmt->limitCount)
      ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                      errmsg("multiple LIMIT clauses not allowed"),
                      parser_errposition(exprLocation(limitCount))));
    stmt->limitCount = limitCount;
  }
  if (withClause) {
    if (stmt->withClause)
      ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                      errmsg("multiple WITH clauses not allowed"),
                      parser_errposition(exprLocation((Node *)withClause))));
    stmt->withClause = withClause;
  }
}

static Node *makeSetOp(SetOperation op, bool all, Node *larg, Node *rarg) {
  SelectStmt *n = makeNode(SelectStmt);

  n->op = op;
  n->all = all;
  n->larg = (SelectStmt *)larg;
  n->rarg = (SelectStmt *)rarg;
  return (Node *)n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
List *SystemFuncName(char *name) {
  return list_make2(makeString("pg_catalog"), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
TypeName *SystemTypeName(char *name) {
  return makeTypeNameFromNameList(
      list_make2(makeString("pg_catalog"), makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static Node *doNegate(Node *n, int location) {
  if (IsA(n, A_Const)) {
    A_Const *con = (A_Const *)n;

    /* report the constant's location as that of the '-' sign */
    con->location = location;

    if (con->val.type == T_Integer) {
      con->val.val.ival = -con->val.val.ival;
      return n;
    }
    if (con->val.type == T_Float) {
      doNegateFloat(&con->val);
      return n;
    }
  }

  return (Node *)makeSimpleA_Expr(AEXPR_OP, "-", NULL, n, location);
}

static void doNegateFloat(Value *v) {
  char *oldval = v->val.str;

  Assert(IsA(v, Float));
  if (*oldval == '+') oldval++;
  if (*oldval == '-')
    v->val.str = oldval + 1; /* just strip the '-' */
  else
    v->val.str = psprintf("-%s", oldval);
}

static Node *makeAndExpr(Node *lexpr, Node *rexpr, int location) {
  /* Flatten "a AND b AND c ..." to a single BoolExpr on sight */
  if (IsA(lexpr, BoolExpr)) {
    BoolExpr *blexpr = (BoolExpr *)lexpr;

    if (blexpr->boolop == AND_EXPR) {
      blexpr->args = lappend(blexpr->args, rexpr);
      return (Node *)blexpr;
    }
  }
  return (Node *)makeBoolExpr(AND_EXPR, list_make2(lexpr, rexpr), location);
}

static Node *makeOrExpr(Node *lexpr, Node *rexpr, int location) {
  /* Flatten "a OR b OR c ..." to a single BoolExpr on sight */
  if (IsA(lexpr, BoolExpr)) {
    BoolExpr *blexpr = (BoolExpr *)lexpr;

    if (blexpr->boolop == OR_EXPR) {
      blexpr->args = lappend(blexpr->args, rexpr);
      return (Node *)blexpr;
    }
  }
  return (Node *)makeBoolExpr(OR_EXPR, list_make2(lexpr, rexpr), location);
}

static Node *makeNotExpr(Node *expr, int location) {
  return (Node *)makeBoolExpr(NOT_EXPR, list_make1(expr), location);
}

static Node *makeAArrayExpr(List *elements, int location) {
  A_ArrayExpr *n = makeNode(A_ArrayExpr);

  n->elements = elements;
  n->location = location;
  return (Node *)n;
}

static Node *makeXmlExpr(XmlExprOp op, char *name, List *named_args, List *args,
                         int location) {
  XmlExpr *x = makeNode(XmlExpr);

  x->op = op;
  x->name = name;
  /*
   * named_args is a list of ResTarget; it'll be split apart into separate
   * expression and name lists in transformXmlExpr().
   */
  x->named_args = named_args;
  x->arg_names = NIL;
  x->args = args;
  /* xmloption, if relevant, must be filled in by caller */
  /* type and typmod will be filled in during parse analysis */
  x->type = InvalidOid; /* marks the node as not analyzed */
  x->location = location;
  return (Node *)x;
}

/*
 * Merge the input and output parameters of a table function.
 */
static List *mergeTableFuncParameters(List *func_args, List *columns) {
  ListCell *lc;

  /* Explicit OUT and INOUT parameters shouldn't be used in this syntax */
  foreach (lc, func_args) {
    FunctionParameter *p = (FunctionParameter *)lfirst(lc);

    if (p->mode != FUNC_PARAM_IN && p->mode != FUNC_PARAM_VARIADIC)
      ereport(
          ERROR,
          (errcode(ERRCODE_SYNTAX_ERROR),
           errmsg(
               "OUT and INOUT arguments aren't allowed in TABLE functions")));
  }

  return list_concat(func_args, columns);
}

/*
 * Determine return type of a TABLE function.  A single result column
 * returns setof that column's type; otherwise return setof record.
 */
static TypeName *TableFuncTypeName(List *columns) {
  TypeName *result;

  if (list_length(columns) == 1) {
    FunctionParameter *p = (FunctionParameter *)linitial(columns);

    result = (TypeName *)copyObject(p->argType);
  } else
    result = SystemTypeName("record");

  result->setof = true;

  return result;
}

/*
 * Convert a list of (dotted) names to a RangeVar (like
 * makeRangeVarFromNameList, but with position support).  The
 * "AnyName" refers to the any_name production in the grammar.
 */
static RangeVar *makeRangeVarFromAnyName(List *names, int position,
                                         core_yyscan_t yyscanner) {
  RangeVar *r = makeNode(RangeVar);

  switch (list_length(names)) {
    case 1:
      r->catalogname = NULL;
      r->schemaname = NULL;
      r->relname = strVal(linitial(names));
      break;
    case 2:
      r->catalogname = NULL;
      r->schemaname = strVal(linitial(names));
      r->relname = strVal(lsecond(names));
      break;
    case 3:
      r->catalogname = strVal(linitial(names));
      r->schemaname = strVal(lsecond(names));
      r->relname = strVal(lthird(names));
      break;
    default:
      ereport(ERROR,
              (errcode(ERRCODE_SYNTAX_ERROR),
               errmsg("improper qualified name (too many dotted names): %s",
                      NameListToString(names)),
               parser_errposition(position)));
      break;
  }

  r->relpersistence = RELPERSISTENCE_PERMANENT;
  r->location = position;

  return r;
}

/* Separate Constraint nodes from COLLATE clauses in a ColQualList */
static void SplitColQualList(List *qualList, List **constraintList,
                             CollateClause **collClause,
                             core_yyscan_t yyscanner) {
  ListCell *cell;
  ListCell *prev;
  ListCell *next;

  *collClause = NULL;
  prev = NULL;
  for (cell = list_head(qualList); cell; cell = next) {
    Node *n = (Node *)lfirst(cell);

    next = lnext(cell);
    if (IsA(n, Constraint)) {
      /* keep it in list */
      prev = cell;
      continue;
    }
    if (IsA(n, CollateClause)) {
      CollateClause *c = (CollateClause *)n;

      if (*collClause)
        ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("multiple COLLATE clauses not allowed"),
                        parser_errposition(c->location)));
      *collClause = c;
    } else
      elog(ERROR, "unexpected node type %d", (int)n->type);
    /* remove non-Constraint nodes from qualList */
    qualList = list_delete_cell(qualList, cell, prev);
  }
  *constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void processCASbits(int cas_bits, int location, const char *constrType,
                           bool *deferrable, bool *initdeferred,
                           bool *not_valid, bool *no_inherit,
                           core_yyscan_t yyscanner) {
  /* defaults */
  if (deferrable) *deferrable = false;
  if (initdeferred) *initdeferred = false;
  if (not_valid) *not_valid = false;

  if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED)) {
    if (deferrable)
      *deferrable = true;
    else
      ereport(ERROR,
              (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
               /* translator: %s is CHECK, UNIQUE, or similar */
               errmsg("%s constraints cannot be marked DEFERRABLE", constrType),
               parser_errposition(location)));
  }

  if (cas_bits & CAS_INITIALLY_DEFERRED) {
    if (initdeferred)
      *initdeferred = true;
    else
      ereport(ERROR,
              (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
               /* translator: %s is CHECK, UNIQUE, or similar */
               errmsg("%s constraints cannot be marked DEFERRABLE", constrType),
               parser_errposition(location)));
  }

  if (cas_bits & CAS_NOT_VALID) {
    if (not_valid)
      *not_valid = true;
    else
      ereport(ERROR,
              (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
               /* translator: %s is CHECK, UNIQUE, or similar */
               errmsg("%s constraints cannot be marked NOT VALID", constrType),
               parser_errposition(location)));
  }

  if (cas_bits & CAS_NO_INHERIT) {
    if (no_inherit)
      *no_inherit = true;
    else
      ereport(ERROR,
              (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
               /* translator: %s is CHECK, UNIQUE, or similar */
               errmsg("%s constraints cannot be marked NO INHERIT", constrType),
               parser_errposition(location)));
  }
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view definition as the query.
 * ----------
 */
static Node *makeRecursiveViewSelect(char *relname, List *aliases,
                                     Node *query) {
  SelectStmt *s = makeNode(SelectStmt);
  WithClause *w = makeNode(WithClause);
  CommonTableExpr *cte = makeNode(CommonTableExpr);
  List *tl = NIL;
  ListCell *lc;

  /* create common table expression */
  cte->ctename = relname;
  cte->aliascolnames = aliases;
  cte->ctequery = query;
  cte->location = -1;

  /* create WITH clause and attach CTE */
  w->recursive = true;
  w->ctes = list_make1(cte);
  w->location = -1;

  /* create target list for the new SELECT from the alias list of the
   * recursive view specification */
  foreach (lc, aliases) {
    ResTarget *rt = makeNode(ResTarget);

    rt->name = NULL;
    rt->indirection = NIL;
    rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
    rt->location = -1;

    tl = lappend(tl, rt);
  }

  /* create new SELECT combining WITH clause, target list, and fake FROM
   * clause */
  s->withClause = w;
  s->targetList = tl;
  s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

  return (Node *)s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void parser_init(base_yy_extra_type *yyext) {
  yyext->parsetree = NIL; /* in case grammar forgets to set it */
}

/*
 * Must undefine this stuff before including scan.c, since it has different
 * definitions for these macros.
 */
#undef yyerror
#undef yylval
#undef yylloc

#include "scan.cpp"
